<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>死磕Redis之持久化</title>
      <link href="/2022/03/21/si-ke-redis-zhi-chi-jiu-hua/"/>
      <url>/2022/03/21/si-ke-redis-zhi-chi-jiu-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><p>Redis实现持久化有2种方式，全量快照RDB和追加日志AOF。</p><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>RDB真的懒得介绍，因为很不实用，如果只使用RDB，恢复时会导致分钟级别以上的数据缺失。<br>可以通过配置save “”来禁用。<br>RDB的原理就是把内存全量数据写到文件里，采用压缩数据的方式，所以快照文件大小会比较小。<br>可以使用save阻塞主线程的方式，也可以使用bgsave命令异步执行。<br>也可以自动执行保存快照，通过配置save 300 100来自动执行，300代表300秒，100代表100次改动，任何一个达到就会触发。<br>另外RDB不适合频繁写入，尤其是内存数据比较多的情况下，会导致磁盘IO压力比较大，可能这次还没全量写完，下次就又触发了，这也是不推荐使用RDB的原因，同时子进程虽然异步写，但是由于WOC（write on copy）的机制，也会导致内存暴涨，容易在内存吃紧的时候，导致不可用。</p><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>AOF采用追加指令的方式写日志，采用的是写后日志，即先写内存，再写日志，和（Write Ahead Log）WAL相反。<br>为什么采用后写呢？因为可以避免指令检查，先写内存成功则代表指令是合法的，而且也不会阻塞当前的「写」指令执行。</p><h4 id="写回策略"><a href="#写回策略" class="headerlink" title="写回策略"></a>写回策略</h4><p>AOF可以配置写回策略，即频率和是否阻塞，通过配置appendfsync，一共有3个选项：always，everysec，no</p><ul><li>always：同步写回，写指令执行完毕立马将 aof_buf缓冲区中的内容刷写到 AOF 文件。</li><li>everysec：每秒写回，写指令执行完，日志只会写到 AOF 文件缓冲区，每隔一秒就把缓冲区内容同步到磁盘。</li><li>no： 操作系统控制，写执行执行完毕，把日志写到 AOF 文件内存缓冲区，由操作系统决定何时刷写到磁盘。</li></ul><p>推荐使用everysec</p><h4 id="AOF日志过大怎么办？"><a href="#AOF日志过大怎么办？" class="headerlink" title="AOF日志过大怎么办？"></a>AOF日志过大怎么办？</h4><p>既然是追加，那难免日志会越来越大，日志过大会导致写性能越来越差，甚至导致磁盘不足等风险。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211549622.png"><br>AOF采用重写机制来优化日志，rewrite即将日志内容合并，因为可能同一个key在一段时间内反复被设置数据，其实只需要保持最新的数据指令即可，这样就可以使日志文件大大减少，但是即便是可以减少，恢复时如果一条一条执行指令，也是会比较慢的，虽然RDB会丢数据，但是恢复的时候却很快，那能不能结合2个的优点呢？<br>4.0之后Redis对AOF进行了优化，重写时会先进行一次RDB，后续再追加指令。<br>默认AOF文件是appendonly.aof，通过配置appendonly yes来启用，默认是no<br>AOF内容如下：<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211553164.png"><br>*3代表有3个指令组成，每个指令通过$n标识，n就是指令长度，如Set是$3</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不建议使用RDB，会存在分钟级数据丢失<br>建议使用AOF，4.0以后还进行了优化，策略使用默认everysec即可。</p>]]></content>
      
      
      <categories>
          
          <category> 死磕Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 分布式缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕Redis之数据类型</title>
      <link href="/2022/03/15/si-ke-redis-zhi-shu-ju-lei-xing/"/>
      <url>/2022/03/15/si-ke-redis-zhi-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h3><p>Redis之所以很流行，除了作为集中式缓存之外，还因为其提供了丰富的数据类型，我们看下都有哪些数据类型。<br>对外的API数据类型主要有以下几种：</p><ul><li>String</li><li>List</li><li>Hash</li><li>Set</li><li>Sorted Set</li></ul><p>而对应的底层数据结构则有<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181617189.png"></p><h3 id="Redis的Key-Value存储结构"><a href="#Redis的Key-Value存储结构" class="headerlink" title="Redis的Key-Value存储结构"></a>Redis的Key-Value存储结构</h3><p>我们知道Redis是通过Key来操作Value的，那Key-Value的对应关系又是怎么样的呢，如何快速通过key找到对应的value呢<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151254812.png" alt="图片来源-极客时间-Redis核心技术与实践"><br>既然是使用哈希表的方式，当KEY比较多的时候，必然会出现哈希冲突的情况，那如果有哈希冲突，redis是如何处理的呢。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151518362.png" alt="图片来源-极客时间-Redis核心技术与实践"><br>首先使用链式哈希解决哈希冲突，但是如果链式长度过长，也会导致性能下降，则Redis会进行一次渐进式rehash操作。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181217176.png" alt="图片来源-极客时间-Redis核心技术与实践"><br>其实不止因为哈希冲突会扩充全局哈希表，随着Key的增多，容量不够时一样会进行扩充全局哈希表，我们来看下日志。<br>首先修改日志级别为verbose和设置日志文件</p><pre class="line-numbers language-none"><code class="language-none">loglevel verboselogfile &quot;&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.log&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行Set命令后可以看到日志如下：</p><pre class="line-numbers language-none"><code class="language-none">1:C 17 Mar 2022 15:26:59.612 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo1:C 17 Mar 2022 15:26:59.612 # Redis version&#x3D;6.2.6, bits&#x3D;64, commit&#x3D;00000000, modified&#x3D;0, pid&#x3D;1, just started1:C 17 Mar 2022 15:26:59.612 # Configuration loaded1:M 17 Mar 2022 15:26:59.613 * monotonic clock: POSIX clock_gettime1:M 17 Mar 2022 15:26:59.613 * Running mode&#x3D;standalone, port&#x3D;6379.1:M 17 Mar 2022 15:26:59.613 # Server initialized1:M 17 Mar 2022 15:26:59.613 * Ready to accept connections1:M 17 Mar 2022 15:28:52.452 - Accepted 127.0.0.1:490861:M 17 Mar 2022 15:29:24.969 - DB 0: 1 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:29:29.980 - DB 0: 2 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:29:34.993 - DB 0: 2 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:29:40.005 - DB 0: 2 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:29:45.018 - DB 0: 2 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:29:50.030 - DB 0: 3 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:29:55.042 - DB 0: 3 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:30:00.053 - DB 0: 4 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:30:05.066 - DB 0: 4 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:30:10.079 - DB 0: 4 keys (0 volatile) in 4 slots HT.1:M 17 Mar 2022 15:30:15.091 - DB 0: 5 keys (0 volatile) in 8 slots HT.1:M 17 Mar 2022 15:30:20.104 - DB 0: 6 keys (0 volatile) in 8 slots HT.1:M 17 Mar 2022 15:32:55.475 - DB 0: 7 keys (0 volatile) in 8 slots HT.1:M 17 Mar 2022 15:33:00.488 - DB 0: 9 keys (0 volatile) in 16 slots HT.1:M 17 Mar 2022 15:33:05.498 - DB 0: 10 keys (0 volatile) in 16 slots HT.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有些重复的日志我删掉了，可以看到初始化是4个slots，后续扩容都会翻倍。</p><h3 id="dictEntry"><a href="#dictEntry" class="headerlink" title="dictEntry"></a>dictEntry</h3><p>全局哈希表里存储的具体对象是dictEntry，具体结构是什么样的呢？<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181350496.png"><br>以Set hello world指令举例，属性key即设置的hello，指向sds（Simple Dynamic String）类型<br>属性val指向redisObject类型,而next即哈希冲突的拉链，指向下一个entry</p><h3 id="redisObject"><a href="#redisObject" class="headerlink" title="redisObject"></a>redisObject</h3><p>Redis中的每个对象底层的数据结构都是redisObject结构体</p><ul><li>type    :记录redis的对象类型</li><li>encoding:记录底层编码，即使用哪种数据结构保存数据</li><li>lru:和缓存淘汰相关</li><li>refcount:对象被引用的次数</li><li>ptr:指向底层数据结构的指针<br>type记录值的类型，即string,list,set,hash,zset,包括后续新增的stream,geo,bitmap等新的类型</li></ul><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; SET hello worldOK127.0.0.1:6379&gt; type hellostring127.0.0.1:6379&gt; LPUSH list 1(integer) 1127.0.0.1:6379&gt; type listlist127.0.0.1:6379&gt; SADD set 1(integer) 1127.0.0.1:6379&gt; type setset127.0.0.1:6379&gt; HSET hash hello world(integer) 1127.0.0.1:6379&gt; type hashhash127.0.0.1:6379&gt; ZADD zset 1 hello(integer) 1127.0.0.1:6379&gt; type zsetzset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>encoding即底层存储数据结构，可以使用object encoding key来确定encoding的类型</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; object encoding hello&quot;embstr&quot;127.0.0.1:6379&gt; object encoding 1&quot;int&quot;127.0.0.1:6379&gt; object encoding list&quot;quicklist&quot;127.0.0.1:6379&gt; object encoding set&quot;intset&quot;127.0.0.1:6379&gt; object encoding hash&quot;ziplist&quot;127.0.0.1:6379&gt; object encoding zset&quot;ziplist&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体每个type对应的encoding如下：<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181516759.png"></p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>Redis没有使用c语言的字符串，而是自己写了一个，并且做了优化，会根据字符串的长度的不同使用不同的类型以减小内存占用。<br>每个类型大体上都有以下属性：</p><ul><li>len:字符串长度</li><li>alloc:分配的空间长度</li><li>flags:标识类型</li><li>buf[]:字符数组<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181424818.png"><br>在sdshdr5中将类型放到了flags的前3个字节中（3个字节能保存6种类型，所以3个字节足够了），后5个字节用来保存字符的长度。因为sdshdr5取消了alloc字段，因此也不会进行空间预分配<br>当存储的val为数字类型时，则直接使用整数来保存这个字符串，也就是redisObject里的属性val，直接存数字，这也是type是int的由来。<br>当字符串的长度小于等于44字节时，redisObject和sds一起分配内存。当字符串大于44字节时，才对redisObject分配一次内存，对sds分配一次内存<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181527532.png"></li></ul><h5 id="为什么以44字节为界限？"><a href="#为什么以44字节为界限？" class="headerlink" title="为什么以44字节为界限？"></a>为什么以44字节为界限？</h5><p>redisObject：16个字节 SDS：sdshdr8（3个字节）+ SDS 字符数组（N字节 + \0结束符 1个字节）<br>Redis规定嵌入式字符串最大以64字节存储，所以N=64-16-3-1=44</p><h5 id="为什么嵌入式字符串最大以64字节存储？"><a href="#为什么嵌入式字符串最大以64字节存储？" class="headerlink" title="为什么嵌入式字符串最大以64字节存储？"></a>为什么嵌入式字符串最大以64字节存储？</h5><p>因为在x86体系下，一般的缓存行大小是63字节，redis能一次加载完成</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; SET hello worldOK127.0.0.1:6379&gt; object encoding hello&quot;embstr&quot;127.0.0.1:6379&gt; SET hello 01234567890123456789012345678901234567890123OK127.0.0.1:6379&gt; object encoding hello&quot;embstr&quot;127.0.0.1:6379&gt; SET hello 012345678901234567890123456789012345678901234OK127.0.0.1:6379&gt; object encoding hello&quot;raw&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ziplist数据结构"><a href="#ziplist数据结构" class="headerlink" title="ziplist数据结构"></a>ziplist数据结构</h3><p>由于ziplist数据结构几乎在所有集合都用到了，需要先介绍一下ziplist<br>压缩列表实际上类似于一个数组，数组中的每一个元素都对应保存一个数据。和数组不同的是，压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181539390.png"></p><h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><p>list类型现在是直接使用quicklist实现的<br>quicklist是一个双向链表，链表中每个节点是一个ziplist<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181541836.png"></p><h3 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h3><p>元素比较少时用ziplist来存储，当元素比较多时用hash来存储<br>元素比较少时<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545270.png"><br>元素比较多时<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545806.png"></p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; HSET hash hello world(integer) 0127.0.0.1:6379&gt; object encoding hash&quot;ziplist&quot;127.0.0.1:6379&gt; HSET hash hello worldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworld(integer) 0127.0.0.1:6379&gt; object encoding hash&quot;hashtable&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h3><p>当元素不多，且元素都为整数时，set的底层实现为intset，否则为dict<br>intset<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181551344.png"><br>hashtable<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181552477.png"></p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; object encoding set&quot;intset&quot;127.0.0.1:6379&gt; SADD set hello(integer) 1127.0.0.1:6379&gt; object encoding set&quot;hashtable&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="zset类型"><a href="#zset类型" class="headerlink" title="zset类型"></a>zset类型</h3><p>zset当元素较少时会使用ziplist来存储<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181557617.png"><br>zset当元素较多时使用dict+skiplist来存储<br>dict保存了数据到分数的映射关系，skiplist用来根据分数查询数据<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181559381.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Redis对存储整数友好，可以压缩内存使用且存取效率高</li><li>尽量使用短Key，不要超过44长度，否则会使用raw带来额外存取操作，使用数字类型效率最高。</li><li>设置maxmemory，其容量最好不要超过最大物理内存的1/2，防止rdb时子进程写快照时的内存暴涨，即便停用rdb，使用slave时也会有一次rdb同步，导致内存暴涨，建议一个master不要超过2个slave。</li><li>设置内存淘汰策略，防止内存不够导致的异常</li><li>避免大KEY，hashtable结构遍历很耗时，尽量使用scan获取大量数据，而不是getall</li></ul>]]></content>
      
      
      <categories>
          
          <category> 死磕Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 分布式缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死磕redis之起手式</title>
      <link href="/2022/03/11/si-ke-redis-zhi-qi-shou-shi/"/>
      <url>/2022/03/11/si-ke-redis-zhi-qi-shou-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="死磕Redis系列"><a href="#死磕Redis系列" class="headerlink" title="死磕Redis系列"></a>死磕Redis系列</h3><p>Redis作为集中式缓存（也支持分布式架构），不管是单体应用还是分布式微服务都离不开，所以对Redis进行深入了解则显得额外重要，所以打算做一个死磕Redis系列，从浅到深的系统介绍一下Redis，当然这也是很好的对知识的梳理和再学习的机会，因为最好的学习方式就是能清晰的讲给别人听。<br>我个人认为学习一项知识或者技术，大致分为三个阶段，</p><ol><li>熟练使用</li><li>原理架构</li><li>深入源码</li></ol><p>首先需要先动手，先用起来，写写demo，做做项目，有一个大概的认知。<br>随着可以掌握大部分功能，就可以深入其原理和架构，了解其设计和思想是什么样的，这个时候就对其整体有了认知。<br>当有了全局和思想的掌握后，就可以深入细节，阅读源码则更能由表入里，完全掌握这项技术或中间件。<br>当然这三个部分是互相循环的，互为助推，随着熟练使用，就接触到一部分原理和架构，然后可能也会看一部分源码， 继而更有助于熟练使用，也能更理解原理和架构。就像下面这张图一样。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111725715.jpg"></p><h3 id="死磕Redis系列大纲"><a href="#死磕Redis系列大纲" class="headerlink" title="死磕Redis系列大纲"></a>死磕Redis系列大纲</h3><p>大概计划了一个大纲<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111728829.png"><br>如果能写完死磕Redis系列，效果还不错的话，可能还会有《死磕Netty》《死磕Kotlin》《死磕Java并发》等等系列吧。</p><h3 id="死磕Redis之起手式"><a href="#死磕Redis之起手式" class="headerlink" title="死磕Redis之起手式"></a>死磕Redis之起手式</h3><p>那么我们就正式进入死磕Redis系列的起手式。<br>不要小看起手式，陈氏太极拳里的起手式可以起到静气凝神，是为后续宜柔宜刚打下基础，也起了一个基调。</p><h3 id="本地单机Redis"><a href="#本地单机Redis" class="headerlink" title="本地单机Redis"></a>本地单机Redis</h3><p>开始死磕Redis之前，我们首先需要有个Redis，那如何快速获取一个Redis呢？有2种方式，自己本地装一个，或者使用docker启动一个。<br>我推荐使用docker，因为简单方便，使用之后清理也方便，最重要的是不会污染你本地环境和端口。<br>首先我们先装一个<a href="https://www.docker.com/get-started">docker desktop</a>，具体点击链接按照指引即可安装成功。<br>然后我们去DockerHub搜一下<a href="https://hub.docker.com/_/redis?tab=tags">Redis</a>的镜像，点击链接即可跳转过去，Redis的版本很多，我们暂时选最新稳定版6.2.6。<br>启动Redis实例<code>docker run --name redis -p 127.0.0.1:6379:6379 -d redis:6.2.6</code>，运行<code>docker ps</code>就可以看到运行中的redis实例了。<br>如果本地没有安装redis，没有redis-cli工具，则可以使用<code>docker exec -it redis redis-cli</code>连到容器的redis，执行info命令就可以看到redis服务的信息了。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112301578.png"></p><h3 id="spring-boot连接Redis"><a href="#spring-boot连接Redis" class="headerlink" title="spring boot连接Redis"></a>spring boot连接Redis</h3><p>我们首先可以使用<a href="https://start.spring.io/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%AA%A8%E6%9E%B6%E7%A8%8B%E5%BA%8F">https://start.spring.io/创建一个骨架程序</a><br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112315606.png"><br>点击生成下载到本地后，使用IntelliJ打开<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112352611.png"><br>如果你按照上述步骤来动手实践的话，我希望你在demo文件夹下使用git init来初始化代码仓库，以方便对代码进行版本管理。</p><h3 id="HelloRedis"><a href="#HelloRedis" class="headerlink" title="HelloRedis"></a>HelloRedis</h3><p>我们需要添加一些代码，设置Redis相关的配置，来执行HelloRedis的操作。<br>首先我们先在application.properties添加Redis连接信息</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后创建一个HelloRedisController来响应http，并对Redis进行操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">learn<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token comment">/** * @author wangdengwu */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/redis"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloRedisController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> HELLO <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helloRedis</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> HELLO <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HELLO<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> HELLO <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用mvn spring-boot:run或者在IDE里启动DemoApplication<br>然后在浏览器里输入<a href="http://127.0.0.1:8080/redis/hello?name=redis">http://127.0.0.1:8080/redis/hello?name=redis</a><br>这样就将redis字符串存到了redis里，再执行<a href="http://127.0.0.1:8080/redis/hello%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0hello">http://127.0.0.1:8080/redis/hello，就可以看到hello</a> redis了<br>也可以使用命令<code>docker exec -it redis redis-cli</code>连接到redis，执行<code>keys *</code>以及<code>get hello</code>和<code>type hello</code>可以看到redis内存储的数据信息<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203120044575.png"></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>虽然这个起手式真的很简单，但是它打通了我们连接redis的第一步，后续我们将持续增加功能来对redis进行操作</p>]]></content>
      
      
      <categories>
          
          <category> 死磕Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 分布式缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java ThreadLocal探秘</title>
      <link href="/2022/03/10/java-threadlocal-tan-mi/"/>
      <url>/2022/03/10/java-threadlocal-tan-mi/</url>
      
        <content type="html"><![CDATA[<h3 id="一个ThreadLocal的问题"><a href="#一个ThreadLocal的问题" class="headerlink" title="一个ThreadLocal的问题"></a>一个ThreadLocal的问题</h3><p>昨天面试，有被问到ThreadLocal如何跨线程传递数据，被问到知识盲区了，很是尴尬，自己确实没仔细看过ThreadLocal的代码，回来后赶紧抱起源码读了起来，读完之后，对ThreadLocal是即爱又怕，爱它能传递数据，并避免多线程安全问题，怕的是内存泄漏。</p><h3 id="ThreadLocal例子1"><a href="#ThreadLocal例子1" class="headerlink" title="ThreadLocal例子1"></a>ThreadLocal例子1</h3><p>这个例子主要是演示，子线程内是获取不到主线程里设置的数据，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertNull</span><span class="token punctuation">(</span><span class="token string">"get from ThreadLocal in child thread should be null"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个单元测试很简单，就是测一下主线程里设置一个值，子线程里取肯定是null，也就是取不到。这反而是TheadLocal的主要作用，就是隔离线程。</p><h3 id="TheadLocal例子2"><a href="#TheadLocal例子2" class="headerlink" title="TheadLocal例子2"></a>TheadLocal例子2</h3><p>这个例子就是演示如何跨线程获取数据，也就是我被问到的那个问题如何实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInheritableThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"get from InheritableThreadLocal in child thread should be equals"</span><span class="token punctuation">,</span> <span class="token string">"Parent"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码一样很简单，只需要使用InheritableThreadLocal的实现类即可。<br>那原理是什么呢？那就要深入浅出源码了。</p><h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p>先看下ThreadLocal的set方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> firstKey<span class="token punctuation">,</span> <span class="token class-name">Object</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>INITIAL_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> firstKey<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>INITIAL_CAPACITY <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>firstKey<span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setThreshold</span><span class="token punctuation">(</span>INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadLocalHashCode <span class="token operator">=</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> HASH_INCREMENT <span class="token operator">=</span> <span class="token number">0x61c88647</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> nextHashCode <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> nextHashCode<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span>HASH_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有2个关键信息</p><ol><li>第一次set的时候是直接new ThreadLocalMap初始化放进去的</li><li>我们的value是放到ThreadLocalMap里的，而ThreadLocalMap是当前线程的一个属性threadLocals<br>那关键点就在ThreadLocalMap类上了，看下它的set方法，注意<code>map.set(this, value);</code>,这个this是ThreadLocal</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token operator">++</span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">>=</span> threshold<span class="token punctuation">)</span>        <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我去掉了注释，代码略微有点复杂了，但是我们现在只关注主线，就是value到底存到哪了？<br>首先和table属性有关，它是一个Entry数组，默认初始化的时候是16大小，然后遍历这个数组,找到Entry的key和当前ThreadLocal一致的元素，然后把value放进去，如果没找到就直接new一个放到table数组的i位置。<br>而i的取值又和ThreadLocal的threadLocalHashCode有关，并且每实例化一个ThreadLocal都会递增。<br>注意Entry是一个弱引用类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** The value associated with this ThreadLocal. */</span>    <span class="token class-name">Object</span> value<span class="token punctuation">;</span>    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这也就解释了普通TheadLocal为什么跨线程获取不到数据，因为数据是在每个线程实例里的，而key又和每个ThreadLocal有关，因为我们可能使用多个ThreadLocal保存多个对象。</p><h3 id="如何实现父子之间传递"><a href="#如何实现父子之间传递" class="headerlink" title="如何实现父子之间传递"></a>如何实现父子之间传递</h3><p>我们看下Thread的init方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> stackSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">init</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> stackSize<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不得不吐槽Java不支持参数命名这个机制，kotlin就很好的支持了这个特性，在调用的时候很清楚的表达了传递的参数是什么含义。<br>看下例子</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> NameParam <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">namedParams</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> sex<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//可以有默认值</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">NameParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namedParams</span><span class="token punctuation">(</span><span class="token string">"我"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token comment">//不使用命名参数，按顺序赋值，默认年龄0，可以不传值</span>    <span class="token function">NameParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">namedParams</span><span class="token punctuation">(</span>sex <span class="token operator">=</span> <span class="token string">"male"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"me"</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用命名参数，清晰明了</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嗯，kotlin就是那种，一旦你使用过，就爱上的那种。毕竟是我jetbrains出品,被Google认作亲儿子的语言<br>好了，回到Java。。。。。。。，我得上图<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101617305.png"><br>重点代码我都标了，也就是如果想父子线程传递，就需要使用inheritableThreadLocals而不是threadLocals<br>那我们再看下InheritableThreadLocal类的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">childValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> parentValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> parentValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> t<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        t<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嗯，重写了关键方法createMap和getMap，这下串起来了吧，所以使用InheritableThreadLocal就使用了inheritableThreadLocals，而线程初始化的时候，又会根据inheritableThreadLocals判断是否复制当前线程的inheritableThreadLocals</p><h3 id="可能的内存泄漏"><a href="#可能的内存泄漏" class="headerlink" title="可能的内存泄漏"></a>可能的内存泄漏</h3><p>我们直接上代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryLeakBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MemoryLeakBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"MemoryLeakBean"</span> <span class="token operator">+</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> THREAD <span class="token operator">=</span> <span class="token string">"Thread"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@Ignore</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMemoryLeakWithThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">></span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemoryLeakBean</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// now we start 16 thread without remove thread local</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>THREAD <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MemoryLeakBean</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">reflect</span><span class="token punctuation">(</span>threadLocal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    executorService<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reflect</span><span class="token punctuation">(</span><span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">></span></span> threadLocal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Field</span> threadLocalsField <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        threadLocalsField <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"threadLocals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadLocalsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> threadLocals <span class="token operator">=</span> threadLocalsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>threadLocals <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Field</span> table <span class="token operator">=</span> threadLocals<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> entries <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>threadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Field</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            value<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'s entries values is "</span> <span class="token operator">+</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//我们只需要挑一个线程打印一次就行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>THREAD <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after gc threadLocal is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释一下，首先使用弱引用创建ThreadLocal，然后使用线程池启动16个线程，分别设置MemoryLeakBean，使用自定义的MemoryLeakBean是因为我们需要看下jvm内存的对象个数，而使用String,Long不容易看清楚。<br>等待5秒开始gc，这样弱引用就会被释放，也就是ThreadLocal对象就没有了，然后我们线程里循环反射获取MemoryLeakBean对象。这个时候如果线程不释放，则MemoryLeakBean对象就一直存在，而线程池是一直存在的。我们看下执行结果</p><p><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101643315.png"><br>可以看到ThreadLocal已经没有了，但是还是能获取到MemoryLeakBean<br>我们使用jmap看下<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101645895.png"><br>可以看到确实是有16个MemoryLeakBean对象还在。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ThreadLocal虽好，可不要贪杯哦。最后还是要安利一下kotlin</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出HikariCP数据库连接池</title>
      <link href="/2021/12/01/shen-ru-qian-chu-hikaricp-shu-ju-ku-lian-jie-chi/"/>
      <url>/2021/12/01/shen-ru-qian-chu-hikaricp-shu-ju-ku-lian-jie-chi/</url>
      
        <content type="html"><![CDATA[<h3 id="HikariCP简介"><a href="#HikariCP简介" class="headerlink" title="HikariCP简介"></a>HikariCP简介</h3><p>HikariCP数据库连接池是spring boot的默认数据库连接池，看名字我以为是日本人写的，后来才知道是一个常年居住在东京的美国人写的，spring默认把hikari作为数据库连接池的原因也很简单，因为它足够快，代码量少，稳定，虽然功能不及Druid，但是对于监控也有一定的扩展性，简单，快速，稳定是其胜出的原因。目前支持JDK8的最新版本是4.0.3，在GitHub开源，<a href="https://github.com/brettwooldridge/HikariCP">项目地址</a></p><h3 id="不使用数据库连接池"><a href="#不使用数据库连接池" class="headerlink" title="不使用数据库连接池"></a>不使用数据库连接池</h3><p>现在由于spring的普及，以及spring boot的集成便利性，无论是使用JPA还是MyBatis，底层ORM已经非常成熟，即便是基于学习也很少有人手动建立数据库连接，并执行SQL了，如果不使用数据库连接池，完全手动连接数据库，并执行SQL应该怎么做呢，让我们回到刀耕火种的时代，再怀旧一下。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driverClassName<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>mysqlspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">123456</span><span class="token keyword">interface</span> HikariDao <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">useHikari</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String    <span class="token keyword">fun</span> <span class="token function">useJdbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token punctuation">&#125;</span><span class="token keyword">package</span> <span class="token keyword">data</span><span class="token punctuation">.</span>source<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>dao<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JdbcTemplate<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ResultSetExtractor<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token annotation builtin">@Service</span><span class="token keyword">class</span> <span class="token function">HikariDaoImpl</span><span class="token punctuation">(</span>    <span class="token annotation builtin">@Autowired</span> <span class="token keyword">private</span> <span class="token keyword">val</span> jdbcTemplate<span class="token operator">:</span> JdbcTemplate<span class="token punctuation">,</span>    <span class="token annotation builtin">@Value</span><span class="token punctuation">(</span><span class="token string">"\<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">val</span> jdbcUrl<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token annotation builtin">@Value</span><span class="token punctuation">(</span><span class="token string">"\<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">val</span> userName<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token annotation builtin">@Value</span><span class="token punctuation">(</span><span class="token string">"\<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">val</span> password<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">:</span> HikariDao <span class="token punctuation">&#123;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> ALIAS <span class="token operator">=</span> <span class="token string">"time"</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> SQL <span class="token operator">=</span> <span class="token string">"select now() as <span class="token interpolation variable">$ALIAS</span>"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">useHikari</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>SQL<span class="token punctuation">,</span> ResultSetExtractor <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token label symbol">@ResultSetExtractor</span> it<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>ALIAS<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">!!</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">useJdbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>jdbcUrl<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            statement<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">val</span> result <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>SQL<span class="token punctuation">)</span>                result<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span>                    it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>ALIAS<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接操作jdbc，需要通过DriverManager获取数据库连接，然后通过Statement执行SQL，拿到ResultSet，手动getXXX获取数据并组装成对象，这里使用了kotlin的use来自动close，通过示例可以看到如果手动操作，非常繁琐，需要关心很多和业务无关的操作，而spring jdbc以及ORM框架则把这些繁琐的操作都封装了起来，使我们只需要关注具体的SQL和对象。<br>这里还有一个小知识点，就是SPI，在JDBC4.0之前，需要使用<code>Class.forName(driverClassName)</code>来加载驱动，而JDBC4.0之后只需要厂商在驱动包里配置一下即可<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211201182322.png"><br>原理是通过<code>val loader = ServiceLoader.load(Driver::class.java)</code>即可加载到实现。</p><h3 id="为什么需要数据库连接池"><a href="#为什么需要数据库连接池" class="headerlink" title="为什么需要数据库连接池"></a>为什么需要数据库连接池</h3><p>数据库连接是TCP连接，需要经过TCP的三次握手，如果每次访问数据库都需要建立连接，则会导致每次获取数据都需要等待连接，将会大大降低数据获取的响应时间，而数据库连接池则是将数据库连接缓存起来，保持TCP连接不断，在需要的时候，直接从连接池里获取，不需要等待即可执行SQL获取到数据<br>除了降低响应时间之外，数据库连接池还可以设定数据库连接数量，因为数据库连接是宝贵资源，当某一个服务并发比较高，并且SQL执行比较慢的时候，会导致建立大量的数据库连接，这往往会对数据库造成致命的影响，导致数据库连接占满而不可用，其它正常的服务也将不可用。<br>另外TCP连接频繁建立断开，由于TCP断开的4次握手，会导致大量的TIME_WAIT状态问题，这也将会影响数据库的性能。</p><h3 id="数据库连接池原理"><a href="#数据库连接池原理" class="headerlink" title="数据库连接池原理"></a>数据库连接池原理</h3><p>在系统初始化的时候，在内存中开辟一片空间，将一定数量的数据库连接作为对象存储在对象池里，并对外提供数据库连接的获取和归还方法。用户访问数据库时，并不是建立一个新的连接，而是从数据库连接池中取出一个已有的空闲连接对象；使用完毕归还后的连接也不会马上被关闭，而是由数据库连接池统一管理回收，为下一次借用做好准备。如果由于高并发请求导致数据库连接池中的连接被借用完毕，其他线程就会等待，直到有连接被归还。整个过程中，连接并不会被关闭，而是源源不断地循环使用，有借有还。数据库连接池还可以通过设置其参数来控制连接池中的初始连接数、连接的上下限数，以及每个连接的最大使用次数、最大空闲时间等，也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。</p><h3 id="数据库连接池组成"><a href="#数据库连接池组成" class="headerlink" title="数据库连接池组成"></a>数据库连接池组成</h3><p><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0.jpg"></p><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>由于spring boot 2.x开始数据库连接池已经默认是HikariCP了，所以我们只需要进行配置即可，那都有哪些配置项需要配置呢，又有哪些需要注意的地方呢？</p><h4 id="默认是怎么生效的"><a href="#默认是怎么生效的" class="headerlink" title="默认是怎么生效的"></a>默认是怎么生效的</h4><p>我们先来看下，spring boot 2.6.1是怎么默认使用HikariCP为数据库连接池的。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只要在pom.xml引入starter-jdbc，则默认就引入了HikariCP数据库连接池，我们看下spring-boot-starter-jdbc的pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到jdbc依赖了HikariCP，并且版本是4.0.3最新版本。了解spring boot starter机制的应该知道，除了pom依赖，还需要有autoconfig<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211202154126.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.datasource.type"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"com.zaxxer.hikari.HikariDataSource"</span><span class="token punctuation">,</span>matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Hikari</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.hikari"</span><span class="token punctuation">)</span><span class="token class-name">HikariDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">HikariDataSource</span> dataSource <span class="token operator">=</span> <span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dataSource<span class="token punctuation">.</span><span class="token function">setPoolName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就默认初始化了HikariDataSource。<br>让我们再接着看下配置项。除了配置数据库必填的4个之外，常用配置还有另外几个。</p><pre class="line-numbers language-none"><code class="language-none">spring.datasource.driverClassName&#x3D;com.mysql.cj.jdbc.Driverspring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mysqlspring.datasource.username&#x3D;rootspring.datasource.password&#x3D;123456#默认truespring.datasource.hikari.autoCommit&#x3D;true#等待超时时间，默认30秒spring.datasource.hikari.connectionTimeOut&#x3D;30000#最长多久空闲即释放，默认10分钟spring.datasource.hikari.idleTimeout&#x3D;600000#连接最长存活时间毫秒，默认30分钟spring.datasource.hikari.maxLifetime&#x3D;1800000#最大连接池数量，默认10spring.datasource.hikari.maximumPoolSize&#x3D;10#默认和max相同spring.datasource.hikari.minimumIdle&#x3D;10#连接池名称，如果多个微服务，建议配置不同名字spring.datasource.hikari.poolName&#x3D;hikari#开启JMXspring.datasource.hikari.registerMbeans&#x3D;true#监控相关#spring.datasource.hikari.metricRegistry&#x3D;#健康信息#spring.datasource.hikari.healthCheckRegistry&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置项注意点"><a href="#配置项注意点" class="headerlink" title="配置项注意点"></a>配置项注意点</h4><p>大部分应用使用默认值即可很好的工作，需要注意的是连接池数量不是越多越好，而是如何尽量少越好。<br>我们先验证一下超时时间是否生效，为了方便测试，我们打开JMX以及将minimumIdle和maximumPoolSize改为1，然后执行慢查询，占用唯一的链接，再执行正常查询，等待，看看是否30秒会超时。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token annotation builtin">@RestController</span><span class="token keyword">class</span> <span class="token function">HikariController</span><span class="token punctuation">(</span><span class="token annotation builtin">@Autowired</span> <span class="token keyword">private</span> <span class="token keyword">val</span> hikariDao<span class="token operator">:</span> HikariDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hikari"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">hikari</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> hikariDao<span class="token punctuation">.</span><span class="token function">useHikari</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/slow"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">slow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> hikariDao<span class="token punctuation">.</span><span class="token function">slowSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> HikariDao <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">useHikari</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String    <span class="token keyword">fun</span> <span class="token function">useJdbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String    <span class="token keyword">fun</span> <span class="token function">slowSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token punctuation">&#125;</span><span class="token annotation builtin">@Service</span><span class="token keyword">class</span> <span class="token function">HikariDaoImpl</span><span class="token punctuation">(</span>    <span class="token annotation builtin">@Autowired</span> <span class="token keyword">private</span> <span class="token keyword">val</span> jdbcTemplate<span class="token operator">:</span> JdbcTemplate<span class="token punctuation">,</span>    <span class="token annotation builtin">@Value</span><span class="token punctuation">(</span><span class="token string">"\<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">val</span> jdbcUrl<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token annotation builtin">@Value</span><span class="token punctuation">(</span><span class="token string">"\<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">val</span> userName<span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token annotation builtin">@Value</span><span class="token punctuation">(</span><span class="token string">"\<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">val</span> password<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">:</span> HikariDao <span class="token punctuation">&#123;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> TIME <span class="token operator">=</span> <span class="token string">"time"</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> COUNT <span class="token operator">=</span> <span class="token string">"personCount"</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> SQL <span class="token operator">=</span> <span class="token string">"select now() as <span class="token interpolation variable">$TIME</span>"</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> SLOW_SQL <span class="token operator">=</span> <span class="token string">"select count(id) as <span class="token interpolation variable">$COUNT</span> from hikari_person"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">useHikari</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>SQL<span class="token punctuation">,</span> ResultSetExtractor <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token label symbol">@ResultSetExtractor</span> it<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>TIME<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">!!</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">useJdbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>jdbcUrl<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        connection<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            statement<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">val</span> result <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>SQL<span class="token punctuation">)</span>                result<span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">&#123;</span>                    it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>TIME<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">slowSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>SLOW_SQL<span class="token punctuation">,</span> ResultSetExtractor <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token label symbol">@ResultSetExtractor</span> it<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>COUNT<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">!!</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为连接池是懒加载的，我们先访问一下/slow,验证一下不加表锁的情况下可以正常执行并初始化连接池。<br>再通过jconsole看下连接池的情况。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206151609.png"><br>可以看到空闲连接1个，现在，我们把hikari_person表加上写锁，来模拟慢查询。<br><code>LOCK TABLES hikari_person WRITE;</code>  再访问/slow,直接卡住没有返回。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152032.png"><br>可以看到活跃连接1个，已经没有空闲的了，这个时候我们访问/hikari<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152151.png"><br>变成了1个活跃，1个等待，并且30秒报了超时异常。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152344.png"><br>可以看到，确实配置可以生效，当连接池已满，再有请求就会被阻塞等待，然后超时。<br>记得执行<code>UNLOCK TABLES;</code>释放表锁。释放完后，原来等待返回的/slow直接返回了结果0。</p><h3 id="数据源的初始化"><a href="#数据源的初始化" class="headerlink" title="数据源的初始化"></a>数据源的初始化</h3><p>之前已经看到spring boot启动的时候，会初始化HikariDataSource，关键代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.hikari"</span><span class="token punctuation">)</span><span class="token class-name">HikariDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">HikariDataSource</span> dataSource <span class="token operator">=</span> <span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dataSource<span class="token punctuation">.</span><span class="token function">setPoolName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看一下HikariDataSource的类图<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206165729.png"></p><p>由于HikariDataSource继承自HikariConfig，并且<code>@ConfigurationProperties(prefix = &quot;spring.datasource.hikari&quot;)</code>所以我们在application.properties里配置的属性，就初始化到了DataSource里。</p><h3 id="HikariDataSource的获取连接"><a href="#HikariDataSource的获取连接" class="headerlink" title="HikariDataSource的获取连接"></a>HikariDataSource的获取连接</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">"HikariDataSource "</span> <span class="token operator">+</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" has been closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fastPathPool <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> fastPathPool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// See http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java</span>  <span class="token class-name">HikariPool</span> result <span class="token operator">=</span> pool<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> pool<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; - Starting..."</span><span class="token punctuation">,</span> <span class="token function">getPoolName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              pool <span class="token operator">=</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariPool</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PoolInitializationException</span> pie<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>pie<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">SQLException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span><span class="token punctuation">)</span> pie<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">throw</span> pie<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; - Start completed."</span><span class="token punctuation">,</span> <span class="token function">getPoolName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HikariDataSource的getConnection方法，有个额外知识点，就是单例模式，HikariPool是单例的，使用了双重检测锁来完成单例操作。<br>获取连接之前，需要先进行连接池的初始化new HikariPool(this)。</p><h3 id="连接池的初始化"><a href="#连接池的初始化" class="headerlink" title="连接池的初始化"></a>连接池的初始化</h3><p><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%9E%E6%8E%A5%E6%B1%A0.jpg"></p><p>connectionBag是连接池的并发数据结构，做了并发优化，后面再详细说明。<br>houseKeeper是保持连接池数量的线程池，核心数量为1，使用了ScheduledThreadPoolExecutor，默认30秒运行一次。<br>监控后面再单独介绍。<br>启用JMX之后，HikariConfigMXBean和HikariPoolMXBean将会展示到Mbean。<br>创建物理Connection使用了addConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大线程都为1，使用了抛弃旧线程的策略。<br>关闭物理Connection使用了closeConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大也为1，使用了直接在主线程运行的策略。<br>leakTaskFactory用于检测是否有连接泄漏，getConnection之后要及时close掉，如果没有及时close则会有泄漏。通过getConnection时延迟执行ProxyLeakTask，延迟最小值2秒，低于此值则默认不进行连接泄漏检测，如果在该时间内没有及时close，则该延迟任务将会执行，而在close方法里，对该任务进行了cancel，及时close就不会触发ProxyLeakTask。默认是0不执行连接泄漏检测，可以通过spring.datasource.hikari.leakDetectionThreshold=3000设置来启用。<br>到此连接池就初始化完了。</p><h3 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h3><p><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5.jpg"><br>核心代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> hardTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span>   <span class="token punctuation">&#123;</span>      suspendResumeLock<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">long</span> timeout <span class="token operator">=</span> hardTimeout<span class="token punctuation">;</span>         <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PoolEntry</span> poolEntry <span class="token operator">=</span> connectionBag<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>poolEntry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// We timed out... break and throw exception</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>poolEntry<span class="token punctuation">.</span><span class="token function">isMarkedEvicted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">elapsedMillis</span><span class="token punctuation">(</span>poolEntry<span class="token punctuation">.</span>lastAccessed<span class="token punctuation">,</span> now<span class="token punctuation">)</span> <span class="token operator">></span> aliveBypassWindowMs <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isConnectionAlive</span><span class="token punctuation">(</span>poolEntry<span class="token punctuation">.</span>connection<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">closeConnection</span><span class="token punctuation">(</span>poolEntry<span class="token punctuation">,</span> poolEntry<span class="token punctuation">.</span><span class="token function">isMarkedEvicted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> EVICTED_CONNECTION_MESSAGE <span class="token operator">:</span> DEAD_CONNECTION_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>               timeout <span class="token operator">=</span> hardTimeout <span class="token operator">-</span> <span class="token function">elapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               metricsTracker<span class="token punctuation">.</span><span class="token function">recordBorrowStats</span><span class="token punctuation">(</span>poolEntry<span class="token punctuation">,</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> poolEntry<span class="token punctuation">.</span><span class="token function">createProxyConnection</span><span class="token punctuation">(</span>leakTaskFactory<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>poolEntry<span class="token punctuation">)</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         metricsTracker<span class="token punctuation">.</span><span class="token function">recordBorrowTimeoutStats</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> <span class="token function">createTimeoutException</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span>poolName <span class="token operator">+</span> <span class="token string">" - Interrupted during connection acquisition"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         suspendResumeLock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部spring等访问的getConnection最终是访问了HikariPool的getConnection。<br>代码核心就是使用了并发数据结构ConnectionBag,ConnectionBag作用就是类似对象池，存储了数据库连接。<br>使用borrow方法，如果有可用的链接，即可获取到包装对象PoolEntry。<br>这里还有一个逻辑就是如果获取到的链接已经标记为关闭，或者存活时间超时，或者已经不可用，则</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">closeConnection</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PoolEntry</span> poolEntry<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> closureReason<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>connectionBag<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>poolEntry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">final</span> <span class="token class-name">Connection</span> connection <span class="token operator">=</span> poolEntry<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         closeConnectionExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token function">quietlyCloseConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> closureReason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>poolState <span class="token operator">==</span> POOL_NORMAL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">fillPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从ConnectionBag移除，使用closeConnectionExecutor关闭链接，并补充数量。<br>所以getConnection里使用了do while来borrow获取一个链接。<br><code>return poolEntry.createProxyConnection(leakTaskFactory.schedule(poolEntry), now);</code><br>这块代码就是创建leakTask检测链接泄漏的同时，创建ProxyConnection返回。</p><h3 id="归还连接"><a href="#归还连接" class="headerlink" title="归还连接"></a>归还连接</h3><p><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112081615450.jpg"><br>由于之前获取的连接并不是真正JDBC的Connect驱动实现，而是代理实现，所以调用对应的close方法只是归还连接，而不是真正关闭物理连接，这样就实现了借用连接池的链接，在close的时候归还连接，以便后续使用。<br>我们通过打断点，也可以看到对应的对象都是代理过的对象。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211208154917.png"></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>由于需要对原生JDBC对象进行增强，所以HikariCP采用了代理技术，但是考虑性能问题，其没有使用JDK的动态代理，而是使用了字节码增强的伪动态代理，因为其字节码增强是在编译的时候增强的，使用了javassist来做字节码增强。<br>涉及到的类有，ProxyFactory，JavassistProxyFactory以及抽象类：ProxyCallableStatement，ProxyConnection，ProxyDatabaseMetaData，ProxyPreparedStatement，ProxyResultSet，ProxyStatement。<br>在JavassistProxyFactory里使用javassist字节码增强实现了HikariProxyConnection，HikariProxyPreparedStatement等具体类，其继承自上述抽象类，对于没有实现的方法，采用了代理调用方式自动生成方法实现。<br>既然ProxyConnection等抽象类都已经有具体代理实现方法了，为什么还要字节码增强来生成非抽象子类呢？何况你还是静态生成？<br>原因是因为，ProxyConnection等抽象类之所以设计成抽象类，就是因为不想实现自己不关心的接口，举个栗子，光Connection接口就几十个方法，需要代理的也就十几个方法，如果不以抽象类的方式，则需要全部实现这几十个方法，并且自己不关心的实现都只是简单调用驱动实现类的方法，可读性和维护性不高。如果是动态运行时字节码增强，无可厚非，但是编译期增强的话，根本原因，其实还是作者懒，宁愿字节码自动生成也不愿意代码实现，不过javassist本身也不支持动态运行时字节码替换。javassist类库本身很简单，封装了字节码的操作，很容易就上手，感兴趣的可以自己试试写个例子就会用了。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>我们来写个动态代理的例子，实现对sql的日志打印，实现动态代理的方法很多，我们今天使用bytekit来实现。bytekit是arthas的底层字节码增强类库，通过注解的方式，很方便进行字节码增强，不止用来实现代理，还可以用于APM，功能很强大。<br>我们对Hikari的ProxyStatement的executeQuery方法进行字节码增强，来实现控制台打印其参数SQL的功能。<br>ProxyStatement的executeQuery实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">ResultSet</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">&#123;</span>  connection<span class="token punctuation">.</span><span class="token function">markCommitStateDirty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyResultSet</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们首先引入bytekit的pom依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>bytekit-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.bytebuddy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>byte-buddy-agent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.benf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cfr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.151<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一个辅助类</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ProxyUtil <span class="token punctuation">&#123;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">enhanceClass</span><span class="token punctuation">(</span>            targetClass<span class="token operator">:</span> KClass<span class="token operator">&lt;</span>ProxyStatement<span class="token operator">></span><span class="token punctuation">,</span>            targetMethodName<span class="token operator">:</span> String<span class="token punctuation">,</span>            proxyClass<span class="token operator">:</span> KClass<span class="token operator">&lt;</span>SqlLogInterceptor<span class="token operator">></span>        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            AgentUtils<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> interceptorClassParser <span class="token operator">=</span> <span class="token function">DefaultInterceptorClassParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> parseList <span class="token operator">=</span> interceptorClassParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>proxyClass<span class="token punctuation">.</span>java<span class="token punctuation">)</span>            <span class="token keyword">val</span> loadClass <span class="token operator">=</span> AsmUtils<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span>java<span class="token punctuation">)</span>            loadClass<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token label symbol">@filter</span> it<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>targetMethodName<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">&#123;</span> methodNode <span class="token operator">-></span>                <span class="token keyword">val</span> methodProcessor <span class="token operator">=</span> <span class="token function">MethodProcessor</span><span class="token punctuation">(</span>loadClass<span class="token punctuation">,</span> methodNode<span class="token punctuation">)</span>                parseList<span class="token punctuation">.</span><span class="token function">onEach</span> <span class="token punctuation">&#123;</span> parse <span class="token operator">-></span>                    parse<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>methodProcessor<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">val</span> bytes <span class="token operator">=</span> AsmUtils<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>loadClass<span class="token punctuation">)</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"decompile:<span class="token interpolation"><span class="token delimiter variable">$&#123;</span>Decompiler<span class="token punctuation">.</span><span class="token function">decompile</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token delimiter variable">&#125;</span></span>"</span><span class="token punctuation">)</span>            AgentUtils<span class="token punctuation">.</span><span class="token function">reTransform</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span>java<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写实际增强代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlLogInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@AtEnter</span><span class="token punctuation">(</span>inline <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">atEnter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Binding.Args</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token annotation punctuation">@Binding.Field</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"isClosed"</span><span class="token punctuation">)</span> <span class="token keyword">boolean</span> isClosed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isClosed = "</span> <span class="token operator">+</span> isClosed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sql = "</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ProxyStatement有一个私有属性isClosed，我们都可以拿到并使用。inline代表混入到源字节码里。我们看看反编译后的样子。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">ResultSet</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> sql<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> bl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isClosed<span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objectArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>string<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isClosed = "</span> <span class="token operator">+</span> bl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sql = "</span> <span class="token operator">+</span> objectArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">markCommitStateDirty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyResultSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译后虽然不太正常，但是真实增强代码确实已经添加进去了，我们执行一下看看。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091150526.png"><br>确实打印了出来。</p><h3 id="Hikari为什么这么快"><a href="#Hikari为什么这么快" class="headerlink" title="Hikari为什么这么快"></a>Hikari为什么这么快</h3><p>因为Hikari代码比较精简，并且在细节上下了很大功夫，除了使用静态字节码增强来优化性能之前，其在并发性能上也下了功夫，具体就是对并发数据结构的创建和使用。</p><h4 id="ConnectionBag"><a href="#ConnectionBag" class="headerlink" title="ConnectionBag"></a>ConnectionBag</h4><p>ConnectionBag可以说是hikari的核心，所有连接的创建，获取，归还，释放等等都和其息息相关，先来看下类结构。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091846818.png"><br>最核心的几个方法是add,borrow,requite,remove。ConnectionBag内部使用了ThreadLocal和SynchronousQueue，CopyOnWriteArrayList以及waiters:AtomicInteger来保证并发安全以及快速获取连接。</p><h4 id="borrow"><a href="#borrow" class="headerlink" title="borrow"></a>borrow</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">borrow</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span>   <span class="token comment">// Try the thread-local list first</span>   <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> threadList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">final</span> <span class="token class-name">Object</span> entry <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>      <span class="token keyword">final</span> <span class="token class-name">T</span> bagEntry <span class="token operator">=</span> weakThreadLocals <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> entry<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bagEntry <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bagEntry<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>STATE_NOT_IN_USE<span class="token punctuation">,</span> STATE_IN_USE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> bagEntry<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// Otherwise, scan the shared list ... then poll the handoff queue</span>   <span class="token keyword">final</span> <span class="token keyword">int</span> waiting <span class="token operator">=</span> waiters<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> bagEntry <span class="token operator">:</span> sharedList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>bagEntry<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>STATE_NOT_IN_USE<span class="token punctuation">,</span> STATE_IN_USE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// If we may have stolen another waiter's connection, request another bag add.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>waiting <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               listener<span class="token punctuation">.</span><span class="token function">addBagItem</span><span class="token punctuation">(</span>waiting <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> bagEntry<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      listener<span class="token punctuation">.</span><span class="token function">addBagItem</span><span class="token punctuation">(</span>waiting<span class="token punctuation">)</span><span class="token punctuation">;</span>      timeout <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">final</span> <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">final</span> <span class="token class-name">T</span> bagEntry <span class="token operator">=</span> handoffQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>bagEntry <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> bagEntry<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>STATE_NOT_IN_USE<span class="token punctuation">,</span> STATE_IN_USE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> bagEntry<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         timeout <span class="token operator">-=</span> <span class="token function">elapsedNanos</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      waiters<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看下borrow方法，首先在ThreadLocal里获取可用连接，如果没有，则在sharedList里获取，sharedList是CopyOnWriteArrayList并发集合类，如果还没有，就触发添加连接的请求，然后阻塞到handoffQueue: SynchronousQueue上，直到超时。<br>ThreadLocal默认是一个简化过的List，FastList，其实现去掉了越界检查，只实现了自己用到的方法，并且remove(Object object)方法是倒序查找。</p><h4 id="requite"><a href="#requite" class="headerlink" title="requite"></a>requite</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requite</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">T</span> bagEntry<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  bagEntry<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>STATE_NOT_IN_USE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> waiters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>bagEntry<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> STATE_NOT_IN_USE <span class="token operator">||</span> handoffQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>bagEntry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">parkNanos</span><span class="token punctuation">(</span>MICROSECONDS<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> threadLocalList <span class="token operator">=</span> threadList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>threadLocalList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     threadLocalList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>weakThreadLocals <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>bagEntry<span class="token punctuation">)</span> <span class="token operator">:</span> bagEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>归还方法比较简单，如果有线程等待，则直接归还到handoffQueue上，快速转让，并寄存到threadLocal里，方便下次获取。</p><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">T</span> bagEntry<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ConcurrentBag has been closed, ignoring add()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"ConcurrentBag has been closed, ignoring add()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sharedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bagEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// spin until a thread takes it or none are waiting</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>waiters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> bagEntry<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> STATE_NOT_IN_USE <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>handoffQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>bagEntry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>add方法不对外暴露，在checkFailFast和fillPool被调用。</p><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">T</span> bagEntry<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bagEntry<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>STATE_IN_USE<span class="token punctuation">,</span> STATE_REMOVED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bagEntry<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>STATE_RESERVED<span class="token punctuation">,</span> STATE_REMOVED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>closed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Attempt to remove an object from the bag that was not borrowed or reserved: &#123;&#125;"</span><span class="token punctuation">,</span> bagEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">final</span> <span class="token keyword">boolean</span> removed <span class="token operator">=</span> sharedList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>bagEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>removed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>closed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Attempt to remove an object from the bag that does not exist: &#123;&#125;"</span><span class="token punctuation">,</span> bagEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  threadList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>bagEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> removed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外一个比较重要的类就是PoolEntry，封装了Connection以及Connection对应的Statement和对应的使用状态等，这里存储Statement也是使用的FastList。ConcurrentBag里存储的就是PoolEntry对象。</p><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>说实话，hikari的监控做的不是很好，比如说对数据库查询异常日志的记录，对慢查询SQL的记录等等都没有，这也恰恰是其之所以比较快的原因，做好数据库连接池的功能，不把乱七八糟的东西引进来，但是并不是其一点监控数据都没有，可以借助spring的actuator功能，监控一些连接池自身的数据。<br>只需要在pom里添加对应的依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动项目，通过<a href="http://localhost:8080/actuator/">http://localhost:8080/actuator/</a> 访问<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918834.png"><br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918768.png"><br>通过集成Prometheus以及Grafana则可以收集并图形化展示监控数据，这里就不做过多介绍了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>hikari虽然代码比较少，但是麻雀虽小五脏俱全，涉及到很多知识点</p><ol><li>单例模式</li><li>JMX</li><li>字节码增强，代理模式</li><li>并发数据结构</li><li>监控集成</li></ol><p>希望大家能从本文能收获一些东西，再见。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HikariCP </tag>
            
            <tag> 数据库连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程简介</title>
      <link href="/2021/11/24/han-shu-shi-bian-cheng-jian-jie/"/>
      <url>/2021/11/24/han-shu-shi-bian-cheng-jian-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="函数式编程是什么"><a href="#函数式编程是什么" class="headerlink" title="函数式编程是什么"></a>函数式编程是什么</h3><p>函数式编程是一种编程范式，大部分人已知的编程范式有C的命令式，Java的面向对象，我们不需要从学术的角度，来严格定义函数式编程，并且函数式和面向对象也不是非此即彼的关系，强大如Scala也是混合式范式语言，我们从实用角度来介绍和解读函数式编程。<br>函数式编程至少应该具有以下特性：</p><ul><li>函数是一等公民</li><li>支持匿名函数</li><li>闭包</li><li>柯里化</li><li>惰性求值</li><li>参数多态</li><li>代数数据类型</li><li>。。。</li></ul><p>函数式编程理所当然是以函数为主要编程对象，而面向对象则以对象为主要编程对象，但是你仔细想想，面向对象如果没有方法，而只是有一堆属性的类，哪还有什么功能价值呢？所以即便是面向对象也离不开方法，当然这里的方法除了不是一等公民以外，和函数式编程差别也很大，那差别在哪里了？</p><h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><p>纯函数，又称为没有副作用，或者引用透明，那什么样的方法是没有副作用的呢？</p><ul><li>方法的参数值不变，则返回值就不会改变，比如random函数就不是纯函数。</li><li>必须有返回值。</li><li>方法不会对外界变量造成改变，即便是打印日志，控制台输出，都不可以。</li><li>不能抛出异常，即便是抛出异常也不是纯函数。</li></ul><p>纯函数有什么好处呢？</p><ul><li>独立性，因为不会依赖外部变量，只依赖输入的参数，很方便进行单元测试。</li><li>确定性，相同的参数，总是返回相同的结果，不会出现诡异的bug。</li><li>安全性，不用担心它抛出异常，函数调用等价于表达式。</li><li>结合高阶函数，稳定的纯函数复合出来的函数依然具备以上特性。</li></ul><h3 id="手写纯函数"><a href="#手写纯函数" class="headerlink" title="手写纯函数"></a>手写纯函数</h3><p>我们下面使用Java来写一个纯函数，虽然Java它并不是函数式的语言，但是并不妨碍我们展示函数式编程，有些语言对函数式编程比较友好，比如Scala，但是函数式编程并不仅仅取决于语言，而是取决于你怎么写代码。<br>自从Java8开始支持lambda表达式开始，Java已经有点函数式的味道了。我们先从一个接口开始，因为Java里函数不是一等公民，所以我们只能从接口定义函数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">U</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们来做一下单元测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> add <span class="token operator">=</span> x <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> multi <span class="token operator">=</span> x <span class="token operator">-></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> add<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> multi<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>add和multi就是纯函数。这个apply的定义虽然看起来很基础简单，但是就像函数式的基石一样，非常有用。</p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>什么是高阶函数呢？别被高阶给吓到，其实就是可以接收函数作为参数，并且可以返回函数的函数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">U</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> v <span class="token operator">-></span> <span class="token function">apply</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看单元测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> add <span class="token operator">=</span> x <span class="token operator">-></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> multi <span class="token operator">=</span> x <span class="token operator">-></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> add<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> multi<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCompose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> compose <span class="token operator">=</span> add<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>multi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> result <span class="token operator">=</span> compose<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>add组合函数multi生成了新的函数compose，调用该函数得到返回值，其实就是执行了1+1*2 = 3<br>对函数式编程有点感觉了吗？这才只是开胃菜，让我们继续烧脑。</p><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>函数是可以有多个参数的，以2个参数的举例，f(x,y) = x+y*2 有时候我们并不想一次性把2个参数都确定，而只是固定一个参数，以固定的这个参数为函数，再应用另外一个参数，比如我们先固定x=1,然后再应用这个得到的函数y=2，y=3，就可以得到一个对参数加倍再固定+1的函数。<br>但是，我们之前定义的apply方法只有一个参数怎么办？其实把函数看成只有一个参数，引入Tuple类型，先看下Tuple的定义</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tuple</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">T</span> _1<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">U</span> _2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Tuple</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">U</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_1 <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_2 <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很简单，就是参数的盒子而已，这样我们就可以使用之前定义的函数来传入2个参数了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">></span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">&lt;</span><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">></span></span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> a <span class="token operator">-></span> b <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>单元测试如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> addWithTuple <span class="token operator">=</span> t <span class="token operator">-></span> t<span class="token punctuation">.</span>_1 <span class="token operator">+</span> t<span class="token punctuation">.</span>_2 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCurry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> result <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token function">curry</span><span class="token punctuation">(</span>addWithTuple<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="惰性求值"><a href="#惰性求值" class="headerlink" title="惰性求值"></a>惰性求值</h3><p>惰性求值是指只有在真正获取的时候，才去执行函数，举个栗子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">recursion</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上面的代码，就会得到java.lang.StackOverflowError，我们明明不需要b的结果，但是由于Java表达式并不支持惰性，所以导致递归函数一直执行到爆栈。<br>我们来改造一下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">recursion</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好吧，我承认我作弊，改变了参数类型，但是这个例子只是让你感觉一下，什么是惰性求值。</p><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><p>函数式最有用的一个功能，我觉得就是模式匹配，因为可以很好的消除if else，命令式往往充斥着if else，而这些往往是令人难以理解和产生bug的地方，因此难于维护，而函数式编程里，只有表达式没有语句，if else往往纠结在细节里，而函数式编程通过代数数据类型，以及解构对象来对表达式进行匹配，可以很优雅的解决if else的问题。下面我们来演示一下如何消除if else，这次因为Java表达能力不够简洁，我们使用kotlin来做演示</p><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ul><li>计算个人所得税</li><li>如果一个人有房子则减免100再计税</li><li>如果一个人有孩子则减免200再计税</li><li>减免后大于等于1000则缴税减免后金额的3%</li><li>减免后大于等于3000则缴税减免后金额的5%</li><li>求应交税多少，不考虑精度丢失等情况</li></ul><p>过程式函数实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 计算个人所得税 * 如果一个人有房子则减免100再计税 * 如果一个人有孩子则减免200再计税 * 减免后大于等于1000则缴税减免后金额的3% * 减免后大于等于3000则缴税减免后金额的5% * 求应交税多少，不考虑精度丢失等情况 */</span> <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">tax</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> hasHouse<span class="token punctuation">,</span> <span class="token keyword">boolean</span> hasChild<span class="token punctuation">,</span> <span class="token keyword">double</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> firstLevel <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> firstLevelReduce <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> secondLevel <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> secondLevelReduce <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> tax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> after <span class="token operator">=</span> money<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasHouse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hasChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                after <span class="token operator">=</span> money <span class="token operator">-</span> secondLevelReduce <span class="token operator">-</span> firstLevelReduce<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                after <span class="token operator">=</span> money <span class="token operator">-</span> firstLevelReduce<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hasChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                after <span class="token operator">=</span> money <span class="token operator">-</span> secondLevelReduce<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>after <span class="token operator">>=</span> firstLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tax <span class="token operator">=</span> after <span class="token operator">*</span> <span class="token number">0.03</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>after <span class="token operator">>=</span> secondLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tax <span class="token operator">=</span> after <span class="token operator">*</span> <span class="token number">0.05</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> tax<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过程式避免不了if else的嵌套，即便重构基于设计模式的优化，比如策略或者责任链，杀鸡用牛刀不说，扩展性好了，但是可读性差了。<br>看一下使用kotlin的版本</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 计算个人所得税 * 如果一个人有房子则减免100再计税 * 如果一个人有孩子则减免200再计税 * 减免后大于等于1000则缴税减免后金额的3% * 减免后大于等于3000则缴税减免后金额的5% * 求应交税多少，不考虑精度丢失等情况 */</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> hasHouse<span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token keyword">val</span> hasChild<span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token keyword">val</span> money<span class="token operator">:</span> Double<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> actualReduce<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token function">Pair</span><span class="token punctuation">(</span>hasHouse<span class="token punctuation">,</span> hasChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">-></span> HAS_HOUSE_REDUCE <span class="token operator">+</span> HAS_CHILD_REDUCE        <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">-></span> HAS_HOUSE_REDUCE        <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">-></span> HAS_CHILD_REDUCE        <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token number">0.0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> FIRST_LEVEL <span class="token operator">=</span> <span class="token number">1000.0</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> FIRST_LEVEL_RATE <span class="token operator">=</span> <span class="token number">0.03</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> SECOND_LEVEL <span class="token operator">=</span> <span class="token number">3000.0</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> SECOND_LEVEL_RATE <span class="token operator">=</span> <span class="token number">0.05</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> HAS_HOUSE_REDUCE <span class="token operator">=</span> <span class="token number">100.0</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> HAS_CHILD_REDUCE <span class="token operator">=</span> <span class="token number">200.0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">tax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token keyword">val</span> after <span class="token operator">=</span> money <span class="token operator">-</span> actualReduce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">in</span> FIRST_LEVEL<span class="token operator">..</span>SECOND_LEVEL <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                after <span class="token operator">*</span> FIRST_LEVEL_RATE            <span class="token punctuation">&#125;</span>            <span class="token keyword">in</span> SECOND_LEVEL<span class="token operator">..</span>Double<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                after <span class="token operator">*</span> SECOND_LEVEL_RATE            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token number">0.0</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然有点不公平，因为使用了类，但是其实逻辑都差不多，关键还是使用了when模式匹配，以及after的表达式匹配<br>虽然你说when case不就是switch么，其实不是，因为模式匹配可以匹配类型，表达式等等，而switch只能是值（整数或字符串）。<br>最关键的是可读性提高了，不需要注释说明，即可知道代码所表达的逻辑，接近自然语言。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>当然函数式还有很多没有介绍的，比如Typeclass，函数式的集合，集合的折叠fold,map,flatMap等等，以及函数式范畴学的Monad<br>但是咱只是简介嘛，所以以后有机会再深入介绍吧。</p>]]></content>
      
      
      <categories>
          
          <category> 函数式编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echarts5图表渲染过程分析</title>
      <link href="/2021/11/10/echarts5-tu-biao-xuan-ran-guo-cheng-fen-xi/"/>
      <url>/2021/11/10/echarts5-tu-biao-xuan-ran-guo-cheng-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="Echarts快速入门"><a href="#Echarts快速入门" class="headerlink" title="Echarts快速入门"></a>Echarts快速入门</h3><p>Echarts就不做过多介绍了，相信大家都听说或者使用过，现在以官方给的第一个快速入门为基础，分析一下渲染过程。示例代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"main"</span> style<span class="token operator">=</span><span class="token string">"width: 600px;height:400px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment">// 基于准备好的dom，初始化echarts实例</span>    <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指定图表的配置项和数据</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        text<span class="token operator">:</span> <span class="token string">'ECharts 入门示例'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      tooltip<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      legend<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'销量'</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'衬衫'</span><span class="token punctuation">,</span> <span class="token string">'羊毛衫'</span><span class="token punctuation">,</span> <span class="token string">'雪纺衫'</span><span class="token punctuation">,</span> <span class="token string">'裤子'</span><span class="token punctuation">,</span> <span class="token string">'高跟鞋'</span><span class="token punctuation">,</span> <span class="token string">'袜子'</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      series<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          name<span class="token operator">:</span> <span class="token string">'销量'</span><span class="token punctuation">,</span>          type<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>          data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 使用刚指定的配置项和数据显示图表。</span>    myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染出来的效果就是这样的<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211112181806.png"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>echarts是依赖zrender来绘制的，上述代码可以看到调用了echarts的2个方法，<strong>init</strong>和<strong>setOption</strong>,5.x版本的echarts是使用typescript写的。<br>先看下init方法的定义,在src/echarts.ts里,为了更简洁清晰，后续代码我删掉了非主干流程渲染的部分内容。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./core/echarts'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">init</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>真正的init方法其实是./core/echarts里的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span>    <span class="token parameter">dom<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span>    theme<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> object<span class="token punctuation">,</span>    opts<span class="token operator">?</span><span class="token operator">:</span> EChartsInitOpts</span><span class="token punctuation">)</span><span class="token operator">:</span> EChartsType <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> existInstance <span class="token operator">=</span> <span class="token function">getInstanceByDom</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>existInstance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> existInstance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ECharts</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> theme<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'ec_'</span> <span class="token operator">+</span> idBase<span class="token operator">++</span><span class="token punctuation">;</span>    instances<span class="token punctuation">[</span>chart<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> chart<span class="token punctuation">;</span>    modelUtil<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> <span class="token constant">DOM_ATTRIBUTE_KEY</span><span class="token punctuation">,</span> chart<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">enableConnect</span><span class="token punctuation">(</span>chart<span class="token punctuation">)</span><span class="token punctuation">;</span>    lifecycle<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'afterinit'</span><span class="token punctuation">,</span> chart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> chart<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码实例化了ECharts对象，构造函数代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ECharts</span> <span class="token keyword">extends</span> <span class="token class-name">Eventful</span><span class="token operator">&lt;</span>ECEventDefinition<span class="token operator">></span> <span class="token punctuation">&#123;</span> <span class="token function">constructor</span><span class="token punctuation">(</span>        dom<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span>        <span class="token comment">// Theme name or themeOption.</span>        theme<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> ThemeOption<span class="token punctuation">,</span>        opts<span class="token operator">?</span><span class="token operator">:</span> EChartsInitOpts    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ECEventProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opts <span class="token operator">=</span> opts <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// Get theme by name</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> theme <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            theme <span class="token operator">=</span> themeStorage<span class="token punctuation">[</span>theme<span class="token punctuation">]</span> <span class="token keyword">as</span> object<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_dom <span class="token operator">=</span> dom<span class="token punctuation">;</span>        <span class="token keyword">let</span> defaultRenderer <span class="token operator">=</span> <span class="token string">'canvas'</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> defaultUseDirtyRect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> zr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_zr <span class="token operator">=</span> zrender<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            renderer<span class="token operator">:</span> opts<span class="token punctuation">.</span>renderer <span class="token operator">||</span> defaultRenderer<span class="token punctuation">,</span>            devicePixelRatio<span class="token operator">:</span> opts<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">,</span>            width<span class="token operator">:</span> opts<span class="token punctuation">.</span>width<span class="token punctuation">,</span>            height<span class="token operator">:</span> opts<span class="token punctuation">.</span>height<span class="token punctuation">,</span>            useDirtyRect<span class="token operator">:</span> opts<span class="token punctuation">.</span>useDirtyRect <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> defaultUseDirtyRect <span class="token operator">:</span> opts<span class="token punctuation">.</span>useDirtyRect        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Expect 60 fps.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_throttledZrFlush <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>zr<span class="token punctuation">.</span>flush<span class="token punctuation">,</span> zr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        theme <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span>        theme <span class="token operator">&amp;&amp;</span> <span class="token function">backwardCompat</span><span class="token punctuation">(</span>theme <span class="token keyword">as</span> ECUnitOption<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_theme <span class="token operator">=</span> theme<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_locale <span class="token operator">=</span> <span class="token function">createLocaleObject</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>locale <span class="token operator">||</span> <span class="token constant">SYSTEM_LANG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_coordSysMgr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoordinateSystemManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_api <span class="token operator">=</span> <span class="token function">createExtensionAPI</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Sort on demand</span>        <span class="token keyword">function</span> <span class="token function">prioritySortFunc</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span> StageHandlerInternal<span class="token punctuation">,</span> b<span class="token operator">:</span> StageHandlerInternal</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a<span class="token punctuation">.</span>__prio <span class="token operator">-</span> b<span class="token punctuation">.</span>__prio<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">timsort</span><span class="token punctuation">(</span>visualFuncs<span class="token punctuation">,</span> prioritySortFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">timsort</span><span class="token punctuation">(</span>dataProcessorFuncs<span class="token punctuation">,</span> prioritySortFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scheduler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> api<span class="token punctuation">,</span> dataProcessorFuncs<span class="token punctuation">,</span> visualFuncs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_messageCenter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Init mouse events</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_initEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// In case some people write `window.onresize = chart.resize`</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resize <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zr<span class="token punctuation">.</span>animation<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'frame'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onframe<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindRenderedEvent</span><span class="token punctuation">(</span>zr<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bindMouseEvent</span><span class="token punctuation">(</span>zr<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ECharts instance can be used as value.</span>        <span class="token function">setAsPrimitive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容比较多，重点代码是初始化了zrender</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> zr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_zr <span class="token operator">=</span> zrender<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            renderer<span class="token operator">:</span> opts<span class="token punctuation">.</span>renderer <span class="token operator">||</span> defaultRenderer<span class="token punctuation">,</span>            devicePixelRatio<span class="token operator">:</span> opts<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">,</span>            width<span class="token operator">:</span> opts<span class="token punctuation">.</span>width<span class="token punctuation">,</span>            height<span class="token operator">:</span> opts<span class="token punctuation">.</span>height<span class="token punctuation">,</span>            useDirtyRect<span class="token operator">:</span> opts<span class="token punctuation">.</span>useDirtyRect <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> defaultUseDirtyRect <span class="token operator">:</span> opts<span class="token punctuation">.</span>useDirtyRect <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化了<code>this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);</code>,后续series渲染的时候会用到。<br>同时注册了渲染回调<code>zr.animation.on(&#39;frame&#39;, this._onframe, this);</code></p><p>在分析setOption方法之前，有必要先说一下echarts的组件设计思想，我们示例里看到的绘制出来的图形，其实是很多组件构成的，echarts主要分成2类，一类是ComponentView，一类是ChartView。分别在src/chart下面和src/component下面。<br>先看下父类ComponentView(src/view/Component.ts)定义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ComponentView</span> <span class="token punctuation">&#123;</span>    readonly group<span class="token operator">:</span> ViewRootGroup<span class="token punctuation">;</span>    readonly uid<span class="token operator">:</span> string<span class="token punctuation">;</span>    __model<span class="token operator">:</span> ComponentModel<span class="token punctuation">;</span>    __alive<span class="token operator">:</span> boolean<span class="token punctuation">;</span>    __id<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uid <span class="token operator">=</span> componentUtil<span class="token punctuation">.</span><span class="token function">getUID</span><span class="token punctuation">(</span><span class="token string">'viewComponent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">init</span><span class="token punctuation">(</span>ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span>model<span class="token operator">:</span> ComponentModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">dispose</span><span class="token punctuation">(</span>ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">updateView</span><span class="token punctuation">(</span>model<span class="token operator">:</span> ComponentModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Do nothing;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">updateLayout</span><span class="token punctuation">(</span>model<span class="token operator">:</span> ComponentModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Do nothing;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">updateVisual</span><span class="token punctuation">(</span>model<span class="token operator">:</span> ComponentModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Do nothing;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Hook for blur target series.     * Can be used in marker for blur the markers     */</span>    <span class="token function">blurSeries</span><span class="token punctuation">(</span>seriesModels<span class="token operator">:</span> SeriesModel<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// Do nothing;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> registerClass<span class="token operator">:</span> clazzUtil<span class="token punctuation">.</span>ClassManager<span class="token punctuation">[</span><span class="token string">'registerClass'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最主要的2个方法init和render是由各个组件子类来实现的。<br>ChartView(src/view/Chart.ts)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ChartView</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> string<span class="token punctuation">;</span>    readonly group<span class="token operator">:</span> ViewRootGroup<span class="token punctuation">;</span>    readonly uid<span class="token operator">:</span> string<span class="token punctuation">;</span>    readonly renderTask<span class="token operator">:</span> SeriesTask<span class="token punctuation">;</span>    ignoreLabelLineUpdate<span class="token operator">:</span> boolean<span class="token punctuation">;</span>    __alive<span class="token operator">:</span> boolean<span class="token punctuation">;</span>    __model<span class="token operator">:</span> SeriesModel<span class="token punctuation">;</span>    __id<span class="token operator">:</span> string<span class="token punctuation">;</span>    <span class="token keyword">static</span> protoInitialize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token class-name">ChartView</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        proto<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'chart'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uid <span class="token operator">=</span> componentUtil<span class="token punctuation">.</span><span class="token function">getUID</span><span class="token punctuation">(</span><span class="token string">'viewChart'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>renderTask <span class="token operator">=</span> createTask<span class="token operator">&lt;</span>SeriesTaskContext<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            plan<span class="token operator">:</span> renderTaskPlan<span class="token punctuation">,</span>            reset<span class="token operator">:</span> renderTaskReset        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>renderTask<span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>view<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span> <span class="token keyword">as</span> SeriesTaskContext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">init</span><span class="token punctuation">(</span>ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span>seriesModel<span class="token operator">:</span> SeriesModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">highlight</span><span class="token punctuation">(</span>seriesModel<span class="token operator">:</span> SeriesModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token function">toggleHighlight</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> <span class="token string">'emphasis'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">downplay</span><span class="token punctuation">(</span>seriesModel<span class="token operator">:</span> SeriesModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token function">toggleHighlight</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">remove</span><span class="token punctuation">(</span>ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dispose</span><span class="token punctuation">(</span>ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">updateView</span><span class="token punctuation">(</span>seriesModel<span class="token operator">:</span> SeriesModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// FIXME never used?</span>    <span class="token function">updateLayout</span><span class="token punctuation">(</span>seriesModel<span class="token operator">:</span> SeriesModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// FIXME never used?</span>    <span class="token function">updateVisual</span><span class="token punctuation">(</span>seriesModel<span class="token operator">:</span> SeriesModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token function">markUpdateMethod</span><span class="token punctuation">(</span>payload<span class="token operator">:</span> Payload<span class="token punctuation">,</span> methodName<span class="token operator">:</span> keyof ChartView<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token function">inner</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>updateMethod <span class="token operator">=</span> methodName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> registerClass<span class="token operator">:</span> clazzUtil<span class="token punctuation">.</span>ClassManager<span class="token punctuation">[</span><span class="token string">'registerClass'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也是需要关注init和render方法，但是额外不一样的是构造函数里初始化了renderTask，这块在渲染数据的时候会用到。<br>下面再回到setOption方法，我们来看看setOption(src/core/echarts.ts)的实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">setOption<span class="token operator">&lt;</span>Opt <span class="token keyword">extends</span> <span class="token class-name">ECBasicOption</span><span class="token operator">></span><span class="token punctuation">(</span>option<span class="token operator">:</span> Opt<span class="token punctuation">,</span> notMerge<span class="token operator">?</span><span class="token operator">:</span> boolean <span class="token operator">|</span> SetOptionOpts<span class="token punctuation">,</span> lazyUpdate<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_disposed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">disposedWarning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> silent<span class="token punctuation">;</span>        <span class="token keyword">let</span> replaceMerge<span class="token punctuation">;</span>        <span class="token keyword">let</span> transitionOpt<span class="token operator">:</span> SetOptionTransitionOpt<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>notMerge<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lazyUpdate <span class="token operator">=</span> notMerge<span class="token punctuation">.</span>lazyUpdate<span class="token punctuation">;</span>            silent <span class="token operator">=</span> notMerge<span class="token punctuation">.</span>silent<span class="token punctuation">;</span>            replaceMerge <span class="token operator">=</span> notMerge<span class="token punctuation">.</span>replaceMerge<span class="token punctuation">;</span>            transitionOpt <span class="token operator">=</span> notMerge<span class="token punctuation">.</span>transition<span class="token punctuation">;</span>            notMerge <span class="token operator">=</span> notMerge<span class="token punctuation">.</span>notMerge<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">IN_MAIN_PROCESS_KEY</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_model <span class="token operator">||</span> notMerge<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> optionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_api<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_theme<span class="token punctuation">;</span>            <span class="token keyword">const</span> ecModel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ecModel<span class="token punctuation">.</span>scheduler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_scheduler<span class="token punctuation">;</span>            ecModel<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> theme<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_locale<span class="token punctuation">,</span> optionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_model<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option <span class="token keyword">as</span> ECBasicOption<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> replaceMerge <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> optionPreprocessorFuncs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> updateParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            seriesTransition<span class="token operator">:</span> transitionOpt<span class="token punctuation">,</span>            optionChanged<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">as</span> UpdateLifecycleParams<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyUpdate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PENDING_UPDATE</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                silent<span class="token operator">:</span> silent<span class="token punctuation">,</span>                updateParams<span class="token operator">:</span> updateParams            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">IN_MAIN_PROCESS_KEY</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// `setOption(option, &#123;lazyMode: true&#125;)` may be called when zrender has been slept.</span>            <span class="token comment">// It should wake it up to make sure zrender start to render at the next frame.</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getZr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wakeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            updateMethods<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> updateParams<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Ensure zr refresh sychronously, and then pixel in canvas can be</span>            <span class="token comment">// fetched after `setOption`.</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_zr<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PENDING_UPDATE</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">IN_MAIN_PROCESS_KEY</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token function">flushPendingActions</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">triggerUpdatedEvent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化model，<code>this._model.setOption(option as ECBasicOption, &#123; replaceMerge &#125;, optionPreprocessorFuncs);</code><br><code>prepare(this);</code>的方法实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">prepare</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ecIns<span class="token operator">:</span> ECharts</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> scheduler <span class="token operator">=</span> ecIns<span class="token punctuation">.</span>_scheduler<span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">restorePipelines</span><span class="token punctuation">(</span>ecIns<span class="token punctuation">.</span>_model<span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">prepareStageTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">prepareView</span><span class="token punctuation">(</span>ecIns<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">prepareView</span><span class="token punctuation">(</span>ecIns<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">restorePipelines</span><span class="token punctuation">(</span>ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> scheduler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> pipelineMap <span class="token operator">=</span> scheduler<span class="token punctuation">.</span>_pipelineMap <span class="token operator">=</span> <span class="token function">createHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ecModel<span class="token punctuation">.</span><span class="token function">eachSeries</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">seriesModel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> progressive <span class="token operator">=</span> seriesModel<span class="token punctuation">.</span><span class="token function">getProgressive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> pipelineId <span class="token operator">=</span> seriesModel<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>            pipelineMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pipelineId<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                id<span class="token operator">:</span> pipelineId<span class="token punctuation">,</span>                head<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                tail<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                threshold<span class="token operator">:</span> seriesModel<span class="token punctuation">.</span><span class="token function">getProgressiveThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                progressiveEnabled<span class="token operator">:</span> progressive                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">.</span>preventIncremental <span class="token operator">&amp;&amp;</span> seriesModel<span class="token punctuation">.</span><span class="token function">preventIncremental</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                blockIndex<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                step<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>progressive <span class="token operator">||</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                count<span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span><span class="token function">_pipe</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">,</span> seriesModel<span class="token punctuation">.</span>dataTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中seriesModel的内容:<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211113135714.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">private</span> <span class="token function">_pipe</span><span class="token punctuation">(</span><span class="token parameter">seriesModel<span class="token operator">:</span> SeriesModel<span class="token punctuation">,</span> task<span class="token operator">:</span> GeneralTask</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> pipelineId <span class="token operator">=</span> seriesModel<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>        <span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_pipelineMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pipelineId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">!</span>pipeline<span class="token punctuation">.</span>head <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span>head <span class="token operator">=</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span>tail <span class="token operator">&amp;&amp;</span> pipeline<span class="token punctuation">.</span>tail<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span>tail <span class="token operator">=</span> task<span class="token punctuation">;</span>        task<span class="token punctuation">.</span>__idxInPipeline <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        task<span class="token punctuation">.</span>__pipeline <span class="token operator">=</span> pipeline<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过_pipe方法就将task加到了pipeline里，等待后续执行task进行渲染。<br>prepareView(ecIns, true);<br>prepareView(ecIns, false);<br>分别执行ComponentView和ChartView的init方法，具体怎么找到对应的clazz呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doPrepare</span><span class="token punctuation">(</span><span class="token parameter">model<span class="token operator">:</span> ComponentModel</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> requireNewView <span class="token operator">=</span> model<span class="token punctuation">.</span>__requireNewView<span class="token punctuation">;</span>                model<span class="token punctuation">.</span>__requireNewView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> viewId <span class="token operator">=</span> <span class="token string">'_ec_'</span> <span class="token operator">+</span> model<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> model<span class="token punctuation">.</span>type<span class="token punctuation">;</span>                <span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token operator">!</span>requireNewView <span class="token operator">&amp;&amp;</span> viewMap<span class="token punctuation">[</span>viewId<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> classType <span class="token operator">=</span> <span class="token function">parseClassType</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> Clazz <span class="token operator">=</span> isComponent                        <span class="token operator">?</span> <span class="token punctuation">(</span>ComponentView <span class="token keyword">as</span> ComponentViewConstructor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>classType<span class="token punctuation">.</span>main<span class="token punctuation">,</span> classType<span class="token punctuation">.</span>sub<span class="token punctuation">)</span>                        <span class="token operator">:</span> <span class="token punctuation">(</span>                                     <span class="token punctuation">(</span>ChartView <span class="token keyword">as</span> ChartViewConstructor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>classType<span class="token punctuation">.</span>sub<span class="token punctuation">)</span>                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">assert</span><span class="token punctuation">(</span>Clazz<span class="token punctuation">,</span> classType<span class="token punctuation">.</span>sub <span class="token operator">+</span> <span class="token string">' does not exist.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    view<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>                    viewMap<span class="token punctuation">[</span>viewId<span class="token punctuation">]</span> <span class="token operator">=</span> view<span class="token punctuation">;</span>                    viewList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>view <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>                    zr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                model<span class="token punctuation">.</span>__viewId <span class="token operator">=</span> view<span class="token punctuation">.</span>__id <span class="token operator">=</span> viewId<span class="token punctuation">;</span>                view<span class="token punctuation">.</span>__alive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                view<span class="token punctuation">.</span>__model <span class="token operator">=</span> model<span class="token punctuation">;</span>                view<span class="token punctuation">.</span>group<span class="token punctuation">.</span>__ecComponentInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                    mainType<span class="token operator">:</span> model<span class="token punctuation">.</span>mainType<span class="token punctuation">,</span>                    index<span class="token operator">:</span> model<span class="token punctuation">.</span>componentIndex                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token operator">!</span>isComponent <span class="token operator">&amp;&amp;</span> scheduler<span class="token punctuation">.</span><span class="token function">prepareView</span><span class="token punctuation">(</span>                    view <span class="token keyword">as</span> ChartView<span class="token punctuation">,</span> model <span class="token keyword">as</span> SeriesModel<span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api                <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span>ComponentView <span class="token keyword">as</span> ComponentViewConstructor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>classType<span class="token punctuation">.</span>main<span class="token punctuation">,</span> classType<span class="token punctuation">.</span>sub<span class="token punctuation">)</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> clazzUtil <span class="token keyword">from</span> <span class="token string">'../util/clazz'</span><span class="token punctuation">;</span><span class="token keyword">export</span> type ComponentViewConstructor <span class="token operator">=</span> <span class="token keyword">typeof</span> ComponentView    <span class="token operator">&amp;</span> clazzUtil<span class="token punctuation">.</span>ExtendableConstructor    <span class="token operator">&amp;</span> clazzUtil<span class="token punctuation">.</span>ClassManager<span class="token punctuation">;</span>clazzUtil<span class="token punctuation">.</span><span class="token function">enableClassExtend</span><span class="token punctuation">(</span>ComponentView <span class="token keyword">as</span> ComponentViewConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>clazzUtil<span class="token punctuation">.</span><span class="token function">enableClassManagement</span><span class="token punctuation">(</span>ComponentView <span class="token keyword">as</span> ComponentViewConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>target<span class="token punctuation">.</span><span class="token function-variable function">getClass</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>        <span class="token parameter">mainType<span class="token operator">:</span> ComponentMainType<span class="token punctuation">,</span>        subType<span class="token operator">?</span><span class="token operator">:</span> ComponentSubType<span class="token punctuation">,</span>        throwWhenNotFound<span class="token operator">?</span><span class="token operator">:</span> boolean</span>    <span class="token punctuation">)</span><span class="token operator">:</span> Constructor <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> clz <span class="token operator">=</span> storage<span class="token punctuation">[</span>mainType<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clz <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>clz <span class="token keyword">as</span> SubclassContainer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">IS_CONTAINER</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            clz <span class="token operator">=</span> subType <span class="token operator">?</span> <span class="token punctuation">(</span>clz <span class="token keyword">as</span> SubclassContainer<span class="token punctuation">)</span><span class="token punctuation">[</span>subType<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>throwWhenNotFound <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>clz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>                <span class="token operator">!</span>subType                    <span class="token operator">?</span> mainType <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token string">'type should be specified.'</span>                    <span class="token operator">:</span> <span class="token string">'Component '</span> <span class="token operator">+</span> mainType <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>subType <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' is used but not imported.'</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> clz <span class="token keyword">as</span> Constructor<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  target<span class="token punctuation">.</span><span class="token function-variable function">registerClass</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>        <span class="token parameter">clz<span class="token operator">:</span> Constructor</span>    <span class="token punctuation">)</span><span class="token operator">:</span> Constructor <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> componentFullType <span class="token operator">=</span> <span class="token punctuation">(</span>clz <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>type <span class="token operator">||</span> clz<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>type<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>componentFullType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkClassType</span><span class="token punctuation">(</span>componentFullType<span class="token punctuation">)</span><span class="token punctuation">;</span>            clz<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>type <span class="token operator">=</span> componentFullType<span class="token punctuation">;</span>            <span class="token keyword">const</span> componentTypeInfo <span class="token operator">=</span> <span class="token function">parseClassType</span><span class="token punctuation">(</span>componentFullType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>componentTypeInfo<span class="token punctuation">.</span>sub<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    storage<span class="token punctuation">[</span>componentTypeInfo<span class="token punctuation">.</span>main<span class="token punctuation">]</span> <span class="token operator">=</span> clz<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>componentTypeInfo<span class="token punctuation">.</span>sub <span class="token operator">!==</span> <span class="token constant">IS_CONTAINER</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token function">makeContainer</span><span class="token punctuation">(</span>componentTypeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                container<span class="token punctuation">[</span>componentTypeInfo<span class="token punctuation">.</span>sub<span class="token punctuation">]</span> <span class="token operator">=</span> clz<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> clz<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//以TitleView为例</span>  <span class="token keyword">class</span> <span class="token class-name">TitleView</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentView</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> type <span class="token operator">=</span> <span class="token string">'title'</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    type <span class="token operator">=</span> TitleView<span class="token punctuation">.</span>type<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">prepareView</span><span class="token punctuation">(</span>view<span class="token operator">:</span> ChartView<span class="token punctuation">,</span> model<span class="token operator">:</span> SeriesModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> renderTask <span class="token operator">=</span> view<span class="token punctuation">.</span>renderTask<span class="token punctuation">;</span>        <span class="token keyword">const</span> context <span class="token operator">=</span> renderTask<span class="token punctuation">.</span>context<span class="token punctuation">;</span>        context<span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>        context<span class="token punctuation">.</span>ecModel <span class="token operator">=</span> ecModel<span class="token punctuation">;</span>        context<span class="token punctuation">.</span>api <span class="token operator">=</span> api<span class="token punctuation">;</span>        renderTask<span class="token punctuation">.</span>__block <span class="token operator">=</span> <span class="token operator">!</span>view<span class="token punctuation">.</span>incrementalPrepareRender<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_pipe</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> renderTask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而BarView不同的地方在，将renderTask加入了pipeline。<br>setOption里的<code>prepare(this);</code>执行完了，总结一下就是初始化Model，初始化对应的ComponentView和ChartView并将series对应的task加入pipeline，再来看下<code>updateMethods.update.call(this, null, updateParams);</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">updateMethods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> ECharts<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">,</span> updateParams<span class="token operator">:</span> UpdateLifecycleParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> ecModel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_model<span class="token punctuation">;</span>                <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_api<span class="token punctuation">;</span>                <span class="token keyword">const</span> zr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_zr<span class="token punctuation">;</span>                <span class="token keyword">const</span> coordSysMgr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_coordSysMgr<span class="token punctuation">;</span>                <span class="token keyword">const</span> scheduler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_scheduler<span class="token punctuation">;</span>                <span class="token comment">// update before setOption</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ecModel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                ecModel<span class="token punctuation">.</span><span class="token function">setUpdatePayload</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>                scheduler<span class="token punctuation">.</span><span class="token function">restoreData</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>                scheduler<span class="token punctuation">.</span><span class="token function">performSeriesTasks</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">)</span><span class="token punctuation">;</span>                coordSysMgr<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>                scheduler<span class="token punctuation">.</span><span class="token function">performDataProcessorTasks</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">updateStreamModes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ecModel<span class="token punctuation">)</span><span class="token punctuation">;</span>                coordSysMgr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">clearColorPalette</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">)</span><span class="token punctuation">;</span>                scheduler<span class="token punctuation">.</span><span class="token function">performVisualTasks</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> updateParams<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Set background</span>                <span class="token keyword">let</span> backgroundColor <span class="token operator">=</span> ecModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'backgroundColor'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'transparent'</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> darkMode <span class="token operator">=</span> ecModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'darkMode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// In IE8</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>env<span class="token punctuation">.</span>canvasSupported<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> colorArr <span class="token operator">=</span> colorTool<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>backgroundColor <span class="token keyword">as</span> ColorString<span class="token punctuation">)</span><span class="token punctuation">;</span>                    backgroundColor <span class="token operator">=</span> colorTool<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>colorArr<span class="token punctuation">,</span> <span class="token string">'rgb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>colorArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        backgroundColor <span class="token operator">=</span> <span class="token string">'transparent'</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    zr<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Force set dark mode.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>darkMode <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> darkMode <span class="token operator">!==</span> <span class="token string">'auto'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        zr<span class="token punctuation">.</span><span class="token function">setDarkMode</span><span class="token punctuation">(</span>darkMode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                lifecycle<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'afterupdate'</span><span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最主要的是<code>render(this, ecModel, api, payload, updateParams);</code>方法，</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token punctuation">(</span>            <span class="token parameter">ecIns<span class="token operator">:</span> ECharts<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">,</span>            updateParams<span class="token operator">:</span> UpdateLifecycleParams</span>        <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">renderComponents</span><span class="token punctuation">(</span>ecIns<span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> updateParams<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">each</span><span class="token punctuation">(</span>ecIns<span class="token punctuation">.</span>_chartsViews<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">chart<span class="token operator">:</span> ChartView</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                chart<span class="token punctuation">.</span>__alive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">renderSeries</span><span class="token punctuation">(</span>ecIns<span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> updateParams<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Remove groups of unrendered charts</span>            <span class="token function">each</span><span class="token punctuation">(</span>ecIns<span class="token punctuation">.</span>_chartsViews<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">chart<span class="token operator">:</span> ChartView</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chart<span class="token punctuation">.</span>__alive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    chart<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来看下<code>renderComponents(ecIns, ecModel, api, payload, updateParams);</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">renderComponents</span> <span class="token operator">=</span> <span class="token punctuation">(</span>            <span class="token parameter">ecIns<span class="token operator">:</span> ECharts<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload<span class="token punctuation">,</span>            updateParams<span class="token operator">:</span> UpdateLifecycleParams<span class="token punctuation">,</span> dirtyList<span class="token operator">?</span><span class="token operator">:</span> ComponentView<span class="token punctuation">[</span><span class="token punctuation">]</span></span>        <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">each</span><span class="token punctuation">(</span>dirtyList <span class="token operator">||</span> ecIns<span class="token punctuation">.</span>_componentsViews<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">componentView<span class="token operator">:</span> ComponentView</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> componentModel <span class="token operator">=</span> componentView<span class="token punctuation">.</span>__model<span class="token punctuation">;</span>                <span class="token function">clearStates</span><span class="token punctuation">(</span>componentModel<span class="token punctuation">,</span> componentView<span class="token punctuation">)</span><span class="token punctuation">;</span>                componentView<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>componentModel<span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">updateZ</span><span class="token punctuation">(</span>componentModel<span class="token punctuation">,</span> componentView<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">updateStates</span><span class="token punctuation">(</span>componentModel<span class="token punctuation">,</span> componentView<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ecIns就是echarts实例，那针对这个示例都有哪些_componentsViews呢，<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114010528.png"><br>拿其中一个TitleView来细看一下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">titleModel<span class="token operator">:</span> TitleModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">;</span>               <span class="token keyword">const</span> textEl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">graphic<span class="token punctuation">.</span>Text</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            style<span class="token operator">:</span> <span class="token function">createTextStyle</span><span class="token punctuation">(</span>textStyleModel<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                text<span class="token operator">:</span> titleModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                fill<span class="token operator">:</span> textStyleModel<span class="token punctuation">.</span><span class="token function">getTextColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>disableBox<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            z2<span class="token operator">:</span> <span class="token number">10</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textEl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>render方法实在太长了，我删掉了样式，子标题，背景，标题框等相关代码，只留下Text渲染相关的了。<br>可以看到，真正的渲染是调用了zrender的graphic.Text，并添加到了group里。<br>再来看renderSeries</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">renderSeries <span class="token operator">=</span> <span class="token punctuation">(</span>            ecIns<span class="token operator">:</span> ECharts<span class="token punctuation">,</span>            ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span>            api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span>            payload<span class="token operator">:</span> Payload <span class="token operator">|</span> <span class="token string">'remain'</span><span class="token punctuation">,</span>            updateParams<span class="token operator">:</span> UpdateLifecycleParams<span class="token punctuation">,</span>            dirtyMap<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>uid<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Render all charts</span>            <span class="token keyword">const</span> scheduler <span class="token operator">=</span> ecIns<span class="token punctuation">.</span>_scheduler<span class="token punctuation">;</span>            updateParams <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span>updateParams <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                updatedSeries<span class="token operator">:</span> ecModel<span class="token punctuation">.</span><span class="token function">getSeries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> unfinished<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            ecModel<span class="token punctuation">.</span><span class="token function">eachSeries</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">seriesModel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> chartView <span class="token operator">=</span> ecIns<span class="token punctuation">.</span>_chartsMap<span class="token punctuation">[</span>seriesModel<span class="token punctuation">.</span>__viewId<span class="token punctuation">]</span><span class="token punctuation">;</span>                chartView<span class="token punctuation">.</span>__alive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> renderTask <span class="token operator">=</span> chartView<span class="token punctuation">.</span>renderTask<span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>renderTask<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">.</span><span class="token function">getPerformArgs</span><span class="token punctuation">(</span>renderTask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    unfinished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最重要的就是调用了renderTask.perform<br>Task(src/core/task.ts)的perform方法。方法比较长，我就不贴代码了，主干是调用了<code>                    this._doProgress(progress, start, end, modBy, modDataCount);</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> progressMethodMap<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span>method<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> TaskResetCallbackReturn<span class="token operator">&lt;</span>SeriesTaskContext<span class="token operator">></span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    incrementalPrepareRender<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">progress</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">:</span> StageHandlerProgressParams<span class="token punctuation">,</span> context<span class="token operator">:</span> SeriesTaskContext</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">incrementalRender</span><span class="token punctuation">(</span>                params<span class="token punctuation">,</span> context<span class="token punctuation">.</span>model<span class="token punctuation">,</span> context<span class="token punctuation">.</span>ecModel<span class="token punctuation">,</span> context<span class="token punctuation">.</span>api<span class="token punctuation">,</span> context<span class="token punctuation">.</span>payload            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    render<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Put view.render in `progress` to support appendData. But in this case</span>        <span class="token comment">// view.render should not be called in reset, otherwise it will be called</span>        <span class="token comment">// twise. Use `forceFirstProgress` to make sure that view.render is called</span>        <span class="token comment">// in any cases.</span>        forceFirstProgress<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function-variable function">progress</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">:</span> StageHandlerProgressParams<span class="token punctuation">,</span> context<span class="token operator">:</span> SeriesTaskContext</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>                context<span class="token punctuation">.</span>model<span class="token punctuation">,</span> context<span class="token punctuation">.</span>ecModel<span class="token punctuation">,</span> context<span class="token punctuation">.</span>api<span class="token punctuation">,</span> context<span class="token punctuation">.</span>payload            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>紧接着调用了progress方法，而progress方法里调用了view的render，以此示例的BarView举例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">seriesModel<span class="token operator">:</span> BarSeriesModel<span class="token punctuation">,</span> ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span> api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span> payload<span class="token operator">:</span> Payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_model <span class="token operator">=</span> seriesModel<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_removeOnRenderedListener</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_updateDrawMode</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> coordinateSystemType <span class="token operator">=</span> seriesModel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'coordinateSystem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>coordinateSystemType <span class="token operator">===</span> <span class="token string">'cartesian2d'</span>            <span class="token operator">||</span> coordinateSystemType <span class="token operator">===</span> <span class="token string">'polar'</span>        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_isLargeDraw                <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_renderLarge</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">)</span>                <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_renderNormal</span><span class="token punctuation">(</span>seriesModel<span class="token punctuation">,</span> ecModel<span class="token punctuation">,</span> api<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Only cartesian2d and polar supported for bar.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据是否是_isLargeDraw而分别调用不同的render，本示走的是_renderNormal方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">private</span> <span class="token function">_renderNormal</span><span class="token punctuation">(</span>        seriesModel<span class="token operator">:</span> BarSeriesModel<span class="token punctuation">,</span>        ecModel<span class="token operator">:</span> GlobalModel<span class="token punctuation">,</span>        api<span class="token operator">:</span> ExtensionAPI<span class="token punctuation">,</span>        payload<span class="token operator">:</span> Payload    <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> seriesModel<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> oldData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">diff</span><span class="token punctuation">(</span>oldData<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dataIndex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> itemModel <span class="token operator">=</span> data<span class="token punctuation">.</span>getItemModel<span class="token operator">&lt;</span>BarDataItemOption<span class="token operator">></span><span class="token punctuation">(</span>dataIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> layout <span class="token operator">=</span> getLayout<span class="token punctuation">[</span>coord<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> dataIndex<span class="token punctuation">,</span> itemModel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> el <span class="token operator">=</span> elementCreator<span class="token punctuation">[</span>coord<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>                    seriesModel<span class="token punctuation">,</span>                    data<span class="token punctuation">,</span>                    dataIndex<span class="token punctuation">,</span>                    layout<span class="token punctuation">,</span>                    isHorizontalOrRadial<span class="token punctuation">,</span>                    animationModel<span class="token punctuation">,</span>                    baseAxis<span class="token punctuation">.</span>model<span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">,</span>                    roundCap                <span class="token punctuation">)</span><span class="token punctuation">;</span>                group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> elementCreator<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token string">'polar'</span> <span class="token operator">|</span> <span class="token string">'cartesian2d'</span><span class="token punctuation">]</span><span class="token operator">:</span> ElementCreator<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">cartesian2d</span><span class="token punctuation">(</span>        <span class="token parameter">seriesModel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> newIndex<span class="token punctuation">,</span> layout<span class="token operator">:</span> RectLayout<span class="token punctuation">,</span> isHorizontal<span class="token punctuation">,</span>        animationModel<span class="token punctuation">,</span> axisModel<span class="token punctuation">,</span> isUpdate<span class="token punctuation">,</span> roundCap</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            shape<span class="token operator">:</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> layout<span class="token punctuation">)</span><span class="token punctuation">,</span>            z2<span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>rect <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>__dataIndex <span class="token operator">=</span> newIndex<span class="token punctuation">;</span>        rect<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'item'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>animationModel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> rectShape <span class="token operator">=</span> rect<span class="token punctuation">.</span>shape<span class="token punctuation">;</span>            <span class="token keyword">const</span> animateProperty <span class="token operator">=</span> isHorizontal <span class="token operator">?</span> <span class="token string">'height'</span> <span class="token operator">:</span> <span class="token string">'width'</span> <span class="token keyword">as</span> <span class="token string">'width'</span> <span class="token operator">|</span> <span class="token string">'height'</span><span class="token punctuation">;</span>            rectShape<span class="token punctuation">[</span>animateProperty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> rect<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法太长，我删掉了非主干代码，可以看到最终根据Model的data的diff来进行add,update,remove,最终还是调用了zrender的Rect来画出bar的样子。<br>最后贴一下渲染BarView的调用栈<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114021358.png"><br>渲染ComponentView比较直接，而渲染ChartView类型的就绕来绕去，主要原因是ChartView可能数据比较多，需要逐步分批渲染，以减少卡顿，保持每秒60帧的渲染，因为1000ms，每一帧不能超过16ms，才能保持流畅的渲染。<br>在setOption方法的最后调用了<code>this._zr.flush();</code>则直接将绘制渲染出来了，当然对于ChartView的绘制，可能还需要等到下一次渲染的时候才会显示出来。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">private</span> <span class="token function">_onframe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_disposed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">applyChangedStates</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> scheduler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_scheduler<span class="token punctuation">;</span>        <span class="token comment">// Lazy update</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PENDING_UPDATE</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> silent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PENDING_UPDATE</span><span class="token punctuation">]</span> <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>silent<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">IN_MAIN_PROCESS_KEY</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            updateMethods<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PENDING_UPDATE</span><span class="token punctuation">]</span><span class="token punctuation">.</span>updateParams<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// At present, in each frame, zrender performs:</span>            <span class="token comment">//   (1) animation step forward.</span>            <span class="token comment">//   (2) trigger('frame') (where this `_onframe` is called)</span>            <span class="token comment">//   (3) zrender flush (render).</span>            <span class="token comment">// If we do nothing here, since we use `setToFinal: true`, the step (3) above</span>            <span class="token comment">// will render the final state of the elements before the real animation started.</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_zr<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">IN_MAIN_PROCESS_KEY</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">PENDING_UPDATE</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">flushPendingActions</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">triggerUpdatedEvent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Avoid do both lazy update and progress in one frame.</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduler<span class="token punctuation">.</span>unfinished<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Stream progress.</span>            <span class="token keyword">let</span> remainTime <span class="token operator">=</span> <span class="token constant">TEST_FRAME_REMAIN_TIME</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> ecModel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_model<span class="token punctuation">;</span>            <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_api<span class="token punctuation">;</span>            scheduler<span class="token punctuation">.</span>unfinished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> startTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                scheduler<span class="token punctuation">.</span><span class="token function">performSeriesTasks</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Currently dataProcessorFuncs do not check threshold.</span>                scheduler<span class="token punctuation">.</span><span class="token function">performDataProcessorTasks</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">updateStreamModes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ecModel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Do not update coordinate system here. Because that coord system update in</span>                <span class="token comment">// each frame is not a good user experience. So we follow the rule that</span>                <span class="token comment">// the extent of the coordinate system is determin in the first frame (the</span>                <span class="token comment">// frame is executed immedietely after task reset.</span>                <span class="token comment">// this._coordSysMgr.update(ecModel, api);</span>                <span class="token comment">// console.log('--- ec frame visual ---', remainTime);</span>                scheduler<span class="token punctuation">.</span><span class="token function">performVisualTasks</span><span class="token punctuation">(</span>ecModel<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">renderSeries</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_model<span class="token punctuation">,</span> api<span class="token punctuation">,</span> <span class="token string">'remain'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                remainTime <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>remainTime <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> scheduler<span class="token punctuation">.</span>unfinished<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Call flush explicitly for trigger finished event.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scheduler<span class="token punctuation">.</span>unfinished<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>_zr<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Else, zr flushing be ensue within the same frame,</span>            <span class="token comment">// because zr flushing is after onframe event.</span>        <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于echarts的渲染分析就到这了，下次有机会我们自己动手写一个ChartView。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图表 - echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 新特性</title>
      <link href="/2021/11/02/vue3-xin-te-xing/"/>
      <url>/2021/11/02/vue3-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="vue2的历史问题"><a href="#vue2的历史问题" class="headerlink" title="vue2的历史问题"></a>vue2的历史问题</h2><p>为什么需要有Vue3？有人开玩笑式的抱怨</p><blockquote><p>别再升级了，老子学不动了</p></blockquote><p>框架升级一定是有原因的，是为了解决问题或者带来新特性，否则不会跨大版本不兼容升级。<br>为什么vue要有vue3呢，先来看看vue2框架结构和一些历史遗留问题。<br>vue2由几大块组成：组件，响应式，虚拟DOM，运行时，浏览器耦合模块。但是由于历史原因，其有以下几个缺点：</p><ol><li>vue2是基于Flow.js来做类型校验的，但是现在Flow.js已经停止维护。</li><li>vue2的运行时耦合浏览器操作，这会带来如果需要适配小程序，则要改vue核心代码才行。</li><li>vue2的响应式，也不是真正意义上的proxy，而是为了兼容IE使用了Object.defineProperty()，有很大的性能问题。</li><li>对应代码较多的组件，data,methods导致数据和方法隔离，当行数比较多时，需要来回查看，不利于维护。</li></ol><h2 id="vue3的新特性"><a href="#vue3的新特性" class="headerlink" title="vue3的新特性"></a>vue3的新特性</h2><h5 id="响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。"><a href="#响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。" class="headerlink" title="响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。"></a>响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。</h5><h5 id="自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。"><a href="#自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。" class="headerlink" title="自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。"></a>自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。</h5><h5 id="使用TypeScript重构，增强了类型安全。"><a href="#使用TypeScript重构，增强了类型安全。" class="headerlink" title="使用TypeScript重构，增强了类型安全。"></a>使用TypeScript重构，增强了类型安全。</h5><h5 id="Composition-API-组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。"><a href="#Composition-API-组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。" class="headerlink" title="Composition API 组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。"></a>Composition API 组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。</h5><h6 id="vue2写法"><a href="#vue2写法" class="headerlink" title="vue2写法"></a>vue2写法</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      count<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="vue3写法"><a href="#vue3写法" class="headerlink" title="vue3写法"></a>vue3写法</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue<span class="token keyword">let</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      count<span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> add<span class="token punctuation">,</span> double <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Vue-3-还内置了-Fragment、Teleport-和-Suspense-三个新组件"><a href="#Vue-3-还内置了-Fragment、Teleport-和-Suspense-三个新组件" class="headerlink" title="Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件"></a>Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件</h5><ul><li> Fragment: Vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。</li><li> Teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。</li><li> Suspense: 异步组件，更方便开发有异步请求的组件。</li></ul><h5 id="新一代工程化工具-Vite"><a href="#新一代工程化工具-Vite" class="headerlink" title="新一代工程化工具 Vite"></a>新一代工程化工具 Vite</h5><p>Webpack采用预编译的方式，往往由于工程文件很多，导致打包时间要到分钟级别，严重影响开发体验，而Vite采用按需加载，可以大大缩短启动时间，开发期间几乎秒启动，按需加载。</p><h2 id="vue2要不要升级vue3"><a href="#vue2要不要升级vue3" class="headerlink" title="vue2要不要升级vue3"></a>vue2要不要升级vue3</h2><p><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102164915.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>工程化工具 Vite 带来了更丝滑的调试体验。</li><li>对于产品的最终效果来看，Vue 3 性能更高，体积更小。</li><li>对于普通开发者来说，Composition API 组合语法带来了更好的组织代码的形式。</li><li>全新的响应式系统基于 Proxy，也可以独立使用。</li><li>Vue 3 内置了新的 Fragment、Teleport 和 Suspense 等组件。</li><li>对于 Vue 的二次开发来说，自定义渲染器让我们开发跨端应用时更加得心应手。</li><li>对于 Vue 的源码维护者，全部的模块使用 TypeScript 重构，能够带来更好的可维护性。<br><img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102163240.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker简介</title>
      <link href="/2021/11/01/docker-jian-jie/"/>
      <url>/2021/11/01/docker-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><p>docker是一种虚拟化技术，但是和虚拟机又不一样，比较轻量级，最大的好处就是隔离底层硬件和软件的区别，然后让软件跑在统一的环境下，而减少因为底层软硬件环境的问题，导致的软件出错和不一致性。</p><p>docker使用容器这一概念来实现，在一台机器上可以运行多个隔离的容器，每个容器内包含运行所需的所有内容，包括操作系统和底层依赖，例如：容器包括centos7的操作系统，并且含有jdk1.8的底层依赖，然后就可以分享容器，其他人只需要获取到容器，就可以直接运行你的代码，而且所有人的环境都是一样的。</p><p>我们可以用docker来快速分享开发环境，也可以用于生产环境快速扩容，因为环境都是一致的，并且docker获取和运行容器非常快速。而我主要使用docker来隔离本地环境，不想因为尝试某种技术，而污染本地的开发环境，又可以快速分享这种演示环境。后续如果可以使用docker来分发开发环境，我将使用docker，除非是docker无法支持的环境，如Mac特有的xcode打包等，不过目前看这种极特殊的情况很少发生。</p><h2 id="docker架构"><a href="#docker架构" class="headerlink" title="docker架构"></a>docker架构</h2><p><img src="https://docs.docker.com/engine/images/architecture.svg"><br>docker采用的是client-server架构，client（docker）和daemon（dockerd）通讯，client和daemon可以是在同一台机器上，也可以远程访问另外一台机器的daemon，其通讯采用的是rest-api方式。<br>daemon主要负责监听API请求，并管理镜像，容器，网络，存储等。<br>client则比较轻量一点，主要负责发送命令，比如docker run等<br>另外镜像还可以被注册和分享，通过Docker Hub可以找到很多公共镜像，从而达到快速构建容器的目的。</p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>镜像是创建容器所需的指令模板，只读，通常一个镜像可能基于另外一个镜像，做一些自己的增强，比如基于Ubuntu的系统镜像，做一些安装和配置Nginx的指令。我们可以使用Dockerfile来定义这些步骤命令，通过这个文件就可以build出镜像文件，并且分享。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器就是运行镜像的实例，你可以create，start，stop，move，delete镜像，你可以远程链接到该镜像，给它分配存储，甚至创建一个新的镜像基于容器当前的状态。容器彼此之间都是隔离的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -i -t ubuntu /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你在命令行敲了上面的代码，执行过程如下：</p><ol><li>如果你本地没有Ubuntu的镜像，则向注册中心请求该镜像文件，就像你手动执行了<code>docker pull ubuntu</code>一样。</li><li>创建新的容器，就像你手动执行<code>docker container create</code>一样。</li><li>分配可读写文件给容器，作为它的最后一层，这样允许容器被可控的修改，阻止了对于镜像其它可能的修改，即安全又便捷。</li><li>创建默认的网络接口，如果你没有自定义的话，将分配本地IP给容器，并且默认具有通过本地机器访问外部网络的能力。</li><li>容器启动，并且执行<code>/bin/bash</code>,可以和容器进行交互，因为使用了-i和-t的选项。</li><li>当你使用exit退出时，容器将停止，但是没有被删除，你还可以start或者remove。</li></ol><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>我们安装docker桌面版，因为有图形化界面，可以更直观<br>安装地址为<a href="https://docs.docker.com/desktop/">docker桌面版</a>,选择自己对应的操作系统，比如Windows还是Mac<br>具体安装步骤就不详细说明了，Windows需要注意开启主板的虚拟设置，Mac需要选择Intel芯片还是M1芯片的安装文件。<br>安装完界面如下：<img src="https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211101164658.png"></p><p>后续一些需要分享开发环境的，都将采用docker的镜像分享，以方便快速统一环境。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Spring Gateway负载均衡策略实现内网开发调试</title>
      <link href="/2021/10/26/shi-xian-nei-wang-kai-fa-diao-shi/"/>
      <url>/2021/10/26/shi-xian-nei-wang-kai-fa-diao-shi/</url>
      
        <content type="html"><![CDATA[<p>公司使用spring cloud微服务，网关使用的是spring gateway，配合nacos注册中心</p><p>日常开发测试有个需求，就是自己本地起微服务，不管是通过前端页面点击调试，还是工具如postman发送api请求，都希望自己本地IP发起的请求，都转发到自己本地的微服务上，gateway无论是开发环境还是测试环境都是共用的，另外有一整套配套的开发环境或者测试环境的微服务，这样本地就不需要额外起gateway和对应的和自己这次开发无关的微服务了。</p><p>我其实对spring gateway的源码也不熟，之前调试过一次gateway内存泄漏，是官方的bug，堆外内存的count忘记释放了，导致gateway每过一段时间就停止服务，原因是堆外内存的count达到最大值，这是另外一个话题了，现在就想重写lb的策略，通过自己自定义的策略来实现上述需求。</p><p>我们熟悉代码最快的方法是什么？我觉得是debug，那就先本地debug启动gateway，然后打上断点，来通过debug调试熟悉整个请求转发以及lb的策略是什么样的。</p><p>首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的，这个基类只有2个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ServiceInstance</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>都打上断点瞅一瞅</p><p>通过Paw给本地的gateway发请求       <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a0e03c57394408a94780cccd33010fc~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba9abdaec5eb4649bbeee78e842ffe26~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cca186a8aaa474aaebf80f9bf404df0~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这个里面和这次需求有关的代码为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token string">"lb"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"lb"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>schemePrefix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这块判断因为反编译所以是写死的lb字符串，以spring的技术规范，源码应该不至于写成这样。</p><p>只有配置成lb协议的才会走choose方法,而根据choose的返回值可以猜出来这个方法的作用就是选取一个服务提供者。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ServiceInstance</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancer<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>URI<span class="token punctuation">)</span>exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchangeUtils</span><span class="token punctuation">.</span>GATEWAY_REQUEST_URL_ATTR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而choose的方法实现调用了loadBalancer的choose方法。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f1fb17446624951aed2e882c2aa0bcf~tplv-k3u1fbpfcp-zoom-1.image"></p><p>而实现了choose接口方法的实现类有哪些呢？<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ef9ac25d2e64da99bd4291e4d1290aa~tplv-k3u1fbpfcp-zoom-1.image"></p><p>我目前也不知道会走哪个实现类，都打上断点看看会到哪个实现类里</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fd65caddee6475d8bec23e0da22a0d2~tplv-k3u1fbpfcp-zoom-1.image"></p><p>可以看到走的是RibbonLoadBalancerClient这个实现类。方法实现又转给了自己的choose方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ServiceInstance</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">,</span> <span class="token class-name">Object</span> hint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">,</span> hint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> server <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RibbonLoadBalancerClient<span class="token punctuation">.</span>RibbonServer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isSecure</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">serverIntrospector</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ILoadBalancer</span> <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clientFactory<span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token class-name">Server</span> <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span> loadBalancer<span class="token punctuation">,</span> <span class="token class-name">Object</span> hint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> loadBalancer <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> loadBalancer<span class="token punctuation">.</span><span class="token function">chooseServer</span><span class="token punctuation">(</span>hint <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> hint <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过抽象工厂拿到对应的loadBalancer，并调用其chooseServer方法</p><p>真实的loadBalancer是谁呢？是ZoneAwareLoadBalancer继承DynamicServerListLoadBalancer，这个loadBalancer为什么是ZoneAwareLoadBalancer，可以配置么？我目前还不知道。先忽略工厂策略，继续往下走。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba652788c4d7494eb58997944cefe349~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这个ZoneAwareLoadBalancer玩了个寂寞，因为我只有一个Zone所以直接调用父类BaseLoadBalancer的chooseServer方法，并传了个default的key。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">chooseServer</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rule <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rule<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"LoadBalancer [&#123;&#125;]:  Error choosing server for key &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> key<span class="token punctuation">,</span> var3<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里又转交给了rule的choose方法。这里的rule是IRule接口，实现类有如下几个：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cd44c14a29b4d59ac085814d7d36264~tplv-k3u1fbpfcp-zoom-1.image"></p><p>实际实现类是ZoneAvoidanceRule继承PredicateBasedRule</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ILoadBalancer</span> lb <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">></span></span> server <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chooseRoundRobinAfterFiltering</span><span class="token punctuation">(</span>lb<span class="token punctuation">.</span><span class="token function">getAllServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">Server</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">public abstract AbstractServerPredicate getPredicate();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>交给了实现了chooseRoundRobinAfterFiltering抽象方法的AbstractServerPredicate,而具体实现方法为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">incrementAndGetModulo</span><span class="token punctuation">(</span><span class="token keyword">int</span> modulo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> current<span class="token punctuation">;</span>        <span class="token keyword">int</span> next<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            next <span class="token operator">=</span> <span class="token punctuation">(</span>current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> modulo<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextIndex<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">||</span> current <span class="token operator">>=</span> modulo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> current<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此找到了一个轮询的Server，这是默认实现。</p><p>你觉得我还有机会吗？先理一下思路，有2个抽象点可以深入看下，一个是获取loadBalancer的时候，一个是loadBalancer的rule。</p><p>我们一个一个回溯再深入一下，首先我们还是要回答开头的一个问题</p><blockquote><p>首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的</p></blockquote><p>这么不负责任的回答，我现在再看都有点脸红，不瞒你了，直接上代码吧</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac5ed7b86cf34516ab1f8652c4295ea7~tplv-k3u1fbpfcp-zoom-1.image"> </p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f438637efe6944ceadcb923db9683a33~tplv-k3u1fbpfcp-zoom-1.image"></p><p>自动加载机制，初始化了LoadBalancerClientFilter,并且依赖RibbonAutoConfiguration.而LoadBalancerClientFilter初始化也需要2个参数：LoadBalancerClient和LoadBalancerProperties，我们看下RibbonAutoConfiguration：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8e89937319842ca93630013e7487fdf~tplv-k3u1fbpfcp-zoom-1.image"></p><p>重点这两个Bean，至此LoadBalancerClientFilter初始化完毕，并加入gateway的Filter大军，执行</p><p>public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain)方法</p><p>现在回到之前留的一个疑问，<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c1cf636434742d8a30b5349c1c26bfe~tplv-k3u1fbpfcp-zoom-1.image"></p><p>这个loadBalancer其实就是LoadBalancerClient,注入的实现类就是RibbonLoadBalancerClient，而</p><p>@ConditionalOnMissingBean({LoadBalancerClient.class})</p><p>是有机会替换loadBalancer的。</p><p>那现在我们再看rule是怎么初始化的。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/538f1e4af8274aa9a9f999d318d9997c~tplv-k3u1fbpfcp-zoom-1.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4211aff4c664b6f9995a783f38ed21e~tplv-k3u1fbpfcp-zoom-1.image"></p><p>而RibbonLoadBalancerClient里面的ILoadBalancer也是可以配置的</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9bec45f59194aeebd55831b4697173a~tplv-k3u1fbpfcp-zoom-1.image"></p><p>通过在gateway里配置properties文件，即可指定自定义的ILoadBalancer和IRule</p><p>现在我们回顾一下调用流程，发现有2个丧心病狂的地方：</p><ol><li> LoadBalancerClientFilter</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ServiceInstance</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancer<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>URI<span class="token punctuation">)</span>exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchangeUtils</span><span class="token punctuation">.</span>GATEWAY_REQUEST_URL_ATTR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里丢失了exchange,只有serviceId的信息即：</p><p>((URI)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR)).getHost()</p><p>2.RibbonLoadBalancerClient</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ServiceInstance</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ServiceInstance</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">,</span> <span class="token class-name">Object</span> hint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">,</span> hint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> server <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RibbonLoadBalancerClient<span class="token punctuation">.</span>RibbonServer</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> server<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isSecure</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">serverIntrospector</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里直接传了个null</p><p>丢失了request的信息，又key默认值”default”</p><p>所以我们如果想要实现，必须重写LoadBalancerClientFilter的protected ServiceInstance choose(ServerWebExchange exchange)</p><p>而ILoadBalancer其实不需要自定义，只需要自定义IRule即可</p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author wangdengwu */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SameIpBalanceRule</span> <span class="token keyword">extends</span> <span class="token class-name">ClientConfigEnabledRoundRobinRule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">SameIpBalanceRule</span><span class="token punctuation">(</span><span class="token class-name">ILoadBalancer</span> lb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setLoadBalancer</span><span class="token punctuation">(</span>lb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">SameIpBalanceRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> iClientConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Object</span> ip<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"client ip:&#123;&#125;"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">></span></span> servers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReachableServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>servers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> servers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">sameIpChoose</span><span class="token punctuation">(</span>servers<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Server</span> <span class="token function">sameIpChoose</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Server</span><span class="token punctuation">></span></span> servers<span class="token punctuation">,</span> <span class="token class-name">Object</span> ip<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Server</span> server <span class="token operator">=</span> servers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> host <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span><span class="token punctuation">)</span> ip<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> server<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author wangdengwu */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SameIpLoadBalancerClientFilter</span> <span class="token keyword">extends</span> <span class="token class-name">LoadBalancerClientFilter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;xxx.same.ip.enable&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enableSameIp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SameIpLoadBalancerClientFilter</span><span class="token punctuation">(</span><span class="token class-name">LoadBalancerClient</span> loadBalancer<span class="token punctuation">,</span> <span class="token class-name">LoadBalancerProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>loadBalancer<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">ServiceInstance</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//是否开启same ip策略</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>enableSameIp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//获取浏览器访问者IP</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token function">getRealIp</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> serviceIp <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"serviceIp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//强制指定IP优先级最高</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceIp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ip <span class="token operator">=</span> serviceIp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancer <span class="token keyword">instanceof</span> <span class="token class-name">RibbonLoadBalancerClient</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RibbonLoadBalancerClient</span> client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RibbonLoadBalancerClient</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancer<span class="token punctuation">;</span>            <span class="token class-name">String</span> serviceId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>URI<span class="token punctuation">)</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>GATEWAY_REQUEST_URL_ATTR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//这里使用ip做为选择服务实例的key</span>            <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getRealIp</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这个一般是Nginx反向代理设置的参数</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"X-Real-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 处理多IP的情况（只取第一个IP）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ip<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ipArray <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ip <span class="token operator">=</span> ipArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，代码完成了需求。</p><p>这里只是gateway实现了自定义路由的功能，其实还有一个地方遗漏了，那就是服务之间使用@FeignClient调用的时候，这块如何实现同源IP功能，就留给你去思考了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring gateway </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领域驱动设计简介</title>
      <link href="/2021/10/26/ling-yu-qu-dong-she-ji-jian-jie/"/>
      <url>/2021/10/26/ling-yu-qu-dong-she-ji-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="领域驱动设计"><a href="#领域驱动设计" class="headerlink" title="领域驱动设计"></a>领域驱动设计</h1><h3 id="代码开发的思考"><a href="#代码开发的思考" class="headerlink" title="代码开发的思考"></a>代码开发的思考</h3><p>以下开发方法区别是什么？</p><ul><li>面向过程开发</li><li>面向对象开发</li><li>面向CV(ctrl-c&amp;ctrl-v)开发</li><li>面向百度开发</li><li>面向数据库开发</li></ul><h3 id="什么是技术债"><a href="#什么是技术债" class="headerlink" title="什么是技术债"></a>什么是技术债</h3><p>技术债就像技术前进中的累赘一样，会像滚雪球那样越滚越大，不断拖延增加新功能的步伐，最终可能无法再为系统添加新功能。因此，技术负债的存在是导致软件质量下降的重要原因。软件质量下降以后，系统难以维护和修复，就会导致项目失败或者必须重写代码</p><h3 id="你真的在面向对象开发吗？"><a href="#你真的在面向对象开发吗？" class="headerlink" title="你真的在面向对象开发吗？"></a>你真的在面向对象开发吗？</h3><ul><li>JavaBean它真的好用吗？</li><li>DTO为什么无处不在？</li><li>MVC思想的滥用</li><li>用着面向对象的语言，做着面向过程的开发<br>现在大部分对业务逻辑的处理，都是通过Controller到Service，再通过Dao组装操作到持久层数据库，而这其实是典型的面向过程的开发，中间只是数据的传递和组装修改。<br>而现在流行的微服务架构，如果不能很好的拆分出领域实体，确定好领域边界，只不过是增加了复杂度的单体应用而已。<br>领域驱动设计的思想，回归到面向对象的本质，封装，抽象上面来，虽然设计模式可以解决一部分场景问题，但是领域驱动设计更像<strong>重剑无锋，大巧不工</strong>。</li></ul><h3 id="领域驱动为什么没有流行起来"><a href="#领域驱动为什么没有流行起来" class="headerlink" title="领域驱动为什么没有流行起来"></a>领域驱动为什么没有流行起来</h3><p>我个人结合对领域驱动的理解和认识之后，总结为领域驱动早期引入的时候，翻译的名词太理论化，导致太抽象不接地气，下面我们就看看这些专有名词有多不接地气。</p><h3 id="领域驱动名词概念"><a href="#领域驱动名词概念" class="headerlink" title="领域驱动名词概念"></a>领域驱动名词概念</h3><p>主要的概念如下：</p><ul><li>有界上下文</li><li>领域事件</li><li>聚合</li><li>聚合根</li><li>实体</li><li>值对象</li></ul><h3 id="事件风暴"><a href="#事件风暴" class="headerlink" title="事件风暴"></a>事件风暴</h3><p>事件风暴是领域驱动很好的介入点，说人话就是需求讨论阶段，具体领域驱动这块的最佳实践就是需求讨论从事件入手，所谓事件就是业务内的动词，事件风暴从动词事件入手，虽然很繁琐，但是这些事件正是日后需要实现的功能激发的。事件离需求功能更接近，对领域事件进行分门别类，可以发现有界上下文和聚合。有界上下文就是指不同业务之间的边界，包括可能的数据传递和交互，而聚合是指业务的核心内容是什么。<br>DDD分析方法的核心：从细节动词入手发现有界上下文和聚合，以逻辑一致性为边界划分依据，对动作实现分门别类地划分。</p><h3 id="领域事件"><a href="#领域事件" class="headerlink" title="领域事件"></a>领域事件</h3><p>为什么是动作或事件？因为行为即类的方法，以方法聚合，即基于接口编程，才是高内聚松耦合的关键，又根据封装的特性，应该只暴露方法，而不应该暴露数据。所以，解决复杂性的两种方法是：拆解成松耦合的组件+使用容易让人明白的套路表达出来。<br>DDD是怎么实现这两种方法的呢？首先，DDD通过引入“领域或子域”以及“有界上下文”来划分边界，边界一旦划分好，拆解的第一步就能完成；其次，DDD引入各种模式名词，比如聚合、实体、值对象、工厂、仓储、领域事件，让知晓这些模式的人能够一下子定位到功能对应的组件。</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>下面以某电力公司的电费结算领域为案例，说明如何通过组织的形式进行有界上下文的边界发现和划分。<br>首先需要了解一下领域知识、业务策略或业务规则。电力公司是干什么的? 它是电力这个商品的批发商，从发电企业购买电力，通过电网输送到用电用户，再向用电用户收取电费。其商业模式很简单，它的信息系统主要是管理金钱的进出，在上下游差价和巨额资金截流中赚取利润，这应该是其核心业务策略。<br>该业务策略落实到业务流程，就体现在部门组织设置上。营销部负责面向供电用户销售电力和收取电费，交易中心负责向电厂集中购电，财务部门则是对购销双方进行统一资金结算。不同部门负责不同的领域，现在可以根据这种原则划分三种有界上下文∶ 购电上下文;销电上下文和结算上下文，同时将参与开发的团队也相应地划分成三个团队。</p><h3 id="子域"><a href="#子域" class="headerlink" title="子域"></a>子域</h3><ul><li>核心子域(核心业务）</li><li>支持子域(周边可以外包的业务)</li><li>通用子域(基础支持如财务系统可以购买的系统)</li></ul><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p><strong>聚合是子域内的类集合以及类关系集合。</strong><br><strong>聚合是一个行为在逻辑上高度一致的对象群。</strong><br>注意，它是一个对象群体的总称。聚合的内部结构如同一棵树，每个聚合都有一个根，其他对象和聚合根之间都是枝叶与树根的有序关系。<br><strong>有序的复杂，虽然也复杂，但是可以被理解，无序的复杂，不仅仅复杂，最重要的是不能被轻易理解。</strong><br>这样有序化的好处是∶只有”根”能引用或指向其他对象，”根”自身不能被其他任何对象引用;”根”类似团队的小组长，队员都要向其汇报工作。这就是聚合根的设计来源，聚合根拥有自己边界内的数据所有权，以及行为职责的管理权限。<br>数据和行为两者兼顾的所有权只有聚合才能具有，为什么需要数据和行为两者兼顾呢?通常情况下，数据和行为是分离的，行为在服务中实现，而数据隔离在数据表中，行为通过服务转为SQL语句去操作数据表，这种方式的问题是隔离了行为和数据的紧密逻辑关系。<br>找出聚合和组合关联的类，组成树状类图，舍弃普通关联，这就是高内聚低关联的设计原则。<br><strong>聚合是体现逻辑一致性的地方，也是保证业务规则实现的地方。</strong></p><h3 id="失血和充血"><a href="#失血和充血" class="headerlink" title="失血和充血"></a>失血和充血</h3><p>在没有设计的朴素情况下，领域模型一般是一个数据对象（DTO等），其中只有setter/getter方法，是一种纯粹的数据结构，然后将很多数据结构的算法操作设计在服务（Service）等专门的接口类中。这样，数据对象作为服务接口方法的参数传入，在服务的方法中被加工。<br>所以说如果没有领域驱动设计的思想，即便是架构上是微服务的，服务内部也可能是只是面向过程的开发，只不过是service组装修改DTO，最终持久化而已。<br>区分开失血模型和贫血模型，有助于认识到数据库中的实体表其实是一种失血模型、一种纯数据结构;通过ORM等工具映射到Javabean，也是一种只有setter/ getter的失血模型，这些实体模型并不是 DDD中的实体。下面看看DDD中的实体是什么。</p><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p><strong>具有唯一标识的聚合即实体</strong><br>能够将复杂事情简单化，但是实体和聚合的表现形式太相似了。其实这是从两个不同角度看问题的结果，聚合是从实体外部看实体的上下文环境，需要在这个场景上下文扮演的角色来定位，而实体本身的内部设计，包括标识和其他属性、职责以及关联属于事物内部的构造设计。实体的设计不只要照顾到所处上下文，还要兼顾它被创建后的生命周期管理，实体的类名负责它在上下文中的定位，而实体的标识负责它被创建后的生命。<br>实体的构建往往需要builder模式<br>思考题：为什么需要使用builder模式？</p><h3 id="值对象"><a href="#值对象" class="headerlink" title="值对象"></a>值对象</h3><p>值对象：没有唯一标识的对象，是一堆数据值的容器。如VO对象，具有不变性<br>首先，值对象中的数据值一旦被构建，就不能改变，这是不变性的特性，而 DTO没有这种约束，这容易导致DTO传输过程中不断添加、修改各种字段。 DTO变成一个装载数据的可变长度的容器，虽然给编程带来了方便，但是将可变性带到代码的各个地方，最后DTO进数据库存储时，才发现数据并不是原来想象的那样，至于在哪个环节修改了，就需要不断地跟踪，这种跟踪在复杂软件中也非常复杂。</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDD </tag>
            
            <tag> 领域驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用selenium4监听网络请求</title>
      <link href="/2021/10/26/shi-yong-selenium4-jian-ting-wang-luo-qing-qiu/"/>
      <url>/2021/10/26/shi-yong-selenium4-jian-ting-wang-luo-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h3 id="selenium4支持devTools"><a href="#selenium4支持devTools" class="headerlink" title="selenium4支持devTools"></a>selenium4支持devTools</h3><p>以往selenium更多的是用来作为UI自动化工具，因为其可以编程获取页面元素，并交互，而爬取数据往往因为页面元素的展示，和实际网络请求并不一致导致只是通过页面无法获取到精确数据。<br>现在selenium4则提供了devTools交互，Chrome等浏览器自身携带了devTools，以方便开发者调试页面，比较常用的就是查看页面元素，以及查看对应的网络请求数据。<br>浏览器自带的devTools如下所示</p><p><img src="https://cdn.jsdelivr.net/gh/wangdengwu/wangdengwu.github.io/source/_posts/assets/16352486276926.jpg"></p><h3 id="selenium环境搭建"><a href="#selenium环境搭建" class="headerlink" title="selenium环境搭建"></a>selenium环境搭建</h3><p>我们以Chrome为例搭建selenium环境<br>首先需要确定我们的Chrome浏览器的版本，如果你没有安装，则需要先安装Chrome浏览器，比如现在最新的Chrome浏览器版本为94.0.4606.81<br>另外下载对应版本的chromedriver,<a href="http://npm.taobao.org/mirrors/chromedriver/">下载地址(taobao镜像)</a> 选择和Chrome版本一致的文件夹，并下载和自己操作系统一致的文件。<br>下载完成后，需要把chromedriver放到系统可执行路径下，比如Linux或Mac可以放到/usr/local/bin/<br>然后通过命令行启动Chrome，对于Windows可以在桌面Chrome应用的快捷方式添加启动参数。启动命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./Google<span class="token punctuation">\</span> Chrome --remote-debugging-port<span class="token operator">=</span><span class="token number">9222</span> --user-data-dir<span class="token operator">=</span><span class="token string">"/Users/xxxx/chrome2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中最主要的2个参数是–remote-debugging-port和–user-data-dir</p><h3 id="程序调用"><a href="#程序调用" class="headerlink" title="程序调用"></a>程序调用</h3><p>当我们启动好Chrome之后，就可以通过代码的方式来进行交互了。<br>这里我使用Java语言来展示关键代码，对应pom里需要使用最新的selenium依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>seleniumhq<span class="token punctuation">.</span>selenium<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>selenium<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置启动参数"><a href="#配置启动参数" class="headerlink" title="配置启动参数"></a>配置启动参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ChromeOptions</span> chromeOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChromeOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chromeOptions<span class="token punctuation">.</span><span class="token function">setExperimentalOption</span><span class="token punctuation">(</span><span class="token string">"debuggerAddress"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:9222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">WebDriver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChromeDriver</span><span class="token punctuation">(</span>chromeOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>driver<span class="token punctuation">.</span><span class="token function">manage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeouts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">implicitlyWait</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>driver <span class="token operator">=</span> driver<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>devTools <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChromeDriver</span><span class="token punctuation">)</span> driver<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>devTools<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>devTools<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Network</span><span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里初始化driver的时候，参数里的port一定要和启动Chrome时配置的port对应上。<br>而devTools则可以通过ChromeDriver直接获取到，devTools有很多api，而我们只演示监听网络数据的功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">devTools<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">Network</span><span class="token punctuation">.</span><span class="token function">responseReceived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>responseReceived <span class="token operator">-></span> <span class="token punctuation">&#123;</span>           <span class="token class-name">RequestId</span> requestId <span class="token operator">=</span> responseReceived<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Network<span class="token punctuation">.</span>GetResponseBodyResponse</span> response <span class="token operator">=</span> devTools<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Network</span><span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> body <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>devTools是通过事件监听来获取网络数据的，具体监听事件有很多，比如responseReceived，requestWillBeSent，dataReceived等等。<br>需要注意的有几点：</p><ol><li>获取response的时候，记得try catch，以防止有的请求并没有body导致的异常。</li><li>responseReceived事件触发时，这个时候获取response未必能取到，因为只是响应返回了，但是body可能比较大，数据可能还没有接收完。</li><li>dataReceived事件触发时，大概率是可以获取到返回的body的，但是保险起见，可以sleep500毫秒。</li><li>如果有一些请求，请求的URL都一样，只是参数不同，而我们只关心特定参数的request返回的response，则可以订阅requestWillBeSent事件，确认该请求是需要的，则把RequestId扔到队列里，在dataReceived的时候从队列里取出RequestId来获取返回数据。</li><li>requestWillBeSent的RequestId和dataReceived的RequestId内容是一样的。</li></ol><p>除了通过devTools监听数据外，还可以做很多其它的事情，比如修改请求HEAD，修改Cookie，具体API可以去<a href="https://www.selenium.dev/documentation/webdriver/bidi_apis/">官网</a>查询。</p><p>当然有了driver一样可以像以前一样，访问URL，获取页面元素，交互。比如如下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">driver<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">;</span>driver<span class="token punctuation">.</span><span class="token function">findElement</span><span class="token punctuation">(</span><span class="token class-name">By</span><span class="token punctuation">.</span><span class="token function">xpath</span><span class="token punctuation">(</span><span class="token string">"//*[@id=\"root\"]/div/section/header/div[1]/div/div/div/div[2]/span"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>driver<span class="token punctuation">.</span><span class="token function">findElement</span><span class="token punctuation">(</span><span class="token class-name">By</span><span class="token punctuation">.</span><span class="token function">className</span><span class="token punctuation">(</span><span class="token string">"semi-button-content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有了devTools监听网络数据，更方便爬取一些数据，尤其是需要授权登录的情况，我们可以事先登录或者远程登录的方式，来获取一些我们想要的数据。<br>以上就是对selenium4新功能devTools的介绍。</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
            <tag> UI自动化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar1.jpg","path":"medias/avatar1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay1.jpg","path":"medias/reward/alipay1.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"30dbb74225b334832f45ae9bc2bbcab5c3670454","modified":1634905133626},{"_id":"source/about/index.md","hash":"03acc0e156bae6a26e6a1edde7a9cdcba88d4617","modified":1634903891264},{"_id":"source/CNAME","hash":"7e225d73219fda697f3e2b9d6017d9ccdd387c37","modified":1645183704463},{"_id":"source/404/index.md","hash":"4fedd6dcbab7ae864492c69a702a29a565077eb9","modified":1634904036364},{"_id":"source/.DS_Store","hash":"8bb9c2fabdcf9262fbb8411469bbf45e557c304e","modified":1635248646090},{"_id":"source/contact/index.md","hash":"bddc127d825c90fc6e270f47892ee96b9c86a08e","modified":1634903916218},{"_id":"source/categories/index.md","hash":"b9848f5c1230bb6d103fa9e5ccb91f77f5b5e36e","modified":1634905322832},{"_id":"source/tags/index.md","hash":"f2d650dce4054d4de4529a9860491037dd542171","modified":1634903871201},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1634902103118},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a2267aed16d52f4adeb13f555d36d076855387af","modified":1634902103119},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"cef39032a867db28931c80546f3bb3d2ea248304","modified":1651291519669},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1634902103120},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"94578d8515cabb45070f2a4e68cf91f702e93262","modified":1634902103120},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1634902103120},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1634902103120},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1634902103131},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1634902103132},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1634902103131},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1634902103133},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1634902103132},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1634902103132},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"7bc865102eea11d313ff6f8fbad46ca70f11eebc","modified":1634918239587},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"a25fbf875b13f355d757b3dbb8620f4f8f925b5b","modified":1634902103133},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"2b8bce28e64e5ee38c82234761bb5f443a62be1f","modified":1634902103133},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1634902103133},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"d9acdf2504bdb5abec4bbfdcc81252aa5d29c088","modified":1634902103133},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1634902103134},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1634902103134},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1634902103118},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1634902103118},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1634902103134},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1634902103128},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1634902103128},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1634902103136},{"_id":"themes/hexo-theme-matery/README.md","hash":"ddaf6310154e314385d63041da61c418055314f6","modified":1634902103119},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1634902103127},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1634902103129},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1634902103128},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1634902103129},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1634902103129},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1634902103130},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1634902103130},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1634902103129},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1634902103130},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1634902103131},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1634902103130},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1634902103120},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1634902103131},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"acd18121108659b3dd7a94c10943e5f6a4938239","modified":1634902103120},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1634902103120},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1634902103121},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1634902103121},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1634902103121},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1634902103121},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1634902103121},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"7c87e0eb2cf662c2a9b9b0e1e5d228b0fac2622e","modified":1634902103121},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1634902103121},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1634902103122},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1634902103122},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1634902103122},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"d860d1c550f9e12441ef2d9fef0886e5efaf7d8d","modified":1634902103122},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1634902103122},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1634902103122},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"bf96ff47df2d81bf2edb2a8c6737e36b8b08aca3","modified":1634902103123},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1634902103123},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1634902103123},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1634902103123},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1634902103124},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1634902103124},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1634902103124},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1634902103124},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1634902103125},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"393e2ffd06c6757e54d126ded249f0e0dc7eb1b2","modified":1634919018666},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1634902103125},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1634902103126},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ee86dedc88a77a03311deb732d65d9669fe102d0","modified":1634920902972},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1634902103126},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1634902103127},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1634902103126},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1634902103126},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1634902103127},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1634902103134},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1634902103135},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1634902103135},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1634902103135},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"9145d60753fd59278a63fe865047e50aafe66c23","modified":1634902103135},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1634902103136},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1634902103136},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1634902103138},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1634902103138},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1634902103138},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1634902103139},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1634902103237},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1634902103221},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1634902103243},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1634902103140},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1634902103140},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"32680d9535051aced7b62f5b710a5bcd3a4551eb","modified":1634920403781},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1634902103139},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1634902103140},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1634902103141},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1634902103170},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1634902103171},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1634902103170},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1634902103172},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1634902103170},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1634902103171},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1634902103184},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1634902103169},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1634902103186},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1634902103186},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1634902103170},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1634902103186},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1634902103169},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1634902103169},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1634902103192},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1634902103196},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1634902103197},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1634902103196},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1634902103179},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1634902103199},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1634902103197},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1634902103198},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1634902103198},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1634902103200},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1634902103199},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1634902103198},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1634902103199},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1634902103204},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1634902103204},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1634902103207},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1634902103223},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1634902103225},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1634902103227},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1634902103227},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1634902103229},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1634902103231},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1634902103231},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1634902103232},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1634902103232},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1634902103234},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1634902103235},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1634902103219},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1634902103220},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1634902103236},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1634902103220},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1634902103220},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"8c6e7d86d7cfcfd79116313ef768eaaa364b45f7","modified":1634920183394},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1634902103244},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1634902103155},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1634902103155},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1634902103154},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1634902103152},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1634902103190},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1634902103189},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1634902103191},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1634902103191},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1634902103191},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1634902103189},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1634902103190},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1634902103192},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1634902103190},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1634902103189},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1634902103200},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1634902103201},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1634902103201},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1634902103200},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1634902103202},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1634902103203},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1634902103203},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1634902103188},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1634902103173},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1634902103185},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1634902103208},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1634902103211},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1634902103215},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1634902103214},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1634902103222},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1634902103225},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1634902103223},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1634902103224},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1634902103226},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1634902103228},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1634902103228},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1634902103229},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1634902103230},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1634902103233},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1634902103236},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1634902103235},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1634902103142},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1634902103143},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1634902103151},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1634902103151},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1634902103150},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1634902103168},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1634902103168},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1634902103221},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1634902103196},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1634902103194},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1634902103217},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1634902103213},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1634902103210},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1634902103218},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1634902103240},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1634902103153},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1634902103158},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1634902103167},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1634902103137},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1634902103216},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1634902103243},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1634902103207},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1634902103239},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1634902103149},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1634902103178},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1634902103183},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1634902103165},{"_id":"public/search.xml","hash":"32adebff8d757f4d26548e1b339dcbf390b56a6a","modified":1651386991536},{"_id":"public/404/index.html","hash":"8ead011b0471e895af12a707c1951e51d3426cb2","modified":1651386991536},{"_id":"public/about/index.html","hash":"981eb7b07d07d612993490f6bc6c38e6cf6225e1","modified":1651386991536},{"_id":"public/categories/index.html","hash":"a1ff403bb0a464569023794ef107b9410a8b501d","modified":1651386991536},{"_id":"public/tags/index.html","hash":"e057a83c4e414a50268aee83c95a6e6006f056f7","modified":1651386991536},{"_id":"public/contact/index.html","hash":"2dffc3d1a59f043f394a5b4b05e079131e3f3af9","modified":1651386991536},{"_id":"public/2021/10/22/hello-world/index.html","hash":"533824cad92c306852b5d8ddbc7031f40f1b32b3","modified":1647017281717},{"_id":"public/categories/测试/index.html","hash":"81bf61ff095fc245a959658fb98d28f6ea3a024a","modified":1651386991536},{"_id":"public/index.html","hash":"5b584ef0ec328a6c87dad8c8808feca4c37b02df","modified":1651386991536},{"_id":"public/tags/Test/index.html","hash":"b5bb3b6cab8c7085fffd87386fafdaad511d4afa","modified":1647017281717},{"_id":"public/tags/First/index.html","hash":"9c823d841f070f86bf72ceeffe5cacc403dd2d5d","modified":1647017281717},{"_id":"public/archives/index.html","hash":"a9f054e6bdaaaf21e142516291580c63fb9285c7","modified":1651386991536},{"_id":"public/archives/2021/index.html","hash":"30064710cd729ba67bb9d306aa37cfbe5a4d2ccd","modified":1651386991536},{"_id":"public/archives/2021/10/index.html","hash":"2fd0674f86f2ba126d72f8739f6f750b0b508bb0","modified":1651386991536},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1634906213547},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1634906213547},{"_id":"public/CNAME","hash":"7e225d73219fda697f3e2b9d6017d9ccdd387c37","modified":1645183790622},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1634906213547},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1634906213547},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1634906213547},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1634906213547},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1634906213547},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1634906213547},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1634906213547},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1634906213547},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1634906213547},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1634906213547},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1634906213547},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1634906213547},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1634906213547},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1634906213547},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1634906213547},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1634906213547},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1634906213547},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1634906213547},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1634906213547},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1634906213547},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1634906213547},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1634906213547},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1634906213547},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1634906213547},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1634906213547},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1634906213547},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1634906213547},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1634906213547},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1634906213547},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1634906213547},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1634906213547},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1634906213547},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1634906213547},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1634906213547},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1634906213547},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1634906213547},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1634906213547},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1634906213547},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1634906213547},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1634906213547},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1634906213547},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1634906213547},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1634906213547},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1634906213547},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1634906213547},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1634906213547},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1634906213547},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1634906213547},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1634906213547},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1634906213547},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1634906213547},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1634906213547},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1634906213547},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1634906213547},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1634906213547},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1634906213547},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1634906213547},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1634906213547},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1634906213547},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1634906213547},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1634906213547},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1634906213547},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1634906213547},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1634906213547},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1634906213547},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1634906213547},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1634906213547},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1634906213547},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1634906213547},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1634906213547},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1634906213547},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1634906213547},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1634906213547},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1634906213547},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1634906213547},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1634906213547},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1634906213547},{"_id":"public/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1634906213547},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1634906213547},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1634906213547},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1634906213547},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1634906213547},{"_id":"public/css/matery.css","hash":"9145d60753fd59278a63fe865047e50aafe66c23","modified":1634906213547},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1634906213547},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1634906213547},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1634906213547},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1634906213547},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1634906213547},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1634906213547},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1634906213547},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1634906213547},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1634906213547},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1634906213547},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1634906213547},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1634906213547},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1634906213547},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1634906213547},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1634906213547},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1634906213547},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1634906213547},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1634906213547},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1634906213547},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1634906213547},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1634906213547},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1634906213547},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1634906213547},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1634906213547},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1634906213547},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1634906213547},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1634906213547},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1634906213547},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1634906213547},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1634906213547},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1634906213547},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1634906213547},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1634906213547},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1634906213547},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1634906213547},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1634906213547},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1634906213547},{"_id":"themes/hexo-theme-matery/source/medias/reward/.DS_Store","hash":"191a001b2266147c4df761f86824cf402c77d1be","modified":1634984591367},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"4ed1402de1fac1c75ca3ccfd82b15472936cbd4b","modified":1634923034576},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","hash":"b3112beb27f3d0425656f33d5005791f21b79e6a","modified":1634920247977},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"ae67bf7e03562720072ea3a67703a26cc53ecd29","modified":1634922854259},{"_id":"public/medias/reward/wechat.jpg","hash":"b3112beb27f3d0425656f33d5005791f21b79e6a","modified":1634922503560},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"95e90f657e37f119ae17096062fea3967304849f","modified":1634922854263},{"_id":"themes/hexo-theme-matery/source/medias/avatar1.jpg","hash":"32680d9535051aced7b62f5b710a5bcd3a4551eb","modified":1634920403781},{"_id":"public/medias/avatar1.jpg","hash":"32680d9535051aced7b62f5b710a5bcd3a4551eb","modified":1634922870806},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay1.jpg","hash":"8c6e7d86d7cfcfd79116313ef768eaaa364b45f7","modified":1634920183394},{"_id":"public/medias/reward/alipay1.jpg","hash":"8c6e7d86d7cfcfd79116313ef768eaaa364b45f7","modified":1634923075436},{"_id":"source/_posts/使用selenium4监听网络请求.md","hash":"c8dadf31b7a719a5f765363bd7a5a5709311944d","modified":1635390296539},{"_id":"source/_posts/.DS_Store","hash":"c4d6c045defe7d5bb5224ced48d030937efe9525","modified":1647445415458},{"_id":"source/_posts/实现内网开发调试.md","hash":"948e6c67337f5fb45e2825a4d9ccf7e4fc1c07aa","modified":1635246366474},{"_id":"source/_posts/领域驱动设计简介.md","hash":"780b582ffa8c117814fefb359f9e85ec21d56617","modified":1635246103390},{"_id":"source/_posts/assets/16352486276926.jpg","hash":"99a882d0b69490376cf1650e34a9fe8bf3fef29d","modified":1635248627731},{"_id":"public/2021/10/26/shi-xian-nei-wang-kai-fa-diao-shi/index.html","hash":"3960cc1ac925cab3a6e681af0a069d2a1c7f89a8","modified":1651386991536},{"_id":"public/2021/10/26/shi-yong-selenium4-jian-ting-wang-luo-qing-qiu/index.html","hash":"4b14023e4fe6a32357652b38b804a86f2613d77d","modified":1651386991536},{"_id":"public/2021/10/26/ling-yu-qu-dong-she-ji-jian-jie/index.html","hash":"3cc57cd40995313382f6276c3d9cfb6a2c50db35","modified":1651386991536},{"_id":"public/categories/Java/index.html","hash":"5011964a493cc3659d75cdf3918e6e8bd4b9bacb","modified":1651386991536},{"_id":"public/categories/程序设计/index.html","hash":"b736b1910deb2587b5bd542935d2bb94c3f395e9","modified":1651386991536},{"_id":"public/tags/selenium/index.html","hash":"8e8d11e8ec19c11cd782dfc59f79c3b03a769596","modified":1651386991536},{"_id":"public/tags/UI自动化/index.html","hash":"62009fdcbf06d65a16cbab7734e6450fdc3ee2b4","modified":1651386991536},{"_id":"public/tags/spring-gateway/index.html","hash":"5fe4943edf226aa1d2c0b91b143e2254a5a54312","modified":1651386991536},{"_id":"public/tags/Java/index.html","hash":"978503767ad1960ad579dc767025004595edc83b","modified":1651386991536},{"_id":"public/tags/DDD/index.html","hash":"ef0dbe943ae684680729924c7d56ab2f92cf5584","modified":1651386991536},{"_id":"public/tags/领域驱动/index.html","hash":"d843de1fa3570538e256e81c0b64dedf2618df39","modified":1651386991536},{"_id":"source/_posts/Docker简介.md","hash":"043dafe18d8cc7503f63ad52d33a1161ce0c56c5","modified":1635756697284},{"_id":"public/2021/11/01/docker-jian-jie/index.html","hash":"3684f66405520a017430ca72c405fa4581c674fc","modified":1651386991536},{"_id":"public/archives/2021/11/index.html","hash":"c11adeca09c06556933a9bdde97f20ea6143ddc5","modified":1651386991536},{"_id":"public/categories/docker/index.html","hash":"70527010874a288adc5a4b5e336bb86f13e42932","modified":1651386991536},{"_id":"public/tags/docker/index.html","hash":"58bdf5dbf481873c93655e67f02709eab00ab993","modified":1651386991536},{"_id":"source/_posts/Vue3-新特性.md","hash":"7ef84890a64e82951302a014373c7e646405584a","modified":1635842986710},{"_id":"public/2021/11/02/vue3-xin-te-xing/index.html","hash":"09ef44bd444281108fa8213dc30dbdb82d8120dd","modified":1651386991536},{"_id":"public/categories/vue/index.html","hash":"604e30c17d65f905e9c45cf7300b72e5d17895f3","modified":1651386991536},{"_id":"public/tags/vue3/index.html","hash":"8ef15bbdbcdafe31349008a7a2aa7f462d8f2fcf","modified":1651386991536},{"_id":"source/_posts/echarts5图表渲染过程分析.md","hash":"83a1e21b62576527d16f245a5562e94ce66a0896","modified":1636828536065},{"_id":"public/2021/11/10/echarts5-tu-biao-xuan-ran-guo-cheng-fen-xi/index.html","hash":"c44d828e6dda5e51f26cce816cd809cd377d1886","modified":1651386991536},{"_id":"public/categories/前端/index.html","hash":"6fd2cfeef004d99d5f0dfbfe47b9a679245231c7","modified":1651386991536},{"_id":"public/tags/图表-echarts/index.html","hash":"0b704cb623c9a5bc00f9ee43fed955d755cb3dab","modified":1651386991536},{"_id":"source/_posts/函数式编程简介.md","hash":"db3ab939a169b154a9a09dc1ff2b262c99ffac08","modified":1637841656254},{"_id":"public/2021/11/24/han-shu-shi-bian-cheng-jian-jie/index.html","hash":"3cbd1ac7ba0b3302cebc4775c17bf555ff183939","modified":1651386991536},{"_id":"public/categories/函数式编程/index.html","hash":"e4e05f9476e8a86a131fc4bd4887180f233609ce","modified":1651386991536},{"_id":"public/tags/函数式编程/index.html","hash":"02eeb4dc5d8e523cde6fde2c2736231e8e14e764","modified":1651386991536},{"_id":"source/_posts/深入浅出HikariCP数据库连接池.md","hash":"7d310408245e48692000f62ee4e1294b34bb5770","modified":1639049107573},{"_id":"public/2021/12/01/shen-ru-qian-chu-hikaricp-shu-ju-ku-lian-jie-chi/index.html","hash":"59b58cebb3080e2a759b17a22929a2c420cda29e","modified":1651386991536},{"_id":"public/archives/2021/12/index.html","hash":"e4eb9db5093e55578684fd1e37ff5ee8328984c2","modified":1651386991536},{"_id":"public/tags/HikariCP/index.html","hash":"9b45e8f6fcb56ec61f7335a4840d1caaf8e9bc12","modified":1651386991536},{"_id":"public/tags/数据库连接池/index.html","hash":"354fdc1e041091d689c32d6c46e7928e77171f99","modified":1651386991536},{"_id":"source/_posts/Java-ThreadLocal探秘.md","hash":"65713f5534e51274577a2857ec4776a5bf6d7c4a","modified":1646902031899},{"_id":"public/2022/03/10/java-threadlocal-tan-mi/index.html","hash":"f3b014119bc2133570e9995c6b470cb2e747ea02","modified":1651386991536},{"_id":"public/archives/2022/index.html","hash":"29d873ef41e5ba5c7224f068852592a0cc3e0513","modified":1651386991536},{"_id":"public/archives/2022/03/index.html","hash":"f493bf28b6d1e682dda5411aa9e7e3bd202dabf8","modified":1651386991536},{"_id":"public/tags/ThreadLocal/index.html","hash":"057460096daedcbe17a32d4258905159b95d0bac","modified":1651386991536},{"_id":"source/_posts/死磕redis之起手式.md","hash":"c0d4ddb0307d0200fb78f6f35488ac390cd0393f","modified":1647017235864},{"_id":"public/2022/03/11/si-ke-redis-zhi-qi-shou-shi/index.html","hash":"60af23ce524f2e7c9b831d6259f92efb71374d74","modified":1651386991536},{"_id":"public/categories/死磕Redis/index.html","hash":"22379e48a3271b80aeb29d9824b8221abb94b77a","modified":1651386991536},{"_id":"public/tags/redis/index.html","hash":"2ffd5e8246d9acc7146cfa8e37d2c3351e13d8b6","modified":1651386991536},{"_id":"public/tags/分布式缓存/index.html","hash":"f7fb6651a52941da7f16eb3e22f5d66dbad8336f","modified":1651386991536},{"_id":"source/_posts/死磕Redis之数据类型.md","hash":"3806d6561259adb537e502c6120cff4dd414d572","modified":1649986422033},{"_id":"public/2022/03/15/si-ke-redis-zhi-shu-ju-lei-xing/index.html","hash":"3bd33c6784e7a7fac4bb421a9489775821fc1abe","modified":1651386991536},{"_id":"source/_posts/死磕Redis之持久化.md","hash":"24eb97dcdf3c1e2869dc3f8538362c713c52cf38","modified":1647849699731},{"_id":"public/2022/03/21/si-ke-redis-zhi-chi-jiu-hua/index.html","hash":"a6e0aa65e491fb1d4a71d7c3338454bb0bababb4","modified":1651386991536},{"_id":"source/_posts/死磕Redis之起手式.md","hash":"e6ce73483e234d12323adfa8d28487a823931918","modified":1648101294846},{"_id":"source/_posts/Redis-6-2-使用自签名tls实现加密传输.md","hash":"16d7f09e41fa2058bbf129ab74cc52899238604d","modified":1651293181610},{"_id":"public/page/2/index.html","hash":"04a7020f54b74a89af8c8e3dcd03c88847325c77","modified":1651386991536},{"_id":"public/tags/tls/index.html","hash":"9f9dd3d3d8fba5c39759669d67ec62302d74fcd8","modified":1651386991536},{"_id":"public/archives/page/2/index.html","hash":"025249320141b16874a2b65addf40d76dfa29166","modified":1651386991536},{"_id":"public/2022/04/21/redis-6-2-shi-yong-zi-qian-ming-tls-shi-xian-jia-mi-chuan-shu/index.html","hash":"39c0b2b771a2c17628da626dfcd08fe7c0fb488f","modified":1651386991536},{"_id":"public/archives/2022/04/index.html","hash":"546e1a4fdbe23aaed61db4312f55807c046631f1","modified":1651386991536},{"_id":"source/_posts/使用正则分组匹配字符串.md","hash":"62b871dd7a1a7d9696ebc33322798e2ed8f1fd93","modified":1651386974118},{"_id":"public/2022/05/01/shi-yong-zheng-ze-fen-zu-pi-pei-zi-fu-chuan/index.html","hash":"a8f38fa3c50f10bb9e0a8641552b9a80c1007842","modified":1651386991536},{"_id":"public/archives/2022/05/index.html","hash":"34836bf377e24f5b15d57a566bff4470fa6814e7","modified":1651386991536},{"_id":"public/tags/正则匹配/index.html","hash":"dc4ed9dbd42816984a4ee04e63e0e65fa4dbd174","modified":1651386991536}],"Category":[{"name":"测试","_id":"ckv2cy47a0006j09gflpv6hot"},{"name":"Java","_id":"ckv7zhjmo0002fa9g6n00dkli"},{"name":"程序设计","_id":"ckv7zhjmt000dfa9gd36o9z40"},{"name":"docker","_id":"ckvgfazza0001ac9g9i99g8ay"},{"name":"vue","_id":"ckvhpk8k800012w9g0ybj7i1n"},{"name":"前端","_id":"ckvwa61if0001049gbqvf9pfy"},{"name":"函数式编程","_id":"ckwer35740001zc9g13of524r"},{"name":"死磕Redis","_id":"cl0mnkcf40001d29g1n9l3vj2"}],"Data":[],"Page":[{"title":"404","date":"2021-10-22T12:00:18.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2021-10-22 20:00:18\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2021-10-22T12:00:36.364Z","path":"404/index.html","comments":1,"_id":"ckv2cy46l0000j09g5oa582u5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2021-10-22T11:57:59.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-10-22 19:57:59\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2021-10-22T11:58:11.264Z","path":"about/index.html","comments":1,"_id":"ckv2cy46p0001j09g4628dgwj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-10-22T11:56:48.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-10-22 19:56:48\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-10-22T12:22:02.832Z","path":"categories/index.html","comments":1,"_id":"ckv2cy46q0002j09ghah23pk5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-10-22T11:57:35.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-10-22 19:57:35\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-10-22T11:57:51.201Z","path":"tags/index.html","comments":1,"_id":"ckv2cy46q0003j09g64x6grpa","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2021-10-22T11:58:21.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2021-10-22 19:58:21\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2021-10-22T11:58:36.218Z","path":"contact/index.html","comments":1,"_id":"ckv2cy46r0004j09g931phj0z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"使用selenium4监听网络请求","date":"2021-10-26T10:17:22.000Z","author":"王登武","_content":"### selenium4支持devTools\n以往selenium更多的是用来作为UI自动化工具，因为其可以编程获取页面元素，并交互，而爬取数据往往因为页面元素的展示，和实际网络请求并不一致导致只是通过页面无法获取到精确数据。\n现在selenium4则提供了devTools交互，Chrome等浏览器自身携带了devTools，以方便开发者调试页面，比较常用的就是查看页面元素，以及查看对应的网络请求数据。\n浏览器自带的devTools如下所示\n\n![](https://cdn.jsdelivr.net/gh/wangdengwu/wangdengwu.github.io/source/_posts/assets/16352486276926.jpg)\n\n### selenium环境搭建\n我们以Chrome为例搭建selenium环境\n首先需要确定我们的Chrome浏览器的版本，如果你没有安装，则需要先安装Chrome浏览器，比如现在最新的Chrome浏览器版本为94.0.4606.81\n另外下载对应版本的chromedriver,[下载地址(taobao镜像)](http://npm.taobao.org/mirrors/chromedriver/) 选择和Chrome版本一致的文件夹，并下载和自己操作系统一致的文件。\n下载完成后，需要把chromedriver放到系统可执行路径下，比如Linux或Mac可以放到/usr/local/bin/ \n然后通过命令行启动Chrome，对于Windows可以在桌面Chrome应用的快捷方式添加启动参数。启动命令如下\n\n``` bash\n./Google\\ Chrome --remote-debugging-port=9222 --user-data-dir=\"/Users/xxxx/chrome2\"\n```\n其中最主要的2个参数是--remote-debugging-port和--user-data-dir\n### 程序调用\n当我们启动好Chrome之后，就可以通过代码的方式来进行交互了。\n这里我使用Java语言来展示关键代码，对应pom里需要使用最新的selenium依赖\n\n``` java\n<dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium-java</artifactId>\n    <version>4.0.0</version>\n</dependency>\n```\n\n#### 配置启动参数\n\n``` java\nChromeOptions chromeOptions = new ChromeOptions();\nchromeOptions.setExperimentalOption(\"debuggerAddress\", \"127.0.0.1:9222\");\nWebDriver driver = new ChromeDriver(chromeOptions);\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));\nthis.driver = driver;\nthis.devTools = ((ChromeDriver) driver).getDevTools();\ndevTools.createSession();\ndevTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\n```\n这里初始化driver的时候，参数里的port一定要和启动Chrome时配置的port对应上。\n而devTools则可以通过ChromeDriver直接获取到，devTools有很多api，而我们只演示监听网络数据的功能。\n\n``` java\n devTools.addListener(Network.responseReceived(),responseReceived -> {\n            RequestId requestId = responseReceived.getRequestId();\n            Network.GetResponseBodyResponse response = devTools.send(Network.getResponseBody(requestId));\n            String body = response.getBody();\n });\n```\ndevTools是通过事件监听来获取网络数据的，具体监听事件有很多，比如responseReceived，requestWillBeSent，dataReceived等等。\n需要注意的有几点：\n1. 获取response的时候，记得try catch，以防止有的请求并没有body导致的异常。\n2. responseReceived事件触发时，这个时候获取response未必能取到，因为只是响应返回了，但是body可能比较大，数据可能还没有接收完。\n3. dataReceived事件触发时，大概率是可以获取到返回的body的，但是保险起见，可以sleep500毫秒。\n4. 如果有一些请求，请求的URL都一样，只是参数不同，而我们只关心特定参数的request返回的response，则可以订阅requestWillBeSent事件，确认该请求是需要的，则把RequestId扔到队列里，在dataReceived的时候从队列里取出RequestId来获取返回数据。\n5. requestWillBeSent的RequestId和dataReceived的RequestId内容是一样的。\n\n除了通过devTools监听数据外，还可以做很多其它的事情，比如修改请求HEAD，修改Cookie，具体API可以去[官网](https://www.selenium.dev/documentation/webdriver/bidi_apis/)查询。\n\n当然有了driver一样可以像以前一样，访问URL，获取页面元素，交互。比如如下代码\n\n``` java\ndriver.get(login);\ndriver.findElement(By.xpath(\"//*[@id=\\\"root\\\"]/div/section/header/div[1]/div/div/div/div[2]/span\")).click();\ndriver.findElement(By.className(\"semi-button-content\")).click();\n```\n有了devTools监听网络数据，更方便爬取一些数据，尤其是需要授权登录的情况，我们可以事先登录或者远程登录的方式，来获取一些我们想要的数据。\n以上就是对selenium4新功能devTools的介绍。","source":"_posts/使用selenium4监听网络请求.md","raw":"---\ntitle: 使用selenium4监听网络请求\ndate: 2021-10-26 18:17:22\nauthor: 王登武\ncategories: 测试\ntags:\n  - selenium\n  - UI自动化\n---\n### selenium4支持devTools\n以往selenium更多的是用来作为UI自动化工具，因为其可以编程获取页面元素，并交互，而爬取数据往往因为页面元素的展示，和实际网络请求并不一致导致只是通过页面无法获取到精确数据。\n现在selenium4则提供了devTools交互，Chrome等浏览器自身携带了devTools，以方便开发者调试页面，比较常用的就是查看页面元素，以及查看对应的网络请求数据。\n浏览器自带的devTools如下所示\n\n![](https://cdn.jsdelivr.net/gh/wangdengwu/wangdengwu.github.io/source/_posts/assets/16352486276926.jpg)\n\n### selenium环境搭建\n我们以Chrome为例搭建selenium环境\n首先需要确定我们的Chrome浏览器的版本，如果你没有安装，则需要先安装Chrome浏览器，比如现在最新的Chrome浏览器版本为94.0.4606.81\n另外下载对应版本的chromedriver,[下载地址(taobao镜像)](http://npm.taobao.org/mirrors/chromedriver/) 选择和Chrome版本一致的文件夹，并下载和自己操作系统一致的文件。\n下载完成后，需要把chromedriver放到系统可执行路径下，比如Linux或Mac可以放到/usr/local/bin/ \n然后通过命令行启动Chrome，对于Windows可以在桌面Chrome应用的快捷方式添加启动参数。启动命令如下\n\n``` bash\n./Google\\ Chrome --remote-debugging-port=9222 --user-data-dir=\"/Users/xxxx/chrome2\"\n```\n其中最主要的2个参数是--remote-debugging-port和--user-data-dir\n### 程序调用\n当我们启动好Chrome之后，就可以通过代码的方式来进行交互了。\n这里我使用Java语言来展示关键代码，对应pom里需要使用最新的selenium依赖\n\n``` java\n<dependency>\n    <groupId>org.seleniumhq.selenium</groupId>\n    <artifactId>selenium-java</artifactId>\n    <version>4.0.0</version>\n</dependency>\n```\n\n#### 配置启动参数\n\n``` java\nChromeOptions chromeOptions = new ChromeOptions();\nchromeOptions.setExperimentalOption(\"debuggerAddress\", \"127.0.0.1:9222\");\nWebDriver driver = new ChromeDriver(chromeOptions);\ndriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));\nthis.driver = driver;\nthis.devTools = ((ChromeDriver) driver).getDevTools();\ndevTools.createSession();\ndevTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\n```\n这里初始化driver的时候，参数里的port一定要和启动Chrome时配置的port对应上。\n而devTools则可以通过ChromeDriver直接获取到，devTools有很多api，而我们只演示监听网络数据的功能。\n\n``` java\n devTools.addListener(Network.responseReceived(),responseReceived -> {\n            RequestId requestId = responseReceived.getRequestId();\n            Network.GetResponseBodyResponse response = devTools.send(Network.getResponseBody(requestId));\n            String body = response.getBody();\n });\n```\ndevTools是通过事件监听来获取网络数据的，具体监听事件有很多，比如responseReceived，requestWillBeSent，dataReceived等等。\n需要注意的有几点：\n1. 获取response的时候，记得try catch，以防止有的请求并没有body导致的异常。\n2. responseReceived事件触发时，这个时候获取response未必能取到，因为只是响应返回了，但是body可能比较大，数据可能还没有接收完。\n3. dataReceived事件触发时，大概率是可以获取到返回的body的，但是保险起见，可以sleep500毫秒。\n4. 如果有一些请求，请求的URL都一样，只是参数不同，而我们只关心特定参数的request返回的response，则可以订阅requestWillBeSent事件，确认该请求是需要的，则把RequestId扔到队列里，在dataReceived的时候从队列里取出RequestId来获取返回数据。\n5. requestWillBeSent的RequestId和dataReceived的RequestId内容是一样的。\n\n除了通过devTools监听数据外，还可以做很多其它的事情，比如修改请求HEAD，修改Cookie，具体API可以去[官网](https://www.selenium.dev/documentation/webdriver/bidi_apis/)查询。\n\n当然有了driver一样可以像以前一样，访问URL，获取页面元素，交互。比如如下代码\n\n``` java\ndriver.get(login);\ndriver.findElement(By.xpath(\"//*[@id=\\\"root\\\"]/div/section/header/div[1]/div/div/div/div[2]/span\")).click();\ndriver.findElement(By.className(\"semi-button-content\")).click();\n```\n有了devTools监听网络数据，更方便爬取一些数据，尤其是需要授权登录的情况，我们可以事先登录或者远程登录的方式，来获取一些我们想要的数据。\n以上就是对selenium4新功能devTools的介绍。","slug":"使用selenium4监听网络请求","published":1,"updated":"2021-10-28T03:04:56.539Z","_id":"ckv7yv66i00007a9g1uca62hh","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"selenium4支持devTools\"><a href=\"#selenium4支持devTools\" class=\"headerlink\" title=\"selenium4支持devTools\"></a>selenium4支持devTools</h3><p>以往selenium更多的是用来作为UI自动化工具，因为其可以编程获取页面元素，并交互，而爬取数据往往因为页面元素的展示，和实际网络请求并不一致导致只是通过页面无法获取到精确数据。<br>现在selenium4则提供了devTools交互，Chrome等浏览器自身携带了devTools，以方便开发者调试页面，比较常用的就是查看页面元素，以及查看对应的网络请求数据。<br>浏览器自带的devTools如下所示</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/wangdengwu.github.io/source/_posts/assets/16352486276926.jpg\"></p>\n<h3 id=\"selenium环境搭建\"><a href=\"#selenium环境搭建\" class=\"headerlink\" title=\"selenium环境搭建\"></a>selenium环境搭建</h3><p>我们以Chrome为例搭建selenium环境<br>首先需要确定我们的Chrome浏览器的版本，如果你没有安装，则需要先安装Chrome浏览器，比如现在最新的Chrome浏览器版本为94.0.4606.81<br>另外下载对应版本的chromedriver,<a href=\"http://npm.taobao.org/mirrors/chromedriver/\">下载地址(taobao镜像)</a> 选择和Chrome版本一致的文件夹，并下载和自己操作系统一致的文件。<br>下载完成后，需要把chromedriver放到系统可执行路径下，比如Linux或Mac可以放到/usr/local/bin/<br>然后通过命令行启动Chrome，对于Windows可以在桌面Chrome应用的快捷方式添加启动参数。启动命令如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./Google<span class=\"token punctuation\">\\</span> Chrome --remote-debugging-port<span class=\"token operator\">=</span><span class=\"token number\">9222</span> --user-data-dir<span class=\"token operator\">=</span><span class=\"token string\">\"/Users/xxxx/chrome2\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中最主要的2个参数是–remote-debugging-port和–user-data-dir</p>\n<h3 id=\"程序调用\"><a href=\"#程序调用\" class=\"headerlink\" title=\"程序调用\"></a>程序调用</h3><p>当我们启动好Chrome之后，就可以通过代码的方式来进行交互了。<br>这里我使用Java语言来展示关键代码，对应pom里需要使用最新的selenium依赖</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>seleniumhq<span class=\"token punctuation\">.</span>selenium<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>selenium<span class=\"token operator\">-</span>java<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"配置启动参数\"><a href=\"#配置启动参数\" class=\"headerlink\" title=\"配置启动参数\"></a>配置启动参数</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ChromeOptions</span> chromeOptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChromeOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchromeOptions<span class=\"token punctuation\">.</span><span class=\"token function\">setExperimentalOption</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debuggerAddress\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1:9222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">WebDriver</span> driver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChromeDriver</span><span class=\"token punctuation\">(</span>chromeOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndriver<span class=\"token punctuation\">.</span><span class=\"token function\">manage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeouts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">implicitlyWait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>devTools <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChromeDriver</span><span class=\"token punctuation\">)</span> driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDevTools</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndevTools<span class=\"token punctuation\">.</span><span class=\"token function\">createSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndevTools<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Network</span><span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里初始化driver的时候，参数里的port一定要和启动Chrome时配置的port对应上。<br>而devTools则可以通过ChromeDriver直接获取到，devTools有很多api，而我们只演示监听网络数据的功能。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">devTools<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Network</span><span class=\"token punctuation\">.</span><span class=\"token function\">responseReceived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>responseReceived <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">RequestId</span> requestId <span class=\"token operator\">=</span> responseReceived<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token class-name\">Network<span class=\"token punctuation\">.</span>GetResponseBodyResponse</span> response <span class=\"token operator\">=</span> devTools<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Network</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResponseBody</span><span class=\"token punctuation\">(</span>requestId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token class-name\">String</span> body <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>devTools是通过事件监听来获取网络数据的，具体监听事件有很多，比如responseReceived，requestWillBeSent，dataReceived等等。<br>需要注意的有几点：</p>\n<ol>\n<li>获取response的时候，记得try catch，以防止有的请求并没有body导致的异常。</li>\n<li>responseReceived事件触发时，这个时候获取response未必能取到，因为只是响应返回了，但是body可能比较大，数据可能还没有接收完。</li>\n<li>dataReceived事件触发时，大概率是可以获取到返回的body的，但是保险起见，可以sleep500毫秒。</li>\n<li>如果有一些请求，请求的URL都一样，只是参数不同，而我们只关心特定参数的request返回的response，则可以订阅requestWillBeSent事件，确认该请求是需要的，则把RequestId扔到队列里，在dataReceived的时候从队列里取出RequestId来获取返回数据。</li>\n<li>requestWillBeSent的RequestId和dataReceived的RequestId内容是一样的。</li>\n</ol>\n<p>除了通过devTools监听数据外，还可以做很多其它的事情，比如修改请求HEAD，修改Cookie，具体API可以去<a href=\"https://www.selenium.dev/documentation/webdriver/bidi_apis/\">官网</a>查询。</p>\n<p>当然有了driver一样可以像以前一样，访问URL，获取页面元素，交互。比如如下代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">driver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndriver<span class=\"token punctuation\">.</span><span class=\"token function\">findElement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">By</span><span class=\"token punctuation\">.</span><span class=\"token function\">xpath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id=\\\"root\\\"]/div/section/header/div[1]/div/div/div/div[2]/span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndriver<span class=\"token punctuation\">.</span><span class=\"token function\">findElement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">By</span><span class=\"token punctuation\">.</span><span class=\"token function\">className</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"semi-button-content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>有了devTools监听网络数据，更方便爬取一些数据，尤其是需要授权登录的情况，我们可以事先登录或者远程登录的方式，来获取一些我们想要的数据。<br>以上就是对selenium4新功能devTools的介绍。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"selenium4支持devTools\"><a href=\"#selenium4支持devTools\" class=\"headerlink\" title=\"selenium4支持devTools\"></a>selenium4支持devTools</h3><p>以往selenium更多的是用来作为UI自动化工具，因为其可以编程获取页面元素，并交互，而爬取数据往往因为页面元素的展示，和实际网络请求并不一致导致只是通过页面无法获取到精确数据。<br>现在selenium4则提供了devTools交互，Chrome等浏览器自身携带了devTools，以方便开发者调试页面，比较常用的就是查看页面元素，以及查看对应的网络请求数据。<br>浏览器自带的devTools如下所示</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/wangdengwu.github.io/source/_posts/assets/16352486276926.jpg\"></p>\n<h3 id=\"selenium环境搭建\"><a href=\"#selenium环境搭建\" class=\"headerlink\" title=\"selenium环境搭建\"></a>selenium环境搭建</h3><p>我们以Chrome为例搭建selenium环境<br>首先需要确定我们的Chrome浏览器的版本，如果你没有安装，则需要先安装Chrome浏览器，比如现在最新的Chrome浏览器版本为94.0.4606.81<br>另外下载对应版本的chromedriver,<a href=\"http://npm.taobao.org/mirrors/chromedriver/\">下载地址(taobao镜像)</a> 选择和Chrome版本一致的文件夹，并下载和自己操作系统一致的文件。<br>下载完成后，需要把chromedriver放到系统可执行路径下，比如Linux或Mac可以放到/usr/local/bin/<br>然后通过命令行启动Chrome，对于Windows可以在桌面Chrome应用的快捷方式添加启动参数。启动命令如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./Google<span class=\"token punctuation\">\\</span> Chrome --remote-debugging-port<span class=\"token operator\">=</span><span class=\"token number\">9222</span> --user-data-dir<span class=\"token operator\">=</span><span class=\"token string\">\"/Users/xxxx/chrome2\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中最主要的2个参数是–remote-debugging-port和–user-data-dir</p>\n<h3 id=\"程序调用\"><a href=\"#程序调用\" class=\"headerlink\" title=\"程序调用\"></a>程序调用</h3><p>当我们启动好Chrome之后，就可以通过代码的方式来进行交互了。<br>这里我使用Java语言来展示关键代码，对应pom里需要使用最新的selenium依赖</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>seleniumhq<span class=\"token punctuation\">.</span>selenium<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>selenium<span class=\"token operator\">-</span>java<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"配置启动参数\"><a href=\"#配置启动参数\" class=\"headerlink\" title=\"配置启动参数\"></a>配置启动参数</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ChromeOptions</span> chromeOptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChromeOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchromeOptions<span class=\"token punctuation\">.</span><span class=\"token function\">setExperimentalOption</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debuggerAddress\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1:9222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">WebDriver</span> driver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChromeDriver</span><span class=\"token punctuation\">(</span>chromeOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndriver<span class=\"token punctuation\">.</span><span class=\"token function\">manage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeouts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">implicitlyWait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>devTools <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChromeDriver</span><span class=\"token punctuation\">)</span> driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDevTools</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndevTools<span class=\"token punctuation\">.</span><span class=\"token function\">createSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndevTools<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Network</span><span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这里初始化driver的时候，参数里的port一定要和启动Chrome时配置的port对应上。<br>而devTools则可以通过ChromeDriver直接获取到，devTools有很多api，而我们只演示监听网络数据的功能。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">devTools<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Network</span><span class=\"token punctuation\">.</span><span class=\"token function\">responseReceived</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>responseReceived <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token class-name\">RequestId</span> requestId <span class=\"token operator\">=</span> responseReceived<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token class-name\">Network<span class=\"token punctuation\">.</span>GetResponseBodyResponse</span> response <span class=\"token operator\">=</span> devTools<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Network</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResponseBody</span><span class=\"token punctuation\">(</span>requestId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token class-name\">String</span> body <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>devTools是通过事件监听来获取网络数据的，具体监听事件有很多，比如responseReceived，requestWillBeSent，dataReceived等等。<br>需要注意的有几点：</p>\n<ol>\n<li>获取response的时候，记得try catch，以防止有的请求并没有body导致的异常。</li>\n<li>responseReceived事件触发时，这个时候获取response未必能取到，因为只是响应返回了，但是body可能比较大，数据可能还没有接收完。</li>\n<li>dataReceived事件触发时，大概率是可以获取到返回的body的，但是保险起见，可以sleep500毫秒。</li>\n<li>如果有一些请求，请求的URL都一样，只是参数不同，而我们只关心特定参数的request返回的response，则可以订阅requestWillBeSent事件，确认该请求是需要的，则把RequestId扔到队列里，在dataReceived的时候从队列里取出RequestId来获取返回数据。</li>\n<li>requestWillBeSent的RequestId和dataReceived的RequestId内容是一样的。</li>\n</ol>\n<p>除了通过devTools监听数据外，还可以做很多其它的事情，比如修改请求HEAD，修改Cookie，具体API可以去<a href=\"https://www.selenium.dev/documentation/webdriver/bidi_apis/\">官网</a>查询。</p>\n<p>当然有了driver一样可以像以前一样，访问URL，获取页面元素，交互。比如如下代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">driver<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndriver<span class=\"token punctuation\">.</span><span class=\"token function\">findElement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">By</span><span class=\"token punctuation\">.</span><span class=\"token function\">xpath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@id=\\\"root\\\"]/div/section/header/div[1]/div/div/div/div[2]/span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndriver<span class=\"token punctuation\">.</span><span class=\"token function\">findElement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">By</span><span class=\"token punctuation\">.</span><span class=\"token function\">className</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"semi-button-content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>有了devTools监听网络数据，更方便爬取一些数据，尤其是需要授权登录的情况，我们可以事先登录或者远程登录的方式，来获取一些我们想要的数据。<br>以上就是对selenium4新功能devTools的介绍。</p>\n"},{"title":"自定义Spring Gateway负载均衡策略实现内网开发调试","date":"2021-10-26T11:03:36.000Z","author":"王登武","_content":"公司使用spring cloud微服务，网关使用的是spring gateway，配合nacos注册中心\n\n日常开发测试有个需求，就是自己本地起微服务，不管是通过前端页面点击调试，还是工具如postman发送api请求，都希望自己本地IP发起的请求，都转发到自己本地的微服务上，gateway无论是开发环境还是测试环境都是共用的，另外有一整套配套的开发环境或者测试环境的微服务，这样本地就不需要额外起gateway和对应的和自己这次开发无关的微服务了。\n\n我其实对spring gateway的源码也不熟，之前调试过一次gateway内存泄漏，是官方的bug，堆外内存的count忘记释放了，导致gateway每过一段时间就停止服务，原因是堆外内存的count达到最大值，这是另外一个话题了，现在就想重写lb的策略，通过自己自定义的策略来实现上述需求。\n\n我们熟悉代码最快的方法是什么？我觉得是debug，那就先本地debug启动gateway，然后打上断点，来通过debug调试熟悉整个请求转发以及lb的策略是什么样的。\n\n首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的，这个基类只有2个方法\n\n```java\npublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain)\n```\n\n```java\nprotected ServiceInstance choose(ServerWebExchange exchange)\n\n```\n\n都打上断点瞅一瞅\n\n通过Paw给本地的gateway发请求       ![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a0e03c57394408a94780cccd33010fc~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba9abdaec5eb4649bbeee78e842ffe26~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cca186a8aaa474aaebf80f9bf404df0~tplv-k3u1fbpfcp-zoom-1.image)\n\n这个里面和这次需求有关的代码为：\n\n```java\nif (url != null && (\"lb\".equals(url.getScheme()) || \"lb\".equals(schemePrefix)))\n```\n\n这块判断因为反编译所以是写死的lb字符串，以spring的技术规范，源码应该不至于写成这样。\n\n只有配置成lb协议的才会走choose方法,而根据choose的返回值可以猜出来这个方法的作用就是选取一个服务提供者。\n\n```java\nprotected ServiceInstance choose(ServerWebExchange exchange) {\n        return this.loadBalancer.choose(((URI)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR)).getHost());\n    }\n```\n\n而choose的方法实现调用了loadBalancer的choose方法。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f1fb17446624951aed2e882c2aa0bcf~tplv-k3u1fbpfcp-zoom-1.image)\n\n而实现了choose接口方法的实现类有哪些呢？![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ef9ac25d2e64da99bd4291e4d1290aa~tplv-k3u1fbpfcp-zoom-1.image)\n\n我目前也不知道会走哪个实现类，都打上断点看看会到哪个实现类里\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fd65caddee6475d8bec23e0da22a0d2~tplv-k3u1fbpfcp-zoom-1.image)\n\n可以看到走的是RibbonLoadBalancerClient这个实现类。方法实现又转给了自己的choose方法\n\n```java\npublic ServiceInstance choose(String serviceId, Object hint) {\n        Server server = this.getServer(this.getLoadBalancer(serviceId), hint);\n        return server == null ? null : new RibbonLoadBalancerClient.RibbonServer(serviceId, server, this.isSecure(server, serviceId), this.serverIntrospector(serviceId).getMetadata(server));\n    }\n```\n\n```java\nprotected ILoadBalancer getLoadBalancer(String serviceId) {\n        return this.clientFactory.getLoadBalancer(serviceId);\n    }\nprotected Server getServer(ILoadBalancer loadBalancer, Object hint) {\n        return loadBalancer == null ? null : loadBalancer.chooseServer(hint != null ? hint : \"default\");\n    }\n```\n\n通过抽象工厂拿到对应的loadBalancer，并调用其chooseServer方法\n\n真实的loadBalancer是谁呢？是ZoneAwareLoadBalancer继承DynamicServerListLoadBalancer，这个loadBalancer为什么是ZoneAwareLoadBalancer，可以配置么？我目前还不知道。先忽略工厂策略，继续往下走。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba652788c4d7494eb58997944cefe349~tplv-k3u1fbpfcp-zoom-1.image)\n\n这个ZoneAwareLoadBalancer玩了个寂寞，因为我只有一个Zone所以直接调用父类BaseLoadBalancer的chooseServer方法，并传了个default的key。\n\n```java\npublic Server chooseServer(Object key) {\n        if (this.counter == null) {\n            this.counter = this.createCounter();\n        }\n\n        this.counter.increment();\n        if (this.rule == null) {\n            return null;\n        } else {\n            try {\n                return this.rule.choose(key);\n            } catch (Exception var3) {\n                logger.warn(\"LoadBalancer [{}]:  Error choosing server for key {}\", new Object[]{this.name, key, var3});\n                return null;\n            }\n        }\n    }\n```\n\n这里又转交给了rule的choose方法。这里的rule是IRule接口，实现类有如下几个：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cd44c14a29b4d59ac085814d7d36264~tplv-k3u1fbpfcp-zoom-1.image)\n\n实际实现类是ZoneAvoidanceRule继承PredicateBasedRule\n\n```java\npublic Server choose(Object key) {\n        ILoadBalancer lb = this.getLoadBalancer();\n        Optional<Server> server = this.getPredicate().chooseRoundRobinAfterFiltering(lb.getAllServers(), key);\n        return server.isPresent() ? (Server)server.get() : null;\n    }\n```\n\n```\n    public abstract AbstractServerPredicate getPredicate();\n```\n\n交给了实现了chooseRoundRobinAfterFiltering抽象方法的AbstractServerPredicate,而具体实现方法为：\n\n```java\nprivate int incrementAndGetModulo(int modulo) {\n        int current;\n        int next;\n        do {\n            current = this.nextIndex.get();\n            next = (current + 1) % modulo;\n        } while(!this.nextIndex.compareAndSet(current, next) || current >= modulo);\n\n        return current;\n    }\n```\n\n至此找到了一个轮询的Server，这是默认实现。\n\n你觉得我还有机会吗？先理一下思路，有2个抽象点可以深入看下，一个是获取loadBalancer的时候，一个是loadBalancer的rule。\n\n我们一个一个回溯再深入一下，首先我们还是要回答开头的一个问题\n\n>   \n> 首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的\n\n这么不负责任的回答，我现在再看都有点脸红，不瞒你了，直接上代码吧\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac5ed7b86cf34516ab1f8652c4295ea7~tplv-k3u1fbpfcp-zoom-1.image) \n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f438637efe6944ceadcb923db9683a33~tplv-k3u1fbpfcp-zoom-1.image)\n\n自动加载机制，初始化了LoadBalancerClientFilter,并且依赖RibbonAutoConfiguration.而LoadBalancerClientFilter初始化也需要2个参数：LoadBalancerClient和LoadBalancerProperties，我们看下RibbonAutoConfiguration：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8e89937319842ca93630013e7487fdf~tplv-k3u1fbpfcp-zoom-1.image)\n\n重点这两个Bean，至此LoadBalancerClientFilter初始化完毕，并加入gateway的Filter大军，执行\n\npublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain)方法\n\n现在回到之前留的一个疑问，![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c1cf636434742d8a30b5349c1c26bfe~tplv-k3u1fbpfcp-zoom-1.image)\n\n这个loadBalancer其实就是LoadBalancerClient,注入的实现类就是RibbonLoadBalancerClient，而\n\n@ConditionalOnMissingBean({LoadBalancerClient.class})\n\n是有机会替换loadBalancer的。\n\n那现在我们再看rule是怎么初始化的。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/538f1e4af8274aa9a9f999d318d9997c~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4211aff4c664b6f9995a783f38ed21e~tplv-k3u1fbpfcp-zoom-1.image)\n\n而RibbonLoadBalancerClient里面的ILoadBalancer也是可以配置的\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9bec45f59194aeebd55831b4697173a~tplv-k3u1fbpfcp-zoom-1.image)\n\n通过在gateway里配置properties文件，即可指定自定义的ILoadBalancer和IRule\n\n现在我们回顾一下调用流程，发现有2个丧心病狂的地方：\n\n1.  LoadBalancerClientFilter\n\n```java\nprotected ServiceInstance choose(ServerWebExchange exchange) {\n        return this.loadBalancer.choose(((URI)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR)).getHost());\n    }\n```\n\n这里丢失了exchange,只有serviceId的信息即：\n\n((URI)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY\\_REQUEST\\_URL_ATTR)).getHost()\n\n2.RibbonLoadBalancerClient\n\n```java\npublic ServiceInstance choose(String serviceId) {\n        return this.choose(serviceId, (Object)null);\n    }\npublic ServiceInstance choose(String serviceId, Object hint) {\n        Server server = this.getServer(this.getLoadBalancer(serviceId), hint);\n        return server == null ? null : new RibbonLoadBalancerClient.RibbonServer(serviceId, server, this.isSecure(server, serviceId), this.serverIntrospector(serviceId).getMetadata(server));\n    }\n```\n\n这里直接传了个null\n\n丢失了request的信息，又key默认值\"default\"\n\n所以我们如果想要实现，必须重写LoadBalancerClientFilter的protected ServiceInstance choose(ServerWebExchange exchange)\n\n而ILoadBalancer其实不需要自定义，只需要自定义IRule即可\n\n代码如下：\n\n```java\n/**\n * @author wangdengwu\n */\n@Slf4j\npublic class SameIpBalanceRule extends ClientConfigEnabledRoundRobinRule {\n\n    public SameIpBalanceRule(ILoadBalancer lb) {\n        this.setLoadBalancer(lb);\n    }\n\n    public SameIpBalanceRule() {\n\n    }\n\n    @Override\n    public void initWithNiwsConfig(IClientConfig iClientConfig) {\n\n    }\n\n    @Override\n    public Server choose(Object ip) {\n        log.info(\"client ip:{}\", ip);\n        List<Server> servers = this.getLoadBalancer().getReachableServers();\n        if (servers.isEmpty()) {\n            return null;\n        }\n        if (servers.size() == 1) {\n            return servers.get(0);\n        }\n        return sameIpChoose(servers, ip);\n    }\n\n    private Server sameIpChoose(List<Server> servers, Object ip) {\n        for (int i = 0; i < servers.size(); i++) {\n            Server server = servers.get(i);\n            String host = server.getHost();\n            if (StringUtils.equals((CharSequence) ip, host)) {\n                return server;\n            }\n        }\n        return super.choose(ip);\n    }\n}\n```\n\n```java\n/**\n * @author wangdengwu\n */\n@Component\npublic class SameIpLoadBalancerClientFilter extends LoadBalancerClientFilter {\n\n    @Value(\"${xxx.same.ip.enable}\")\n    private Boolean enableSameIp = false;\n\n    public SameIpLoadBalancerClientFilter(LoadBalancerClient loadBalancer, LoadBalancerProperties properties) {\n        super(loadBalancer, properties);\n    }\n\n    @Override\n    protected ServiceInstance choose(ServerWebExchange exchange) {\n        //是否开启same ip策略\n        if (!enableSameIp) {\n            return super.choose(exchange);\n        }\n        //获取浏览器访问者IP\n        String ip = getRealIp(exchange.getRequest());\n        String serviceIp = exchange.getRequest().getHeaders().getFirst(\"serviceIp\");\n        //强制指定IP优先级最高\n        if (serviceIp != null) {\n            ip = serviceIp;\n        }\n        if (this.loadBalancer instanceof RibbonLoadBalancerClient) {\n            RibbonLoadBalancerClient client = (RibbonLoadBalancerClient) this.loadBalancer;\n            String serviceId = ((URI) exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR)).getHost();\n            //这里使用ip做为选择服务实例的key\n            return client.choose(serviceId, ip);\n        }\n        return super.choose(exchange);\n    }\n\n    private String getRealIp(ServerHttpRequest request) {\n        // 这个一般是Nginx反向代理设置的参数\n        String ip = request.getHeaders().getFirst(\"X-Real-IP\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeaders().getFirst(\"X-Forwarded-For\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeaders().getFirst(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeaders().getFirst(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddress().getAddress().getHostAddress();\n        }\n        // 处理多IP的情况（只取第一个IP）\n        if (ip != null && ip.contains(\",\")) {\n            String[] ipArray = ip.split(\",\");\n            ip = ipArray[0];\n        }\n        return ip;\n    }\n\n}\n```\n\n至此，代码完成了需求。\n\n这里只是gateway实现了自定义路由的功能，其实还有一个地方遗漏了，那就是服务之间使用@FeignClient调用的时候，这块如何实现同源IP功能，就留给你去思考了。","source":"_posts/实现内网开发调试.md","raw":"---\ntitle: 自定义Spring Gateway负载均衡策略实现内网开发调试\ndate: 2021-10-26 19:03:36\nauthor: 王登武\ncategories: Java\ntags:\n  - spring gateway\n  - Java\n---\n公司使用spring cloud微服务，网关使用的是spring gateway，配合nacos注册中心\n\n日常开发测试有个需求，就是自己本地起微服务，不管是通过前端页面点击调试，还是工具如postman发送api请求，都希望自己本地IP发起的请求，都转发到自己本地的微服务上，gateway无论是开发环境还是测试环境都是共用的，另外有一整套配套的开发环境或者测试环境的微服务，这样本地就不需要额外起gateway和对应的和自己这次开发无关的微服务了。\n\n我其实对spring gateway的源码也不熟，之前调试过一次gateway内存泄漏，是官方的bug，堆外内存的count忘记释放了，导致gateway每过一段时间就停止服务，原因是堆外内存的count达到最大值，这是另外一个话题了，现在就想重写lb的策略，通过自己自定义的策略来实现上述需求。\n\n我们熟悉代码最快的方法是什么？我觉得是debug，那就先本地debug启动gateway，然后打上断点，来通过debug调试熟悉整个请求转发以及lb的策略是什么样的。\n\n首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的，这个基类只有2个方法\n\n```java\npublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain)\n```\n\n```java\nprotected ServiceInstance choose(ServerWebExchange exchange)\n\n```\n\n都打上断点瞅一瞅\n\n通过Paw给本地的gateway发请求       ![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a0e03c57394408a94780cccd33010fc~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba9abdaec5eb4649bbeee78e842ffe26~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cca186a8aaa474aaebf80f9bf404df0~tplv-k3u1fbpfcp-zoom-1.image)\n\n这个里面和这次需求有关的代码为：\n\n```java\nif (url != null && (\"lb\".equals(url.getScheme()) || \"lb\".equals(schemePrefix)))\n```\n\n这块判断因为反编译所以是写死的lb字符串，以spring的技术规范，源码应该不至于写成这样。\n\n只有配置成lb协议的才会走choose方法,而根据choose的返回值可以猜出来这个方法的作用就是选取一个服务提供者。\n\n```java\nprotected ServiceInstance choose(ServerWebExchange exchange) {\n        return this.loadBalancer.choose(((URI)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR)).getHost());\n    }\n```\n\n而choose的方法实现调用了loadBalancer的choose方法。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f1fb17446624951aed2e882c2aa0bcf~tplv-k3u1fbpfcp-zoom-1.image)\n\n而实现了choose接口方法的实现类有哪些呢？![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ef9ac25d2e64da99bd4291e4d1290aa~tplv-k3u1fbpfcp-zoom-1.image)\n\n我目前也不知道会走哪个实现类，都打上断点看看会到哪个实现类里\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fd65caddee6475d8bec23e0da22a0d2~tplv-k3u1fbpfcp-zoom-1.image)\n\n可以看到走的是RibbonLoadBalancerClient这个实现类。方法实现又转给了自己的choose方法\n\n```java\npublic ServiceInstance choose(String serviceId, Object hint) {\n        Server server = this.getServer(this.getLoadBalancer(serviceId), hint);\n        return server == null ? null : new RibbonLoadBalancerClient.RibbonServer(serviceId, server, this.isSecure(server, serviceId), this.serverIntrospector(serviceId).getMetadata(server));\n    }\n```\n\n```java\nprotected ILoadBalancer getLoadBalancer(String serviceId) {\n        return this.clientFactory.getLoadBalancer(serviceId);\n    }\nprotected Server getServer(ILoadBalancer loadBalancer, Object hint) {\n        return loadBalancer == null ? null : loadBalancer.chooseServer(hint != null ? hint : \"default\");\n    }\n```\n\n通过抽象工厂拿到对应的loadBalancer，并调用其chooseServer方法\n\n真实的loadBalancer是谁呢？是ZoneAwareLoadBalancer继承DynamicServerListLoadBalancer，这个loadBalancer为什么是ZoneAwareLoadBalancer，可以配置么？我目前还不知道。先忽略工厂策略，继续往下走。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba652788c4d7494eb58997944cefe349~tplv-k3u1fbpfcp-zoom-1.image)\n\n这个ZoneAwareLoadBalancer玩了个寂寞，因为我只有一个Zone所以直接调用父类BaseLoadBalancer的chooseServer方法，并传了个default的key。\n\n```java\npublic Server chooseServer(Object key) {\n        if (this.counter == null) {\n            this.counter = this.createCounter();\n        }\n\n        this.counter.increment();\n        if (this.rule == null) {\n            return null;\n        } else {\n            try {\n                return this.rule.choose(key);\n            } catch (Exception var3) {\n                logger.warn(\"LoadBalancer [{}]:  Error choosing server for key {}\", new Object[]{this.name, key, var3});\n                return null;\n            }\n        }\n    }\n```\n\n这里又转交给了rule的choose方法。这里的rule是IRule接口，实现类有如下几个：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cd44c14a29b4d59ac085814d7d36264~tplv-k3u1fbpfcp-zoom-1.image)\n\n实际实现类是ZoneAvoidanceRule继承PredicateBasedRule\n\n```java\npublic Server choose(Object key) {\n        ILoadBalancer lb = this.getLoadBalancer();\n        Optional<Server> server = this.getPredicate().chooseRoundRobinAfterFiltering(lb.getAllServers(), key);\n        return server.isPresent() ? (Server)server.get() : null;\n    }\n```\n\n```\n    public abstract AbstractServerPredicate getPredicate();\n```\n\n交给了实现了chooseRoundRobinAfterFiltering抽象方法的AbstractServerPredicate,而具体实现方法为：\n\n```java\nprivate int incrementAndGetModulo(int modulo) {\n        int current;\n        int next;\n        do {\n            current = this.nextIndex.get();\n            next = (current + 1) % modulo;\n        } while(!this.nextIndex.compareAndSet(current, next) || current >= modulo);\n\n        return current;\n    }\n```\n\n至此找到了一个轮询的Server，这是默认实现。\n\n你觉得我还有机会吗？先理一下思路，有2个抽象点可以深入看下，一个是获取loadBalancer的时候，一个是loadBalancer的rule。\n\n我们一个一个回溯再深入一下，首先我们还是要回答开头的一个问题\n\n>   \n> 首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的\n\n这么不负责任的回答，我现在再看都有点脸红，不瞒你了，直接上代码吧\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac5ed7b86cf34516ab1f8652c4295ea7~tplv-k3u1fbpfcp-zoom-1.image) \n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f438637efe6944ceadcb923db9683a33~tplv-k3u1fbpfcp-zoom-1.image)\n\n自动加载机制，初始化了LoadBalancerClientFilter,并且依赖RibbonAutoConfiguration.而LoadBalancerClientFilter初始化也需要2个参数：LoadBalancerClient和LoadBalancerProperties，我们看下RibbonAutoConfiguration：\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8e89937319842ca93630013e7487fdf~tplv-k3u1fbpfcp-zoom-1.image)\n\n重点这两个Bean，至此LoadBalancerClientFilter初始化完毕，并加入gateway的Filter大军，执行\n\npublic Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain)方法\n\n现在回到之前留的一个疑问，![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c1cf636434742d8a30b5349c1c26bfe~tplv-k3u1fbpfcp-zoom-1.image)\n\n这个loadBalancer其实就是LoadBalancerClient,注入的实现类就是RibbonLoadBalancerClient，而\n\n@ConditionalOnMissingBean({LoadBalancerClient.class})\n\n是有机会替换loadBalancer的。\n\n那现在我们再看rule是怎么初始化的。\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/538f1e4af8274aa9a9f999d318d9997c~tplv-k3u1fbpfcp-zoom-1.image)\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4211aff4c664b6f9995a783f38ed21e~tplv-k3u1fbpfcp-zoom-1.image)\n\n而RibbonLoadBalancerClient里面的ILoadBalancer也是可以配置的\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9bec45f59194aeebd55831b4697173a~tplv-k3u1fbpfcp-zoom-1.image)\n\n通过在gateway里配置properties文件，即可指定自定义的ILoadBalancer和IRule\n\n现在我们回顾一下调用流程，发现有2个丧心病狂的地方：\n\n1.  LoadBalancerClientFilter\n\n```java\nprotected ServiceInstance choose(ServerWebExchange exchange) {\n        return this.loadBalancer.choose(((URI)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR)).getHost());\n    }\n```\n\n这里丢失了exchange,只有serviceId的信息即：\n\n((URI)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY\\_REQUEST\\_URL_ATTR)).getHost()\n\n2.RibbonLoadBalancerClient\n\n```java\npublic ServiceInstance choose(String serviceId) {\n        return this.choose(serviceId, (Object)null);\n    }\npublic ServiceInstance choose(String serviceId, Object hint) {\n        Server server = this.getServer(this.getLoadBalancer(serviceId), hint);\n        return server == null ? null : new RibbonLoadBalancerClient.RibbonServer(serviceId, server, this.isSecure(server, serviceId), this.serverIntrospector(serviceId).getMetadata(server));\n    }\n```\n\n这里直接传了个null\n\n丢失了request的信息，又key默认值\"default\"\n\n所以我们如果想要实现，必须重写LoadBalancerClientFilter的protected ServiceInstance choose(ServerWebExchange exchange)\n\n而ILoadBalancer其实不需要自定义，只需要自定义IRule即可\n\n代码如下：\n\n```java\n/**\n * @author wangdengwu\n */\n@Slf4j\npublic class SameIpBalanceRule extends ClientConfigEnabledRoundRobinRule {\n\n    public SameIpBalanceRule(ILoadBalancer lb) {\n        this.setLoadBalancer(lb);\n    }\n\n    public SameIpBalanceRule() {\n\n    }\n\n    @Override\n    public void initWithNiwsConfig(IClientConfig iClientConfig) {\n\n    }\n\n    @Override\n    public Server choose(Object ip) {\n        log.info(\"client ip:{}\", ip);\n        List<Server> servers = this.getLoadBalancer().getReachableServers();\n        if (servers.isEmpty()) {\n            return null;\n        }\n        if (servers.size() == 1) {\n            return servers.get(0);\n        }\n        return sameIpChoose(servers, ip);\n    }\n\n    private Server sameIpChoose(List<Server> servers, Object ip) {\n        for (int i = 0; i < servers.size(); i++) {\n            Server server = servers.get(i);\n            String host = server.getHost();\n            if (StringUtils.equals((CharSequence) ip, host)) {\n                return server;\n            }\n        }\n        return super.choose(ip);\n    }\n}\n```\n\n```java\n/**\n * @author wangdengwu\n */\n@Component\npublic class SameIpLoadBalancerClientFilter extends LoadBalancerClientFilter {\n\n    @Value(\"${xxx.same.ip.enable}\")\n    private Boolean enableSameIp = false;\n\n    public SameIpLoadBalancerClientFilter(LoadBalancerClient loadBalancer, LoadBalancerProperties properties) {\n        super(loadBalancer, properties);\n    }\n\n    @Override\n    protected ServiceInstance choose(ServerWebExchange exchange) {\n        //是否开启same ip策略\n        if (!enableSameIp) {\n            return super.choose(exchange);\n        }\n        //获取浏览器访问者IP\n        String ip = getRealIp(exchange.getRequest());\n        String serviceIp = exchange.getRequest().getHeaders().getFirst(\"serviceIp\");\n        //强制指定IP优先级最高\n        if (serviceIp != null) {\n            ip = serviceIp;\n        }\n        if (this.loadBalancer instanceof RibbonLoadBalancerClient) {\n            RibbonLoadBalancerClient client = (RibbonLoadBalancerClient) this.loadBalancer;\n            String serviceId = ((URI) exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR)).getHost();\n            //这里使用ip做为选择服务实例的key\n            return client.choose(serviceId, ip);\n        }\n        return super.choose(exchange);\n    }\n\n    private String getRealIp(ServerHttpRequest request) {\n        // 这个一般是Nginx反向代理设置的参数\n        String ip = request.getHeaders().getFirst(\"X-Real-IP\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeaders().getFirst(\"X-Forwarded-For\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeaders().getFirst(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeaders().getFirst(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddress().getAddress().getHostAddress();\n        }\n        // 处理多IP的情况（只取第一个IP）\n        if (ip != null && ip.contains(\",\")) {\n            String[] ipArray = ip.split(\",\");\n            ip = ipArray[0];\n        }\n        return ip;\n    }\n\n}\n```\n\n至此，代码完成了需求。\n\n这里只是gateway实现了自定义路由的功能，其实还有一个地方遗漏了，那就是服务之间使用@FeignClient调用的时候，这块如何实现同源IP功能，就留给你去思考了。","slug":"实现内网开发调试","published":1,"updated":"2021-10-26T11:06:06.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7zhjmk0000fa9gaj370wkv","content":"<p>公司使用spring cloud微服务，网关使用的是spring gateway，配合nacos注册中心</p>\n<p>日常开发测试有个需求，就是自己本地起微服务，不管是通过前端页面点击调试，还是工具如postman发送api请求，都希望自己本地IP发起的请求，都转发到自己本地的微服务上，gateway无论是开发环境还是测试环境都是共用的，另外有一整套配套的开发环境或者测试环境的微服务，这样本地就不需要额外起gateway和对应的和自己这次开发无关的微服务了。</p>\n<p>我其实对spring gateway的源码也不熟，之前调试过一次gateway内存泄漏，是官方的bug，堆外内存的count忘记释放了，导致gateway每过一段时间就停止服务，原因是堆外内存的count达到最大值，这是另外一个话题了，现在就想重写lb的策略，通过自己自定义的策略来实现上述需求。</p>\n<p>我们熟悉代码最快的方法是什么？我觉得是debug，那就先本地debug启动gateway，然后打上断点，来通过debug调试熟悉整个请求转发以及lb的策略是什么样的。</p>\n<p>首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的，这个基类只有2个方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>都打上断点瞅一瞅</p>\n<p>通过Paw给本地的gateway发请求       <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a0e03c57394408a94780cccd33010fc~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba9abdaec5eb4649bbeee78e842ffe26~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cca186a8aaa474aaebf80f9bf404df0~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>这个里面和这次需求有关的代码为：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"lb\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getScheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"lb\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>schemePrefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这块判断因为反编译所以是写死的lb字符串，以spring的技术规范，源码应该不至于写成这样。</p>\n<p>只有配置成lb协议的才会走choose方法,而根据choose的返回值可以猜出来这个方法的作用就是选取一个服务提供者。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadBalancer<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>URI<span class=\"token punctuation\">)</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchangeUtils</span><span class=\"token punctuation\">.</span>GATEWAY_REQUEST_URL_ATTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>而choose的方法实现调用了loadBalancer的choose方法。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f1fb17446624951aed2e882c2aa0bcf~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>而实现了choose接口方法的实现类有哪些呢？<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ef9ac25d2e64da99bd4291e4d1290aa~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>我目前也不知道会走哪个实现类，都打上断点看看会到哪个实现类里</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fd65caddee6475d8bec23e0da22a0d2~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>可以看到走的是RibbonLoadBalancerClient这个实现类。方法实现又转给了自己的choose方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> hint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> server <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RibbonLoadBalancerClient<span class=\"token punctuation\">.</span>RibbonServer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSecure</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">serverIntrospector</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">ILoadBalancer</span> <span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">getServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILoadBalancer</span> loadBalancer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> hint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> loadBalancer <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> loadBalancer<span class=\"token punctuation\">.</span><span class=\"token function\">chooseServer</span><span class=\"token punctuation\">(</span>hint <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> hint <span class=\"token operator\">:</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过抽象工厂拿到对应的loadBalancer，并调用其chooseServer方法</p>\n<p>真实的loadBalancer是谁呢？是ZoneAwareLoadBalancer继承DynamicServerListLoadBalancer，这个loadBalancer为什么是ZoneAwareLoadBalancer，可以配置么？我目前还不知道。先忽略工厂策略，继续往下走。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba652788c4d7494eb58997944cefe349~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>这个ZoneAwareLoadBalancer玩了个寂寞，因为我只有一个Zone所以直接调用父类BaseLoadBalancer的chooseServer方法，并传了个default的key。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">chooseServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rule <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rule<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> var3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LoadBalancer [&#123;&#125;]:  Error choosing server for key &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> var3<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里又转交给了rule的choose方法。这里的rule是IRule接口，实现类有如下几个：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cd44c14a29b4d59ac085814d7d36264~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>实际实现类是ZoneAvoidanceRule继承PredicateBasedRule</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ILoadBalancer</span> lb <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">></span></span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPredicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chooseRoundRobinAfterFiltering</span><span class=\"token punctuation\">(</span>lb<span class=\"token punctuation\">.</span><span class=\"token function\">getAllServers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">)</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public abstract AbstractServerPredicate getPredicate();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>交给了实现了chooseRoundRobinAfterFiltering抽象方法的AbstractServerPredicate,而具体实现方法为：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">incrementAndGetModulo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> modulo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n            current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextIndex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> modulo<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextIndex<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> current <span class=\"token operator\">>=</span> modulo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此找到了一个轮询的Server，这是默认实现。</p>\n<p>你觉得我还有机会吗？先理一下思路，有2个抽象点可以深入看下，一个是获取loadBalancer的时候，一个是loadBalancer的rule。</p>\n<p>我们一个一个回溯再深入一下，首先我们还是要回答开头的一个问题</p>\n<blockquote>\n<p>首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的</p>\n</blockquote>\n<p>这么不负责任的回答，我现在再看都有点脸红，不瞒你了，直接上代码吧</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac5ed7b86cf34516ab1f8652c4295ea7~tplv-k3u1fbpfcp-zoom-1.image\"> </p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f438637efe6944ceadcb923db9683a33~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>自动加载机制，初始化了LoadBalancerClientFilter,并且依赖RibbonAutoConfiguration.而LoadBalancerClientFilter初始化也需要2个参数：LoadBalancerClient和LoadBalancerProperties，我们看下RibbonAutoConfiguration：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8e89937319842ca93630013e7487fdf~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>重点这两个Bean，至此LoadBalancerClientFilter初始化完毕，并加入gateway的Filter大军，执行</p>\n<p>public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain)方法</p>\n<p>现在回到之前留的一个疑问，<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c1cf636434742d8a30b5349c1c26bfe~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>这个loadBalancer其实就是LoadBalancerClient,注入的实现类就是RibbonLoadBalancerClient，而</p>\n<p>@ConditionalOnMissingBean({LoadBalancerClient.class})</p>\n<p>是有机会替换loadBalancer的。</p>\n<p>那现在我们再看rule是怎么初始化的。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/538f1e4af8274aa9a9f999d318d9997c~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4211aff4c664b6f9995a783f38ed21e~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>而RibbonLoadBalancerClient里面的ILoadBalancer也是可以配置的</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9bec45f59194aeebd55831b4697173a~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>通过在gateway里配置properties文件，即可指定自定义的ILoadBalancer和IRule</p>\n<p>现在我们回顾一下调用流程，发现有2个丧心病狂的地方：</p>\n<ol>\n<li> LoadBalancerClientFilter</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadBalancer<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>URI<span class=\"token punctuation\">)</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchangeUtils</span><span class=\"token punctuation\">.</span>GATEWAY_REQUEST_URL_ATTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里丢失了exchange,只有serviceId的信息即：</p>\n<p>((URI)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR)).getHost()</p>\n<p>2.RibbonLoadBalancerClient</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> hint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> server <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RibbonLoadBalancerClient<span class=\"token punctuation\">.</span>RibbonServer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSecure</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">serverIntrospector</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里直接传了个null</p>\n<p>丢失了request的信息，又key默认值”default”</p>\n<p>所以我们如果想要实现，必须重写LoadBalancerClientFilter的protected ServiceInstance choose(ServerWebExchange exchange)</p>\n<p>而ILoadBalancer其实不需要自定义，只需要自定义IRule即可</p>\n<p>代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author wangdengwu\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SameIpBalanceRule</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClientConfigEnabledRoundRobinRule</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SameIpBalanceRule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILoadBalancer</span> lb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLoadBalancer</span><span class=\"token punctuation\">(</span>lb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SameIpBalanceRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initWithNiwsConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IClientConfig</span> iClientConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> ip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client ip:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">></span></span> servers <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getReachableServers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> servers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">sameIpChoose</span><span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">sameIpChoose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">></span></span> servers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> ip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> servers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> servers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> host <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">)</span> ip<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> server<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author wangdengwu\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SameIpLoadBalancerClientFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LoadBalancerClientFilter</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxx.same.ip.enable&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Boolean</span> enableSameIp <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SameIpLoadBalancerClientFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoadBalancerClient</span> loadBalancer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LoadBalancerProperties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>loadBalancer<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//是否开启same ip策略</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>enableSameIp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//获取浏览器访问者IP</span>\n        <span class=\"token class-name\">String</span> ip <span class=\"token operator\">=</span> <span class=\"token function\">getRealIp</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> serviceIp <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serviceIp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//强制指定IP优先级最高</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serviceIp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> serviceIp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadBalancer <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RibbonLoadBalancerClient</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">RibbonLoadBalancerClient</span> client <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RibbonLoadBalancerClient</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadBalancer<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> serviceId <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>URI<span class=\"token punctuation\">)</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>GATEWAY_REQUEST_URL_ATTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//这里使用ip做为选择服务实例的key</span>\n            <span class=\"token keyword\">return</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRealIp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerHttpRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 这个一般是Nginx反向代理设置的参数</span>\n        <span class=\"token class-name\">String</span> ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Real-IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Forwarded-For\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Proxy-Client-IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WL-Proxy-Client-IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHostAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 处理多IP的情况（只取第一个IP）</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ipArray <span class=\"token operator\">=</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ip <span class=\"token operator\">=</span> ipArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ip<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，代码完成了需求。</p>\n<p>这里只是gateway实现了自定义路由的功能，其实还有一个地方遗漏了，那就是服务之间使用@FeignClient调用的时候，这块如何实现同源IP功能，就留给你去思考了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>公司使用spring cloud微服务，网关使用的是spring gateway，配合nacos注册中心</p>\n<p>日常开发测试有个需求，就是自己本地起微服务，不管是通过前端页面点击调试，还是工具如postman发送api请求，都希望自己本地IP发起的请求，都转发到自己本地的微服务上，gateway无论是开发环境还是测试环境都是共用的，另外有一整套配套的开发环境或者测试环境的微服务，这样本地就不需要额外起gateway和对应的和自己这次开发无关的微服务了。</p>\n<p>我其实对spring gateway的源码也不熟，之前调试过一次gateway内存泄漏，是官方的bug，堆外内存的count忘记释放了，导致gateway每过一段时间就停止服务，原因是堆外内存的count达到最大值，这是另外一个话题了，现在就想重写lb的策略，通过自己自定义的策略来实现上述需求。</p>\n<p>我们熟悉代码最快的方法是什么？我觉得是debug，那就先本地debug启动gateway，然后打上断点，来通过debug调试熟悉整个请求转发以及lb的策略是什么样的。</p>\n<p>首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的，这个基类只有2个方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>都打上断点瞅一瞅</p>\n<p>通过Paw给本地的gateway发请求       <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a0e03c57394408a94780cccd33010fc~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba9abdaec5eb4649bbeee78e842ffe26~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cca186a8aaa474aaebf80f9bf404df0~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>这个里面和这次需求有关的代码为：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"lb\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getScheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"lb\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>schemePrefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这块判断因为反编译所以是写死的lb字符串，以spring的技术规范，源码应该不至于写成这样。</p>\n<p>只有配置成lb协议的才会走choose方法,而根据choose的返回值可以猜出来这个方法的作用就是选取一个服务提供者。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadBalancer<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>URI<span class=\"token punctuation\">)</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchangeUtils</span><span class=\"token punctuation\">.</span>GATEWAY_REQUEST_URL_ATTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>而choose的方法实现调用了loadBalancer的choose方法。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f1fb17446624951aed2e882c2aa0bcf~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>而实现了choose接口方法的实现类有哪些呢？<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ef9ac25d2e64da99bd4291e4d1290aa~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>我目前也不知道会走哪个实现类，都打上断点看看会到哪个实现类里</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fd65caddee6475d8bec23e0da22a0d2~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>可以看到走的是RibbonLoadBalancerClient这个实现类。方法实现又转给了自己的choose方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> hint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> server <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RibbonLoadBalancerClient<span class=\"token punctuation\">.</span>RibbonServer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSecure</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">serverIntrospector</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">ILoadBalancer</span> <span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">getServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILoadBalancer</span> loadBalancer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> hint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> loadBalancer <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> loadBalancer<span class=\"token punctuation\">.</span><span class=\"token function\">chooseServer</span><span class=\"token punctuation\">(</span>hint <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> hint <span class=\"token operator\">:</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过抽象工厂拿到对应的loadBalancer，并调用其chooseServer方法</p>\n<p>真实的loadBalancer是谁呢？是ZoneAwareLoadBalancer继承DynamicServerListLoadBalancer，这个loadBalancer为什么是ZoneAwareLoadBalancer，可以配置么？我目前还不知道。先忽略工厂策略，继续往下走。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba652788c4d7494eb58997944cefe349~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>这个ZoneAwareLoadBalancer玩了个寂寞，因为我只有一个Zone所以直接调用父类BaseLoadBalancer的chooseServer方法，并传了个default的key。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">chooseServer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rule <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rule<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> var3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LoadBalancer [&#123;&#125;]:  Error choosing server for key &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> var3<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里又转交给了rule的choose方法。这里的rule是IRule接口，实现类有如下几个：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cd44c14a29b4d59ac085814d7d36264~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>实际实现类是ZoneAvoidanceRule继承PredicateBasedRule</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ILoadBalancer</span> lb <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">></span></span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPredicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">chooseRoundRobinAfterFiltering</span><span class=\"token punctuation\">(</span>lb<span class=\"token punctuation\">.</span><span class=\"token function\">getAllServers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">)</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public abstract AbstractServerPredicate getPredicate();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>交给了实现了chooseRoundRobinAfterFiltering抽象方法的AbstractServerPredicate,而具体实现方法为：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">incrementAndGetModulo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> modulo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n            current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextIndex<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> modulo<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextIndex<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> current <span class=\"token operator\">>=</span> modulo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此找到了一个轮询的Server，这是默认实现。</p>\n<p>你觉得我还有机会吗？先理一下思路，有2个抽象点可以深入看下，一个是获取loadBalancer的时候，一个是loadBalancer的rule。</p>\n<p>我们一个一个回溯再深入一下，首先我们还是要回答开头的一个问题</p>\n<blockquote>\n<p>首先我知道gateway一定会走LoadBalancerClientFilter，别问我怎么知道的，要问就是随便在spring-cloud-gateway-core的源码里根据类名猜的</p>\n</blockquote>\n<p>这么不负责任的回答，我现在再看都有点脸红，不瞒你了，直接上代码吧</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac5ed7b86cf34516ab1f8652c4295ea7~tplv-k3u1fbpfcp-zoom-1.image\"> </p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f438637efe6944ceadcb923db9683a33~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>自动加载机制，初始化了LoadBalancerClientFilter,并且依赖RibbonAutoConfiguration.而LoadBalancerClientFilter初始化也需要2个参数：LoadBalancerClient和LoadBalancerProperties，我们看下RibbonAutoConfiguration：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8e89937319842ca93630013e7487fdf~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>重点这两个Bean，至此LoadBalancerClientFilter初始化完毕，并加入gateway的Filter大军，执行</p>\n<p>public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain)方法</p>\n<p>现在回到之前留的一个疑问，<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c1cf636434742d8a30b5349c1c26bfe~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>这个loadBalancer其实就是LoadBalancerClient,注入的实现类就是RibbonLoadBalancerClient，而</p>\n<p>@ConditionalOnMissingBean({LoadBalancerClient.class})</p>\n<p>是有机会替换loadBalancer的。</p>\n<p>那现在我们再看rule是怎么初始化的。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/538f1e4af8274aa9a9f999d318d9997c~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4211aff4c664b6f9995a783f38ed21e~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>而RibbonLoadBalancerClient里面的ILoadBalancer也是可以配置的</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9bec45f59194aeebd55831b4697173a~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>通过在gateway里配置properties文件，即可指定自定义的ILoadBalancer和IRule</p>\n<p>现在我们回顾一下调用流程，发现有2个丧心病狂的地方：</p>\n<ol>\n<li> LoadBalancerClientFilter</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadBalancer<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>URI<span class=\"token punctuation\">)</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchangeUtils</span><span class=\"token punctuation\">.</span>GATEWAY_REQUEST_URL_ATTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里丢失了exchange,只有serviceId的信息即：</p>\n<p>((URI)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR)).getHost()</p>\n<p>2.RibbonLoadBalancerClient</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> serviceId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> hint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> server <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RibbonLoadBalancerClient<span class=\"token punctuation\">.</span>RibbonServer</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSecure</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">serverIntrospector</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里直接传了个null</p>\n<p>丢失了request的信息，又key默认值”default”</p>\n<p>所以我们如果想要实现，必须重写LoadBalancerClientFilter的protected ServiceInstance choose(ServerWebExchange exchange)</p>\n<p>而ILoadBalancer其实不需要自定义，只需要自定义IRule即可</p>\n<p>代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author wangdengwu\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SameIpBalanceRule</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClientConfigEnabledRoundRobinRule</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SameIpBalanceRule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILoadBalancer</span> lb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLoadBalancer</span><span class=\"token punctuation\">(</span>lb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SameIpBalanceRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initWithNiwsConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IClientConfig</span> iClientConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> ip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client ip:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">></span></span> servers <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getReachableServers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> servers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">sameIpChoose</span><span class=\"token punctuation\">(</span>servers<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">sameIpChoose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">></span></span> servers<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> ip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> servers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> servers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> host <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">)</span> ip<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> server<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author wangdengwu\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SameIpLoadBalancerClientFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LoadBalancerClientFilter</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxx.same.ip.enable&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Boolean</span> enableSameIp <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SameIpLoadBalancerClientFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoadBalancerClient</span> loadBalancer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LoadBalancerProperties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>loadBalancer<span class=\"token punctuation\">,</span> properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//是否开启same ip策略</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>enableSameIp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//获取浏览器访问者IP</span>\n        <span class=\"token class-name\">String</span> ip <span class=\"token operator\">=</span> <span class=\"token function\">getRealIp</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> serviceIp <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serviceIp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//强制指定IP优先级最高</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serviceIp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> serviceIp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadBalancer <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RibbonLoadBalancerClient</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">RibbonLoadBalancerClient</span> client <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RibbonLoadBalancerClient</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadBalancer<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> serviceId <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>URI<span class=\"token punctuation\">)</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span>GATEWAY_REQUEST_URL_ATTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//这里使用ip做为选择服务实例的key</span>\n            <span class=\"token keyword\">return</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>serviceId<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRealIp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerHttpRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 这个一般是Nginx反向代理设置的参数</span>\n        <span class=\"token class-name\">String</span> ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Real-IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Forwarded-For\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Proxy-Client-IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WL-Proxy-Client-IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHostAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 处理多IP的情况（只取第一个IP）</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ip <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ipArray <span class=\"token operator\">=</span> ip<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ip <span class=\"token operator\">=</span> ipArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ip<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，代码完成了需求。</p>\n<p>这里只是gateway实现了自定义路由的功能，其实还有一个地方遗漏了，那就是服务之间使用@FeignClient调用的时候，这块如何实现同源IP功能，就留给你去思考了。</p>\n"},{"title":"领域驱动设计简介","date":"2021-10-26T11:00:11.000Z","author":"王登武","_content":"# 领域驱动设计\n### 代码开发的思考\n以下开发方法区别是什么？\n* 面向过程开发\n* 面向对象开发\n* 面向CV(ctrl-c&ctrl-v)开发\n* 面向百度开发\n* 面向数据库开发\n\n### 什么是技术债\n技术债就像技术前进中的累赘一样，会像滚雪球那样越滚越大，不断拖延增加新功能的步伐，最终可能无法再为系统添加新功能。因此，技术负债的存在是导致软件质量下降的重要原因。软件质量下降以后，系统难以维护和修复，就会导致项目失败或者必须重写代码\n\n### 你真的在面向对象开发吗？\n* JavaBean它真的好用吗？\n* DTO为什么无处不在？\n* MVC思想的滥用\n* 用着面向对象的语言，做着面向过程的开发\n现在大部分对业务逻辑的处理，都是通过Controller到Service，再通过Dao组装操作到持久层数据库，而这其实是典型的面向过程的开发，中间只是数据的传递和组装修改。\n而现在流行的微服务架构，如果不能很好的拆分出领域实体，确定好领域边界，只不过是增加了复杂度的单体应用而已。\n领域驱动设计的思想，回归到面向对象的本质，封装，抽象上面来，虽然设计模式可以解决一部分场景问题，但是领域驱动设计更像**重剑无锋，大巧不工**。\n\n### 领域驱动为什么没有流行起来\n我个人结合对领域驱动的理解和认识之后，总结为领域驱动早期引入的时候，翻译的名词太理论化，导致太抽象不接地气，下面我们就看看这些专有名词有多不接地气。\n### 领域驱动名词概念\n主要的概念如下：\n* 有界上下文\n* 领域事件\n* 聚合\n* 聚合根\n* 实体\n* 值对象\n\n\n### 事件风暴\n事件风暴是领域驱动很好的介入点，说人话就是需求讨论阶段，具体领域驱动这块的最佳实践就是需求讨论从事件入手，所谓事件就是业务内的动词，事件风暴从动词事件入手，虽然很繁琐，但是这些事件正是日后需要实现的功能激发的。事件离需求功能更接近，对领域事件进行分门别类，可以发现有界上下文和聚合。有界上下文就是指不同业务之间的边界，包括可能的数据传递和交互，而聚合是指业务的核心内容是什么。\nDDD分析方法的核心：从细节动词入手发现有界上下文和聚合，以逻辑一致性为边界划分依据，对动作实现分门别类地划分。\n### 领域事件\n为什么是动作或事件？因为行为即类的方法，以方法聚合，即基于接口编程，才是高内聚松耦合的关键，又根据封装的特性，应该只暴露方法，而不应该暴露数据。所以，解决复杂性的两种方法是：拆解成松耦合的组件+使用容易让人明白的套路表达出来。\nDDD是怎么实现这两种方法的呢？首先，DDD通过引入“领域或子域”以及“有界上下文”来划分边界，边界一旦划分好，拆解的第一步就能完成；其次，DDD引入各种模式名词，比如聚合、实体、值对象、工厂、仓储、领域事件，让知晓这些模式的人能够一下子定位到功能对应的组件。\n### 举个栗子\n下面以某电力公司的电费结算领域为案例，说明如何通过组织的形式进行有界上下文的边界发现和划分。\n首先需要了解一下领域知识、业务策略或业务规则。电力公司是干什么的? 它是电力这个商品的批发商，从发电企业购买电力，通过电网输送到用电用户，再向用电用户收取电费。其商业模式很简单，它的信息系统主要是管理金钱的进出，在上下游差价和巨额资金截流中赚取利润，这应该是其核心业务策略。\n该业务策略落实到业务流程，就体现在部门组织设置上。营销部负责面向供电用户销售电力和收取电费，交易中心负责向电厂集中购电，财务部门则是对购销双方进行统一资金结算。不同部门负责不同的领域，现在可以根据这种原则划分三种有界上下文∶ 购电上下文;销电上下文和结算上下文，同时将参与开发的团队也相应地划分成三个团队。\n### 子域\n* 核心子域(核心业务）\n* 支持子域(周边可以外包的业务)\n* 通用子域(基础支持如财务系统可以购买的系统)\n\n### 聚合\n**聚合是子域内的类集合以及类关系集合。**\n**聚合是一个行为在逻辑上高度一致的对象群。**\n注意，它是一个对象群体的总称。聚合的内部结构如同一棵树，每个聚合都有一个根，其他对象和聚合根之间都是枝叶与树根的有序关系。\n**有序的复杂，虽然也复杂，但是可以被理解，无序的复杂，不仅仅复杂，最重要的是不能被轻易理解。**\n这样有序化的好处是∶只有\"根\"能引用或指向其他对象，\"根\"自身不能被其他任何对象引用;\"根\"类似团队的小组长，队员都要向其汇报工作。这就是聚合根的设计来源，聚合根拥有自己边界内的数据所有权，以及行为职责的管理权限。\n数据和行为两者兼顾的所有权只有聚合才能具有，为什么需要数据和行为两者兼顾呢?通常情况下，数据和行为是分离的，行为在服务中实现，而数据隔离在数据表中，行为通过服务转为SQL语句去操作数据表，这种方式的问题是隔离了行为和数据的紧密逻辑关系。\n找出聚合和组合关联的类，组成树状类图，舍弃普通关联，这就是高内聚低关联的设计原则。\n**聚合是体现逻辑一致性的地方，也是保证业务规则实现的地方。**\n### 失血和充血\n在没有设计的朴素情况下，领域模型一般是一个数据对象（DTO等），其中只有setter/getter方法，是一种纯粹的数据结构，然后将很多数据结构的算法操作设计在服务（Service）等专门的接口类中。这样，数据对象作为服务接口方法的参数传入，在服务的方法中被加工。\n所以说如果没有领域驱动设计的思想，即便是架构上是微服务的，服务内部也可能是只是面向过程的开发，只不过是service组装修改DTO，最终持久化而已。\n区分开失血模型和贫血模型，有助于认识到数据库中的实体表其实是一种失血模型、一种纯数据结构;通过ORM等工具映射到Javabean，也是一种只有setter/ getter的失血模型，这些实体模型并不是 DDD中的实体。下面看看DDD中的实体是什么。\n### 实体\n**具有唯一标识的聚合即实体**\n能够将复杂事情简单化，但是实体和聚合的表现形式太相似了。其实这是从两个不同角度看问题的结果，聚合是从实体外部看实体的上下文环境，需要在这个场景上下文扮演的角色来定位，而实体本身的内部设计，包括标识和其他属性、职责以及关联属于事物内部的构造设计。实体的设计不只要照顾到所处上下文，还要兼顾它被创建后的生命周期管理，实体的类名负责它在上下文中的定位，而实体的标识负责它被创建后的生命。\n实体的构建往往需要builder模式\n思考题：为什么需要使用builder模式？\n### 值对象\n值对象：没有唯一标识的对象，是一堆数据值的容器。如VO对象，具有不变性\n首先，值对象中的数据值一旦被构建，就不能改变，这是不变性的特性，而 DTO没有这种约束，这容易导致DTO传输过程中不断添加、修改各种字段。 DTO变成一个装载数据的可变长度的容器，虽然给编程带来了方便，但是将可变性带到代码的各个地方，最后DTO进数据库存储时，才发现数据并不是原来想象的那样，至于在哪个环节修改了，就需要不断地跟踪，这种跟踪在复杂软件中也非常复杂。","source":"_posts/领域驱动设计简介.md","raw":"---\ntitle: 领域驱动设计简介\ndate: 2021-10-26 19:00:11\nauthor: 王登武\ncategories: 程序设计\ntags:\n  - DDD\n  - 领域驱动\n---\n# 领域驱动设计\n### 代码开发的思考\n以下开发方法区别是什么？\n* 面向过程开发\n* 面向对象开发\n* 面向CV(ctrl-c&ctrl-v)开发\n* 面向百度开发\n* 面向数据库开发\n\n### 什么是技术债\n技术债就像技术前进中的累赘一样，会像滚雪球那样越滚越大，不断拖延增加新功能的步伐，最终可能无法再为系统添加新功能。因此，技术负债的存在是导致软件质量下降的重要原因。软件质量下降以后，系统难以维护和修复，就会导致项目失败或者必须重写代码\n\n### 你真的在面向对象开发吗？\n* JavaBean它真的好用吗？\n* DTO为什么无处不在？\n* MVC思想的滥用\n* 用着面向对象的语言，做着面向过程的开发\n现在大部分对业务逻辑的处理，都是通过Controller到Service，再通过Dao组装操作到持久层数据库，而这其实是典型的面向过程的开发，中间只是数据的传递和组装修改。\n而现在流行的微服务架构，如果不能很好的拆分出领域实体，确定好领域边界，只不过是增加了复杂度的单体应用而已。\n领域驱动设计的思想，回归到面向对象的本质，封装，抽象上面来，虽然设计模式可以解决一部分场景问题，但是领域驱动设计更像**重剑无锋，大巧不工**。\n\n### 领域驱动为什么没有流行起来\n我个人结合对领域驱动的理解和认识之后，总结为领域驱动早期引入的时候，翻译的名词太理论化，导致太抽象不接地气，下面我们就看看这些专有名词有多不接地气。\n### 领域驱动名词概念\n主要的概念如下：\n* 有界上下文\n* 领域事件\n* 聚合\n* 聚合根\n* 实体\n* 值对象\n\n\n### 事件风暴\n事件风暴是领域驱动很好的介入点，说人话就是需求讨论阶段，具体领域驱动这块的最佳实践就是需求讨论从事件入手，所谓事件就是业务内的动词，事件风暴从动词事件入手，虽然很繁琐，但是这些事件正是日后需要实现的功能激发的。事件离需求功能更接近，对领域事件进行分门别类，可以发现有界上下文和聚合。有界上下文就是指不同业务之间的边界，包括可能的数据传递和交互，而聚合是指业务的核心内容是什么。\nDDD分析方法的核心：从细节动词入手发现有界上下文和聚合，以逻辑一致性为边界划分依据，对动作实现分门别类地划分。\n### 领域事件\n为什么是动作或事件？因为行为即类的方法，以方法聚合，即基于接口编程，才是高内聚松耦合的关键，又根据封装的特性，应该只暴露方法，而不应该暴露数据。所以，解决复杂性的两种方法是：拆解成松耦合的组件+使用容易让人明白的套路表达出来。\nDDD是怎么实现这两种方法的呢？首先，DDD通过引入“领域或子域”以及“有界上下文”来划分边界，边界一旦划分好，拆解的第一步就能完成；其次，DDD引入各种模式名词，比如聚合、实体、值对象、工厂、仓储、领域事件，让知晓这些模式的人能够一下子定位到功能对应的组件。\n### 举个栗子\n下面以某电力公司的电费结算领域为案例，说明如何通过组织的形式进行有界上下文的边界发现和划分。\n首先需要了解一下领域知识、业务策略或业务规则。电力公司是干什么的? 它是电力这个商品的批发商，从发电企业购买电力，通过电网输送到用电用户，再向用电用户收取电费。其商业模式很简单，它的信息系统主要是管理金钱的进出，在上下游差价和巨额资金截流中赚取利润，这应该是其核心业务策略。\n该业务策略落实到业务流程，就体现在部门组织设置上。营销部负责面向供电用户销售电力和收取电费，交易中心负责向电厂集中购电，财务部门则是对购销双方进行统一资金结算。不同部门负责不同的领域，现在可以根据这种原则划分三种有界上下文∶ 购电上下文;销电上下文和结算上下文，同时将参与开发的团队也相应地划分成三个团队。\n### 子域\n* 核心子域(核心业务）\n* 支持子域(周边可以外包的业务)\n* 通用子域(基础支持如财务系统可以购买的系统)\n\n### 聚合\n**聚合是子域内的类集合以及类关系集合。**\n**聚合是一个行为在逻辑上高度一致的对象群。**\n注意，它是一个对象群体的总称。聚合的内部结构如同一棵树，每个聚合都有一个根，其他对象和聚合根之间都是枝叶与树根的有序关系。\n**有序的复杂，虽然也复杂，但是可以被理解，无序的复杂，不仅仅复杂，最重要的是不能被轻易理解。**\n这样有序化的好处是∶只有\"根\"能引用或指向其他对象，\"根\"自身不能被其他任何对象引用;\"根\"类似团队的小组长，队员都要向其汇报工作。这就是聚合根的设计来源，聚合根拥有自己边界内的数据所有权，以及行为职责的管理权限。\n数据和行为两者兼顾的所有权只有聚合才能具有，为什么需要数据和行为两者兼顾呢?通常情况下，数据和行为是分离的，行为在服务中实现，而数据隔离在数据表中，行为通过服务转为SQL语句去操作数据表，这种方式的问题是隔离了行为和数据的紧密逻辑关系。\n找出聚合和组合关联的类，组成树状类图，舍弃普通关联，这就是高内聚低关联的设计原则。\n**聚合是体现逻辑一致性的地方，也是保证业务规则实现的地方。**\n### 失血和充血\n在没有设计的朴素情况下，领域模型一般是一个数据对象（DTO等），其中只有setter/getter方法，是一种纯粹的数据结构，然后将很多数据结构的算法操作设计在服务（Service）等专门的接口类中。这样，数据对象作为服务接口方法的参数传入，在服务的方法中被加工。\n所以说如果没有领域驱动设计的思想，即便是架构上是微服务的，服务内部也可能是只是面向过程的开发，只不过是service组装修改DTO，最终持久化而已。\n区分开失血模型和贫血模型，有助于认识到数据库中的实体表其实是一种失血模型、一种纯数据结构;通过ORM等工具映射到Javabean，也是一种只有setter/ getter的失血模型，这些实体模型并不是 DDD中的实体。下面看看DDD中的实体是什么。\n### 实体\n**具有唯一标识的聚合即实体**\n能够将复杂事情简单化，但是实体和聚合的表现形式太相似了。其实这是从两个不同角度看问题的结果，聚合是从实体外部看实体的上下文环境，需要在这个场景上下文扮演的角色来定位，而实体本身的内部设计，包括标识和其他属性、职责以及关联属于事物内部的构造设计。实体的设计不只要照顾到所处上下文，还要兼顾它被创建后的生命周期管理，实体的类名负责它在上下文中的定位，而实体的标识负责它被创建后的生命。\n实体的构建往往需要builder模式\n思考题：为什么需要使用builder模式？\n### 值对象\n值对象：没有唯一标识的对象，是一堆数据值的容器。如VO对象，具有不变性\n首先，值对象中的数据值一旦被构建，就不能改变，这是不变性的特性，而 DTO没有这种约束，这容易导致DTO传输过程中不断添加、修改各种字段。 DTO变成一个装载数据的可变长度的容器，虽然给编程带来了方便，但是将可变性带到代码的各个地方，最后DTO进数据库存储时，才发现数据并不是原来想象的那样，至于在哪个环节修改了，就需要不断地跟踪，这种跟踪在复杂软件中也非常复杂。","slug":"领域驱动设计简介","published":1,"updated":"2021-10-26T11:01:43.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7zhjms000cfa9gcq2m316i","content":"<h1 id=\"领域驱动设计\"><a href=\"#领域驱动设计\" class=\"headerlink\" title=\"领域驱动设计\"></a>领域驱动设计</h1><h3 id=\"代码开发的思考\"><a href=\"#代码开发的思考\" class=\"headerlink\" title=\"代码开发的思考\"></a>代码开发的思考</h3><p>以下开发方法区别是什么？</p>\n<ul>\n<li>面向过程开发</li>\n<li>面向对象开发</li>\n<li>面向CV(ctrl-c&amp;ctrl-v)开发</li>\n<li>面向百度开发</li>\n<li>面向数据库开发</li>\n</ul>\n<h3 id=\"什么是技术债\"><a href=\"#什么是技术债\" class=\"headerlink\" title=\"什么是技术债\"></a>什么是技术债</h3><p>技术债就像技术前进中的累赘一样，会像滚雪球那样越滚越大，不断拖延增加新功能的步伐，最终可能无法再为系统添加新功能。因此，技术负债的存在是导致软件质量下降的重要原因。软件质量下降以后，系统难以维护和修复，就会导致项目失败或者必须重写代码</p>\n<h3 id=\"你真的在面向对象开发吗？\"><a href=\"#你真的在面向对象开发吗？\" class=\"headerlink\" title=\"你真的在面向对象开发吗？\"></a>你真的在面向对象开发吗？</h3><ul>\n<li>JavaBean它真的好用吗？</li>\n<li>DTO为什么无处不在？</li>\n<li>MVC思想的滥用</li>\n<li>用着面向对象的语言，做着面向过程的开发<br>现在大部分对业务逻辑的处理，都是通过Controller到Service，再通过Dao组装操作到持久层数据库，而这其实是典型的面向过程的开发，中间只是数据的传递和组装修改。<br>而现在流行的微服务架构，如果不能很好的拆分出领域实体，确定好领域边界，只不过是增加了复杂度的单体应用而已。<br>领域驱动设计的思想，回归到面向对象的本质，封装，抽象上面来，虽然设计模式可以解决一部分场景问题，但是领域驱动设计更像<strong>重剑无锋，大巧不工</strong>。</li>\n</ul>\n<h3 id=\"领域驱动为什么没有流行起来\"><a href=\"#领域驱动为什么没有流行起来\" class=\"headerlink\" title=\"领域驱动为什么没有流行起来\"></a>领域驱动为什么没有流行起来</h3><p>我个人结合对领域驱动的理解和认识之后，总结为领域驱动早期引入的时候，翻译的名词太理论化，导致太抽象不接地气，下面我们就看看这些专有名词有多不接地气。</p>\n<h3 id=\"领域驱动名词概念\"><a href=\"#领域驱动名词概念\" class=\"headerlink\" title=\"领域驱动名词概念\"></a>领域驱动名词概念</h3><p>主要的概念如下：</p>\n<ul>\n<li>有界上下文</li>\n<li>领域事件</li>\n<li>聚合</li>\n<li>聚合根</li>\n<li>实体</li>\n<li>值对象</li>\n</ul>\n<h3 id=\"事件风暴\"><a href=\"#事件风暴\" class=\"headerlink\" title=\"事件风暴\"></a>事件风暴</h3><p>事件风暴是领域驱动很好的介入点，说人话就是需求讨论阶段，具体领域驱动这块的最佳实践就是需求讨论从事件入手，所谓事件就是业务内的动词，事件风暴从动词事件入手，虽然很繁琐，但是这些事件正是日后需要实现的功能激发的。事件离需求功能更接近，对领域事件进行分门别类，可以发现有界上下文和聚合。有界上下文就是指不同业务之间的边界，包括可能的数据传递和交互，而聚合是指业务的核心内容是什么。<br>DDD分析方法的核心：从细节动词入手发现有界上下文和聚合，以逻辑一致性为边界划分依据，对动作实现分门别类地划分。</p>\n<h3 id=\"领域事件\"><a href=\"#领域事件\" class=\"headerlink\" title=\"领域事件\"></a>领域事件</h3><p>为什么是动作或事件？因为行为即类的方法，以方法聚合，即基于接口编程，才是高内聚松耦合的关键，又根据封装的特性，应该只暴露方法，而不应该暴露数据。所以，解决复杂性的两种方法是：拆解成松耦合的组件+使用容易让人明白的套路表达出来。<br>DDD是怎么实现这两种方法的呢？首先，DDD通过引入“领域或子域”以及“有界上下文”来划分边界，边界一旦划分好，拆解的第一步就能完成；其次，DDD引入各种模式名词，比如聚合、实体、值对象、工厂、仓储、领域事件，让知晓这些模式的人能够一下子定位到功能对应的组件。</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><p>下面以某电力公司的电费结算领域为案例，说明如何通过组织的形式进行有界上下文的边界发现和划分。<br>首先需要了解一下领域知识、业务策略或业务规则。电力公司是干什么的? 它是电力这个商品的批发商，从发电企业购买电力，通过电网输送到用电用户，再向用电用户收取电费。其商业模式很简单，它的信息系统主要是管理金钱的进出，在上下游差价和巨额资金截流中赚取利润，这应该是其核心业务策略。<br>该业务策略落实到业务流程，就体现在部门组织设置上。营销部负责面向供电用户销售电力和收取电费，交易中心负责向电厂集中购电，财务部门则是对购销双方进行统一资金结算。不同部门负责不同的领域，现在可以根据这种原则划分三种有界上下文∶ 购电上下文;销电上下文和结算上下文，同时将参与开发的团队也相应地划分成三个团队。</p>\n<h3 id=\"子域\"><a href=\"#子域\" class=\"headerlink\" title=\"子域\"></a>子域</h3><ul>\n<li>核心子域(核心业务）</li>\n<li>支持子域(周边可以外包的业务)</li>\n<li>通用子域(基础支持如财务系统可以购买的系统)</li>\n</ul>\n<h3 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h3><p><strong>聚合是子域内的类集合以及类关系集合。</strong><br><strong>聚合是一个行为在逻辑上高度一致的对象群。</strong><br>注意，它是一个对象群体的总称。聚合的内部结构如同一棵树，每个聚合都有一个根，其他对象和聚合根之间都是枝叶与树根的有序关系。<br><strong>有序的复杂，虽然也复杂，但是可以被理解，无序的复杂，不仅仅复杂，最重要的是不能被轻易理解。</strong><br>这样有序化的好处是∶只有”根”能引用或指向其他对象，”根”自身不能被其他任何对象引用;”根”类似团队的小组长，队员都要向其汇报工作。这就是聚合根的设计来源，聚合根拥有自己边界内的数据所有权，以及行为职责的管理权限。<br>数据和行为两者兼顾的所有权只有聚合才能具有，为什么需要数据和行为两者兼顾呢?通常情况下，数据和行为是分离的，行为在服务中实现，而数据隔离在数据表中，行为通过服务转为SQL语句去操作数据表，这种方式的问题是隔离了行为和数据的紧密逻辑关系。<br>找出聚合和组合关联的类，组成树状类图，舍弃普通关联，这就是高内聚低关联的设计原则。<br><strong>聚合是体现逻辑一致性的地方，也是保证业务规则实现的地方。</strong></p>\n<h3 id=\"失血和充血\"><a href=\"#失血和充血\" class=\"headerlink\" title=\"失血和充血\"></a>失血和充血</h3><p>在没有设计的朴素情况下，领域模型一般是一个数据对象（DTO等），其中只有setter/getter方法，是一种纯粹的数据结构，然后将很多数据结构的算法操作设计在服务（Service）等专门的接口类中。这样，数据对象作为服务接口方法的参数传入，在服务的方法中被加工。<br>所以说如果没有领域驱动设计的思想，即便是架构上是微服务的，服务内部也可能是只是面向过程的开发，只不过是service组装修改DTO，最终持久化而已。<br>区分开失血模型和贫血模型，有助于认识到数据库中的实体表其实是一种失血模型、一种纯数据结构;通过ORM等工具映射到Javabean，也是一种只有setter/ getter的失血模型，这些实体模型并不是 DDD中的实体。下面看看DDD中的实体是什么。</p>\n<h3 id=\"实体\"><a href=\"#实体\" class=\"headerlink\" title=\"实体\"></a>实体</h3><p><strong>具有唯一标识的聚合即实体</strong><br>能够将复杂事情简单化，但是实体和聚合的表现形式太相似了。其实这是从两个不同角度看问题的结果，聚合是从实体外部看实体的上下文环境，需要在这个场景上下文扮演的角色来定位，而实体本身的内部设计，包括标识和其他属性、职责以及关联属于事物内部的构造设计。实体的设计不只要照顾到所处上下文，还要兼顾它被创建后的生命周期管理，实体的类名负责它在上下文中的定位，而实体的标识负责它被创建后的生命。<br>实体的构建往往需要builder模式<br>思考题：为什么需要使用builder模式？</p>\n<h3 id=\"值对象\"><a href=\"#值对象\" class=\"headerlink\" title=\"值对象\"></a>值对象</h3><p>值对象：没有唯一标识的对象，是一堆数据值的容器。如VO对象，具有不变性<br>首先，值对象中的数据值一旦被构建，就不能改变，这是不变性的特性，而 DTO没有这种约束，这容易导致DTO传输过程中不断添加、修改各种字段。 DTO变成一个装载数据的可变长度的容器，虽然给编程带来了方便，但是将可变性带到代码的各个地方，最后DTO进数据库存储时，才发现数据并不是原来想象的那样，至于在哪个环节修改了，就需要不断地跟踪，这种跟踪在复杂软件中也非常复杂。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"领域驱动设计\"><a href=\"#领域驱动设计\" class=\"headerlink\" title=\"领域驱动设计\"></a>领域驱动设计</h1><h3 id=\"代码开发的思考\"><a href=\"#代码开发的思考\" class=\"headerlink\" title=\"代码开发的思考\"></a>代码开发的思考</h3><p>以下开发方法区别是什么？</p>\n<ul>\n<li>面向过程开发</li>\n<li>面向对象开发</li>\n<li>面向CV(ctrl-c&amp;ctrl-v)开发</li>\n<li>面向百度开发</li>\n<li>面向数据库开发</li>\n</ul>\n<h3 id=\"什么是技术债\"><a href=\"#什么是技术债\" class=\"headerlink\" title=\"什么是技术债\"></a>什么是技术债</h3><p>技术债就像技术前进中的累赘一样，会像滚雪球那样越滚越大，不断拖延增加新功能的步伐，最终可能无法再为系统添加新功能。因此，技术负债的存在是导致软件质量下降的重要原因。软件质量下降以后，系统难以维护和修复，就会导致项目失败或者必须重写代码</p>\n<h3 id=\"你真的在面向对象开发吗？\"><a href=\"#你真的在面向对象开发吗？\" class=\"headerlink\" title=\"你真的在面向对象开发吗？\"></a>你真的在面向对象开发吗？</h3><ul>\n<li>JavaBean它真的好用吗？</li>\n<li>DTO为什么无处不在？</li>\n<li>MVC思想的滥用</li>\n<li>用着面向对象的语言，做着面向过程的开发<br>现在大部分对业务逻辑的处理，都是通过Controller到Service，再通过Dao组装操作到持久层数据库，而这其实是典型的面向过程的开发，中间只是数据的传递和组装修改。<br>而现在流行的微服务架构，如果不能很好的拆分出领域实体，确定好领域边界，只不过是增加了复杂度的单体应用而已。<br>领域驱动设计的思想，回归到面向对象的本质，封装，抽象上面来，虽然设计模式可以解决一部分场景问题，但是领域驱动设计更像<strong>重剑无锋，大巧不工</strong>。</li>\n</ul>\n<h3 id=\"领域驱动为什么没有流行起来\"><a href=\"#领域驱动为什么没有流行起来\" class=\"headerlink\" title=\"领域驱动为什么没有流行起来\"></a>领域驱动为什么没有流行起来</h3><p>我个人结合对领域驱动的理解和认识之后，总结为领域驱动早期引入的时候，翻译的名词太理论化，导致太抽象不接地气，下面我们就看看这些专有名词有多不接地气。</p>\n<h3 id=\"领域驱动名词概念\"><a href=\"#领域驱动名词概念\" class=\"headerlink\" title=\"领域驱动名词概念\"></a>领域驱动名词概念</h3><p>主要的概念如下：</p>\n<ul>\n<li>有界上下文</li>\n<li>领域事件</li>\n<li>聚合</li>\n<li>聚合根</li>\n<li>实体</li>\n<li>值对象</li>\n</ul>\n<h3 id=\"事件风暴\"><a href=\"#事件风暴\" class=\"headerlink\" title=\"事件风暴\"></a>事件风暴</h3><p>事件风暴是领域驱动很好的介入点，说人话就是需求讨论阶段，具体领域驱动这块的最佳实践就是需求讨论从事件入手，所谓事件就是业务内的动词，事件风暴从动词事件入手，虽然很繁琐，但是这些事件正是日后需要实现的功能激发的。事件离需求功能更接近，对领域事件进行分门别类，可以发现有界上下文和聚合。有界上下文就是指不同业务之间的边界，包括可能的数据传递和交互，而聚合是指业务的核心内容是什么。<br>DDD分析方法的核心：从细节动词入手发现有界上下文和聚合，以逻辑一致性为边界划分依据，对动作实现分门别类地划分。</p>\n<h3 id=\"领域事件\"><a href=\"#领域事件\" class=\"headerlink\" title=\"领域事件\"></a>领域事件</h3><p>为什么是动作或事件？因为行为即类的方法，以方法聚合，即基于接口编程，才是高内聚松耦合的关键，又根据封装的特性，应该只暴露方法，而不应该暴露数据。所以，解决复杂性的两种方法是：拆解成松耦合的组件+使用容易让人明白的套路表达出来。<br>DDD是怎么实现这两种方法的呢？首先，DDD通过引入“领域或子域”以及“有界上下文”来划分边界，边界一旦划分好，拆解的第一步就能完成；其次，DDD引入各种模式名词，比如聚合、实体、值对象、工厂、仓储、领域事件，让知晓这些模式的人能够一下子定位到功能对应的组件。</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><p>下面以某电力公司的电费结算领域为案例，说明如何通过组织的形式进行有界上下文的边界发现和划分。<br>首先需要了解一下领域知识、业务策略或业务规则。电力公司是干什么的? 它是电力这个商品的批发商，从发电企业购买电力，通过电网输送到用电用户，再向用电用户收取电费。其商业模式很简单，它的信息系统主要是管理金钱的进出，在上下游差价和巨额资金截流中赚取利润，这应该是其核心业务策略。<br>该业务策略落实到业务流程，就体现在部门组织设置上。营销部负责面向供电用户销售电力和收取电费，交易中心负责向电厂集中购电，财务部门则是对购销双方进行统一资金结算。不同部门负责不同的领域，现在可以根据这种原则划分三种有界上下文∶ 购电上下文;销电上下文和结算上下文，同时将参与开发的团队也相应地划分成三个团队。</p>\n<h3 id=\"子域\"><a href=\"#子域\" class=\"headerlink\" title=\"子域\"></a>子域</h3><ul>\n<li>核心子域(核心业务）</li>\n<li>支持子域(周边可以外包的业务)</li>\n<li>通用子域(基础支持如财务系统可以购买的系统)</li>\n</ul>\n<h3 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h3><p><strong>聚合是子域内的类集合以及类关系集合。</strong><br><strong>聚合是一个行为在逻辑上高度一致的对象群。</strong><br>注意，它是一个对象群体的总称。聚合的内部结构如同一棵树，每个聚合都有一个根，其他对象和聚合根之间都是枝叶与树根的有序关系。<br><strong>有序的复杂，虽然也复杂，但是可以被理解，无序的复杂，不仅仅复杂，最重要的是不能被轻易理解。</strong><br>这样有序化的好处是∶只有”根”能引用或指向其他对象，”根”自身不能被其他任何对象引用;”根”类似团队的小组长，队员都要向其汇报工作。这就是聚合根的设计来源，聚合根拥有自己边界内的数据所有权，以及行为职责的管理权限。<br>数据和行为两者兼顾的所有权只有聚合才能具有，为什么需要数据和行为两者兼顾呢?通常情况下，数据和行为是分离的，行为在服务中实现，而数据隔离在数据表中，行为通过服务转为SQL语句去操作数据表，这种方式的问题是隔离了行为和数据的紧密逻辑关系。<br>找出聚合和组合关联的类，组成树状类图，舍弃普通关联，这就是高内聚低关联的设计原则。<br><strong>聚合是体现逻辑一致性的地方，也是保证业务规则实现的地方。</strong></p>\n<h3 id=\"失血和充血\"><a href=\"#失血和充血\" class=\"headerlink\" title=\"失血和充血\"></a>失血和充血</h3><p>在没有设计的朴素情况下，领域模型一般是一个数据对象（DTO等），其中只有setter/getter方法，是一种纯粹的数据结构，然后将很多数据结构的算法操作设计在服务（Service）等专门的接口类中。这样，数据对象作为服务接口方法的参数传入，在服务的方法中被加工。<br>所以说如果没有领域驱动设计的思想，即便是架构上是微服务的，服务内部也可能是只是面向过程的开发，只不过是service组装修改DTO，最终持久化而已。<br>区分开失血模型和贫血模型，有助于认识到数据库中的实体表其实是一种失血模型、一种纯数据结构;通过ORM等工具映射到Javabean，也是一种只有setter/ getter的失血模型，这些实体模型并不是 DDD中的实体。下面看看DDD中的实体是什么。</p>\n<h3 id=\"实体\"><a href=\"#实体\" class=\"headerlink\" title=\"实体\"></a>实体</h3><p><strong>具有唯一标识的聚合即实体</strong><br>能够将复杂事情简单化，但是实体和聚合的表现形式太相似了。其实这是从两个不同角度看问题的结果，聚合是从实体外部看实体的上下文环境，需要在这个场景上下文扮演的角色来定位，而实体本身的内部设计，包括标识和其他属性、职责以及关联属于事物内部的构造设计。实体的设计不只要照顾到所处上下文，还要兼顾它被创建后的生命周期管理，实体的类名负责它在上下文中的定位，而实体的标识负责它被创建后的生命。<br>实体的构建往往需要builder模式<br>思考题：为什么需要使用builder模式？</p>\n<h3 id=\"值对象\"><a href=\"#值对象\" class=\"headerlink\" title=\"值对象\"></a>值对象</h3><p>值对象：没有唯一标识的对象，是一堆数据值的容器。如VO对象，具有不变性<br>首先，值对象中的数据值一旦被构建，就不能改变，这是不变性的特性，而 DTO没有这种约束，这容易导致DTO传输过程中不断添加、修改各种字段。 DTO变成一个装载数据的可变长度的容器，虽然给编程带来了方便，但是将可变性带到代码的各个地方，最后DTO进数据库存储时，才发现数据并不是原来想象的那样，至于在哪个环节修改了，就需要不断地跟踪，这种跟踪在复杂软件中也非常复杂。</p>\n"},{"title":"Docker简介","author":"王登武","date":"2021-11-01T06:52:31.000Z","_content":"## docker简介\ndocker是一种虚拟化技术，但是和虚拟机又不一样，比较轻量级，最大的好处就是隔离底层硬件和软件的区别，然后让软件跑在统一的环境下，而减少因为底层软硬件环境的问题，导致的软件出错和不一致性。\n\ndocker使用容器这一概念来实现，在一台机器上可以运行多个隔离的容器，每个容器内包含运行所需的所有内容，包括操作系统和底层依赖，例如：容器包括centos7的操作系统，并且含有jdk1.8的底层依赖，然后就可以分享容器，其他人只需要获取到容器，就可以直接运行你的代码，而且所有人的环境都是一样的。\n\n我们可以用docker来快速分享开发环境，也可以用于生产环境快速扩容，因为环境都是一致的，并且docker获取和运行容器非常快速。而我主要使用docker来隔离本地环境，不想因为尝试某种技术，而污染本地的开发环境，又可以快速分享这种演示环境。后续如果可以使用docker来分发开发环境，我将使用docker，除非是docker无法支持的环境，如Mac特有的xcode打包等，不过目前看这种极特殊的情况很少发生。\n\n## docker架构\n![](https://docs.docker.com/engine/images/architecture.svg)\ndocker采用的是client-server架构，client（docker）和daemon（dockerd）通讯，client和daemon可以是在同一台机器上，也可以远程访问另外一台机器的daemon，其通讯采用的是rest-api方式。\ndaemon主要负责监听API请求，并管理镜像，容器，网络，存储等。\nclient则比较轻量一点，主要负责发送命令，比如docker run等\n另外镜像还可以被注册和分享，通过Docker Hub可以找到很多公共镜像，从而达到快速构建容器的目的。\n\n## 镜像\n镜像是创建容器所需的指令模板，只读，通常一个镜像可能基于另外一个镜像，做一些自己的增强，比如基于Ubuntu的系统镜像，做一些安装和配置Nginx的指令。我们可以使用Dockerfile来定义这些步骤命令，通过这个文件就可以build出镜像文件，并且分享。\n## 容器\n容器就是运行镜像的实例，你可以create，start，stop，move，delete镜像，你可以远程链接到该镜像，给它分配存储，甚至创建一个新的镜像基于容器当前的状态。容器彼此之间都是隔离的。\n\n``` bash\ndocker run -i -t ubuntu /bin/bash\n```\n当你在命令行敲了上面的代码，执行过程如下：\n1. 如果你本地没有Ubuntu的镜像，则向注册中心请求该镜像文件，就像你手动执行了`docker pull ubuntu`一样。\n2. 创建新的容器，就像你手动执行`docker container create`一样。\n3. 分配可读写文件给容器，作为它的最后一层，这样允许容器被可控的修改，阻止了对于镜像其它可能的修改，即安全又便捷。\n4. 创建默认的网络接口，如果你没有自定义的话，将分配本地IP给容器，并且默认具有通过本地机器访问外部网络的能力。\n5. 容器启动，并且执行`/bin/bash`,可以和容器进行交互，因为使用了-i和-t的选项。\n6. 当你使用exit退出时，容器将停止，但是没有被删除，你还可以start或者remove。\n\n## docker安装\n我们安装docker桌面版，因为有图形化界面，可以更直观\n安装地址为[docker桌面版](https://docs.docker.com/desktop/),选择自己对应的操作系统，比如Windows还是Mac\n具体安装步骤就不详细说明了，Windows需要注意开启主板的虚拟设置，Mac需要选择Intel芯片还是M1芯片的安装文件。\n安装完界面如下：![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211101164658.png)\n\n后续一些需要分享开发环境的，都将采用docker的镜像分享，以方便快速统一环境。\n","source":"_posts/Docker简介.md","raw":"---\ntitle: Docker简介\nauthor: 王登武\ndate: 2021-11-01 14:52:31\ncategories: docker\ntags:\n  - docker\n---\n## docker简介\ndocker是一种虚拟化技术，但是和虚拟机又不一样，比较轻量级，最大的好处就是隔离底层硬件和软件的区别，然后让软件跑在统一的环境下，而减少因为底层软硬件环境的问题，导致的软件出错和不一致性。\n\ndocker使用容器这一概念来实现，在一台机器上可以运行多个隔离的容器，每个容器内包含运行所需的所有内容，包括操作系统和底层依赖，例如：容器包括centos7的操作系统，并且含有jdk1.8的底层依赖，然后就可以分享容器，其他人只需要获取到容器，就可以直接运行你的代码，而且所有人的环境都是一样的。\n\n我们可以用docker来快速分享开发环境，也可以用于生产环境快速扩容，因为环境都是一致的，并且docker获取和运行容器非常快速。而我主要使用docker来隔离本地环境，不想因为尝试某种技术，而污染本地的开发环境，又可以快速分享这种演示环境。后续如果可以使用docker来分发开发环境，我将使用docker，除非是docker无法支持的环境，如Mac特有的xcode打包等，不过目前看这种极特殊的情况很少发生。\n\n## docker架构\n![](https://docs.docker.com/engine/images/architecture.svg)\ndocker采用的是client-server架构，client（docker）和daemon（dockerd）通讯，client和daemon可以是在同一台机器上，也可以远程访问另外一台机器的daemon，其通讯采用的是rest-api方式。\ndaemon主要负责监听API请求，并管理镜像，容器，网络，存储等。\nclient则比较轻量一点，主要负责发送命令，比如docker run等\n另外镜像还可以被注册和分享，通过Docker Hub可以找到很多公共镜像，从而达到快速构建容器的目的。\n\n## 镜像\n镜像是创建容器所需的指令模板，只读，通常一个镜像可能基于另外一个镜像，做一些自己的增强，比如基于Ubuntu的系统镜像，做一些安装和配置Nginx的指令。我们可以使用Dockerfile来定义这些步骤命令，通过这个文件就可以build出镜像文件，并且分享。\n## 容器\n容器就是运行镜像的实例，你可以create，start，stop，move，delete镜像，你可以远程链接到该镜像，给它分配存储，甚至创建一个新的镜像基于容器当前的状态。容器彼此之间都是隔离的。\n\n``` bash\ndocker run -i -t ubuntu /bin/bash\n```\n当你在命令行敲了上面的代码，执行过程如下：\n1. 如果你本地没有Ubuntu的镜像，则向注册中心请求该镜像文件，就像你手动执行了`docker pull ubuntu`一样。\n2. 创建新的容器，就像你手动执行`docker container create`一样。\n3. 分配可读写文件给容器，作为它的最后一层，这样允许容器被可控的修改，阻止了对于镜像其它可能的修改，即安全又便捷。\n4. 创建默认的网络接口，如果你没有自定义的话，将分配本地IP给容器，并且默认具有通过本地机器访问外部网络的能力。\n5. 容器启动，并且执行`/bin/bash`,可以和容器进行交互，因为使用了-i和-t的选项。\n6. 当你使用exit退出时，容器将停止，但是没有被删除，你还可以start或者remove。\n\n## docker安装\n我们安装docker桌面版，因为有图形化界面，可以更直观\n安装地址为[docker桌面版](https://docs.docker.com/desktop/),选择自己对应的操作系统，比如Windows还是Mac\n具体安装步骤就不详细说明了，Windows需要注意开启主板的虚拟设置，Mac需要选择Intel芯片还是M1芯片的安装文件。\n安装完界面如下：![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211101164658.png)\n\n后续一些需要分享开发环境的，都将采用docker的镜像分享，以方便快速统一环境。\n","slug":"Docker简介","published":1,"updated":"2021-11-01T08:51:37.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvgfazz40000ac9g54f50b04","content":"<h2 id=\"docker简介\"><a href=\"#docker简介\" class=\"headerlink\" title=\"docker简介\"></a>docker简介</h2><p>docker是一种虚拟化技术，但是和虚拟机又不一样，比较轻量级，最大的好处就是隔离底层硬件和软件的区别，然后让软件跑在统一的环境下，而减少因为底层软硬件环境的问题，导致的软件出错和不一致性。</p>\n<p>docker使用容器这一概念来实现，在一台机器上可以运行多个隔离的容器，每个容器内包含运行所需的所有内容，包括操作系统和底层依赖，例如：容器包括centos7的操作系统，并且含有jdk1.8的底层依赖，然后就可以分享容器，其他人只需要获取到容器，就可以直接运行你的代码，而且所有人的环境都是一样的。</p>\n<p>我们可以用docker来快速分享开发环境，也可以用于生产环境快速扩容，因为环境都是一致的，并且docker获取和运行容器非常快速。而我主要使用docker来隔离本地环境，不想因为尝试某种技术，而污染本地的开发环境，又可以快速分享这种演示环境。后续如果可以使用docker来分发开发环境，我将使用docker，除非是docker无法支持的环境，如Mac特有的xcode打包等，不过目前看这种极特殊的情况很少发生。</p>\n<h2 id=\"docker架构\"><a href=\"#docker架构\" class=\"headerlink\" title=\"docker架构\"></a>docker架构</h2><p><img src=\"https://docs.docker.com/engine/images/architecture.svg\"><br>docker采用的是client-server架构，client（docker）和daemon（dockerd）通讯，client和daemon可以是在同一台机器上，也可以远程访问另外一台机器的daemon，其通讯采用的是rest-api方式。<br>daemon主要负责监听API请求，并管理镜像，容器，网络，存储等。<br>client则比较轻量一点，主要负责发送命令，比如docker run等<br>另外镜像还可以被注册和分享，通过Docker Hub可以找到很多公共镜像，从而达到快速构建容器的目的。</p>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><p>镜像是创建容器所需的指令模板，只读，通常一个镜像可能基于另外一个镜像，做一些自己的增强，比如基于Ubuntu的系统镜像，做一些安装和配置Nginx的指令。我们可以使用Dockerfile来定义这些步骤命令，通过这个文件就可以build出镜像文件，并且分享。</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>容器就是运行镜像的实例，你可以create，start，stop，move，delete镜像，你可以远程链接到该镜像，给它分配存储，甚至创建一个新的镜像基于容器当前的状态。容器彼此之间都是隔离的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -i -t ubuntu /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当你在命令行敲了上面的代码，执行过程如下：</p>\n<ol>\n<li>如果你本地没有Ubuntu的镜像，则向注册中心请求该镜像文件，就像你手动执行了<code>docker pull ubuntu</code>一样。</li>\n<li>创建新的容器，就像你手动执行<code>docker container create</code>一样。</li>\n<li>分配可读写文件给容器，作为它的最后一层，这样允许容器被可控的修改，阻止了对于镜像其它可能的修改，即安全又便捷。</li>\n<li>创建默认的网络接口，如果你没有自定义的话，将分配本地IP给容器，并且默认具有通过本地机器访问外部网络的能力。</li>\n<li>容器启动，并且执行<code>/bin/bash</code>,可以和容器进行交互，因为使用了-i和-t的选项。</li>\n<li>当你使用exit退出时，容器将停止，但是没有被删除，你还可以start或者remove。</li>\n</ol>\n<h2 id=\"docker安装\"><a href=\"#docker安装\" class=\"headerlink\" title=\"docker安装\"></a>docker安装</h2><p>我们安装docker桌面版，因为有图形化界面，可以更直观<br>安装地址为<a href=\"https://docs.docker.com/desktop/\">docker桌面版</a>,选择自己对应的操作系统，比如Windows还是Mac<br>具体安装步骤就不详细说明了，Windows需要注意开启主板的虚拟设置，Mac需要选择Intel芯片还是M1芯片的安装文件。<br>安装完界面如下：<img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211101164658.png\"></p>\n<p>后续一些需要分享开发环境的，都将采用docker的镜像分享，以方便快速统一环境。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"docker简介\"><a href=\"#docker简介\" class=\"headerlink\" title=\"docker简介\"></a>docker简介</h2><p>docker是一种虚拟化技术，但是和虚拟机又不一样，比较轻量级，最大的好处就是隔离底层硬件和软件的区别，然后让软件跑在统一的环境下，而减少因为底层软硬件环境的问题，导致的软件出错和不一致性。</p>\n<p>docker使用容器这一概念来实现，在一台机器上可以运行多个隔离的容器，每个容器内包含运行所需的所有内容，包括操作系统和底层依赖，例如：容器包括centos7的操作系统，并且含有jdk1.8的底层依赖，然后就可以分享容器，其他人只需要获取到容器，就可以直接运行你的代码，而且所有人的环境都是一样的。</p>\n<p>我们可以用docker来快速分享开发环境，也可以用于生产环境快速扩容，因为环境都是一致的，并且docker获取和运行容器非常快速。而我主要使用docker来隔离本地环境，不想因为尝试某种技术，而污染本地的开发环境，又可以快速分享这种演示环境。后续如果可以使用docker来分发开发环境，我将使用docker，除非是docker无法支持的环境，如Mac特有的xcode打包等，不过目前看这种极特殊的情况很少发生。</p>\n<h2 id=\"docker架构\"><a href=\"#docker架构\" class=\"headerlink\" title=\"docker架构\"></a>docker架构</h2><p><img src=\"https://docs.docker.com/engine/images/architecture.svg\"><br>docker采用的是client-server架构，client（docker）和daemon（dockerd）通讯，client和daemon可以是在同一台机器上，也可以远程访问另外一台机器的daemon，其通讯采用的是rest-api方式。<br>daemon主要负责监听API请求，并管理镜像，容器，网络，存储等。<br>client则比较轻量一点，主要负责发送命令，比如docker run等<br>另外镜像还可以被注册和分享，通过Docker Hub可以找到很多公共镜像，从而达到快速构建容器的目的。</p>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><p>镜像是创建容器所需的指令模板，只读，通常一个镜像可能基于另外一个镜像，做一些自己的增强，比如基于Ubuntu的系统镜像，做一些安装和配置Nginx的指令。我们可以使用Dockerfile来定义这些步骤命令，通过这个文件就可以build出镜像文件，并且分享。</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>容器就是运行镜像的实例，你可以create，start，stop，move，delete镜像，你可以远程链接到该镜像，给它分配存储，甚至创建一个新的镜像基于容器当前的状态。容器彼此之间都是隔离的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -i -t ubuntu /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当你在命令行敲了上面的代码，执行过程如下：</p>\n<ol>\n<li>如果你本地没有Ubuntu的镜像，则向注册中心请求该镜像文件，就像你手动执行了<code>docker pull ubuntu</code>一样。</li>\n<li>创建新的容器，就像你手动执行<code>docker container create</code>一样。</li>\n<li>分配可读写文件给容器，作为它的最后一层，这样允许容器被可控的修改，阻止了对于镜像其它可能的修改，即安全又便捷。</li>\n<li>创建默认的网络接口，如果你没有自定义的话，将分配本地IP给容器，并且默认具有通过本地机器访问外部网络的能力。</li>\n<li>容器启动，并且执行<code>/bin/bash</code>,可以和容器进行交互，因为使用了-i和-t的选项。</li>\n<li>当你使用exit退出时，容器将停止，但是没有被删除，你还可以start或者remove。</li>\n</ol>\n<h2 id=\"docker安装\"><a href=\"#docker安装\" class=\"headerlink\" title=\"docker安装\"></a>docker安装</h2><p>我们安装docker桌面版，因为有图形化界面，可以更直观<br>安装地址为<a href=\"https://docs.docker.com/desktop/\">docker桌面版</a>,选择自己对应的操作系统，比如Windows还是Mac<br>具体安装步骤就不详细说明了，Windows需要注意开启主板的虚拟设置，Mac需要选择Intel芯片还是M1芯片的安装文件。<br>安装完界面如下：<img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211101164658.png\"></p>\n<p>后续一些需要分享开发环境的，都将采用docker的镜像分享，以方便快速统一环境。</p>\n"},{"title":"Vue3 新特性","author":"王登武","date":"2021-11-02T06:23:28.000Z","_content":"## vue2的历史问题\n为什么需要有Vue3？有人开玩笑式的抱怨\n> 别再升级了，老子学不动了\n\n框架升级一定是有原因的，是为了解决问题或者带来新特性，否则不会跨大版本不兼容升级。\n为什么vue要有vue3呢，先来看看vue2框架结构和一些历史遗留问题。\nvue2由几大块组成：组件，响应式，虚拟DOM，运行时，浏览器耦合模块。但是由于历史原因，其有以下几个缺点：\n1. vue2是基于Flow.js来做类型校验的，但是现在Flow.js已经停止维护。\n2. vue2的运行时耦合浏览器操作，这会带来如果需要适配小程序，则要改vue核心代码才行。\n3. vue2的响应式，也不是真正意义上的proxy，而是为了兼容IE使用了Object.defineProperty()，有很大的性能问题。\n4. 对应代码较多的组件，data,methods导致数据和方法隔离，当行数比较多时，需要来回查看，不利于维护。\n\n## vue3的新特性\n##### 响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。\n##### 自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。\n##### 使用TypeScript重构，增强了类型安全。\n##### Composition API 组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。\n\n###### vue2写法\n\n``` javascript\nlet App = {\n  data() {\n    return {\n      count: 1\n    }\n  },\n  methods: {\n    add() {\n      this.count++\n    }\n  },\n  computed: {\n    double() {\n      return this.count * 2\n    }\n  }\n}\nVue.createApp(App).mount('#app')\n```\n###### vue3写法\n\n``` javascript\nconst { reactive, computed } = Vue\nlet App = {\n  setup() {\n    const state = reactive({\n      count: 1\n    })\n    function add() {\n      state.count++\n    }\n    const double = computed(() => state.count * 2)\n    return { state, add, double }\n  }\n}\nVue.createApp(App).mount('#app')\n```\n\n##### Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件 \n\n*  Fragment: Vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。\n*  Teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。\n*  Suspense: 异步组件，更方便开发有异步请求的组件。\n\t\n##### 新一代工程化工具 Vite\nWebpack采用预编译的方式，往往由于工程文件很多，导致打包时间要到分钟级别，严重影响开发体验，而Vite采用按需加载，可以大大缩短启动时间，开发期间几乎秒启动，按需加载。\n## vue2要不要升级vue3\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102164915.png)\n## 总结\n* 工程化工具 Vite 带来了更丝滑的调试体验。\n* 对于产品的最终效果来看，Vue 3 性能更高，体积更小。\n* 对于普通开发者来说，Composition API 组合语法带来了更好的组织代码的形式。\n* 全新的响应式系统基于 Proxy，也可以独立使用。\n* Vue 3 内置了新的 Fragment、Teleport 和 Suspense 等组件。\n* 对于 Vue 的二次开发来说，自定义渲染器让我们开发跨端应用时更加得心应手。\n* 对于 Vue 的源码维护者，全部的模块使用 TypeScript 重构，能够带来更好的可维护性。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102163240.png)","source":"_posts/Vue3-新特性.md","raw":"---\ntitle: Vue3 新特性\nauthor: 王登武\ndate: 2021-11-02 14:23:28\ncategories: vue\ntags:\n\t- vue3\n\t\n---\n## vue2的历史问题\n为什么需要有Vue3？有人开玩笑式的抱怨\n> 别再升级了，老子学不动了\n\n框架升级一定是有原因的，是为了解决问题或者带来新特性，否则不会跨大版本不兼容升级。\n为什么vue要有vue3呢，先来看看vue2框架结构和一些历史遗留问题。\nvue2由几大块组成：组件，响应式，虚拟DOM，运行时，浏览器耦合模块。但是由于历史原因，其有以下几个缺点：\n1. vue2是基于Flow.js来做类型校验的，但是现在Flow.js已经停止维护。\n2. vue2的运行时耦合浏览器操作，这会带来如果需要适配小程序，则要改vue核心代码才行。\n3. vue2的响应式，也不是真正意义上的proxy，而是为了兼容IE使用了Object.defineProperty()，有很大的性能问题。\n4. 对应代码较多的组件，data,methods导致数据和方法隔离，当行数比较多时，需要来回查看，不利于维护。\n\n## vue3的新特性\n##### 响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。\n##### 自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。\n##### 使用TypeScript重构，增强了类型安全。\n##### Composition API 组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。\n\n###### vue2写法\n\n``` javascript\nlet App = {\n  data() {\n    return {\n      count: 1\n    }\n  },\n  methods: {\n    add() {\n      this.count++\n    }\n  },\n  computed: {\n    double() {\n      return this.count * 2\n    }\n  }\n}\nVue.createApp(App).mount('#app')\n```\n###### vue3写法\n\n``` javascript\nconst { reactive, computed } = Vue\nlet App = {\n  setup() {\n    const state = reactive({\n      count: 1\n    })\n    function add() {\n      state.count++\n    }\n    const double = computed(() => state.count * 2)\n    return { state, add, double }\n  }\n}\nVue.createApp(App).mount('#app')\n```\n\n##### Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件 \n\n*  Fragment: Vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。\n*  Teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。\n*  Suspense: 异步组件，更方便开发有异步请求的组件。\n\t\n##### 新一代工程化工具 Vite\nWebpack采用预编译的方式，往往由于工程文件很多，导致打包时间要到分钟级别，严重影响开发体验，而Vite采用按需加载，可以大大缩短启动时间，开发期间几乎秒启动，按需加载。\n## vue2要不要升级vue3\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102164915.png)\n## 总结\n* 工程化工具 Vite 带来了更丝滑的调试体验。\n* 对于产品的最终效果来看，Vue 3 性能更高，体积更小。\n* 对于普通开发者来说，Composition API 组合语法带来了更好的组织代码的形式。\n* 全新的响应式系统基于 Proxy，也可以独立使用。\n* Vue 3 内置了新的 Fragment、Teleport 和 Suspense 等组件。\n* 对于 Vue 的二次开发来说，自定义渲染器让我们开发跨端应用时更加得心应手。\n* 对于 Vue 的源码维护者，全部的模块使用 TypeScript 重构，能够带来更好的可维护性。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102163240.png)","slug":"Vue3-新特性","published":1,"updated":"2021-11-02T08:49:46.710Z","_id":"ckvhpk8k300002w9g8t592537","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"vue2的历史问题\"><a href=\"#vue2的历史问题\" class=\"headerlink\" title=\"vue2的历史问题\"></a>vue2的历史问题</h2><p>为什么需要有Vue3？有人开玩笑式的抱怨</p>\n<blockquote>\n<p>别再升级了，老子学不动了</p>\n</blockquote>\n<p>框架升级一定是有原因的，是为了解决问题或者带来新特性，否则不会跨大版本不兼容升级。<br>为什么vue要有vue3呢，先来看看vue2框架结构和一些历史遗留问题。<br>vue2由几大块组成：组件，响应式，虚拟DOM，运行时，浏览器耦合模块。但是由于历史原因，其有以下几个缺点：</p>\n<ol>\n<li>vue2是基于Flow.js来做类型校验的，但是现在Flow.js已经停止维护。</li>\n<li>vue2的运行时耦合浏览器操作，这会带来如果需要适配小程序，则要改vue核心代码才行。</li>\n<li>vue2的响应式，也不是真正意义上的proxy，而是为了兼容IE使用了Object.defineProperty()，有很大的性能问题。</li>\n<li>对应代码较多的组件，data,methods导致数据和方法隔离，当行数比较多时，需要来回查看，不利于维护。</li>\n</ol>\n<h2 id=\"vue3的新特性\"><a href=\"#vue3的新特性\" class=\"headerlink\" title=\"vue3的新特性\"></a>vue3的新特性</h2><h5 id=\"响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。\"><a href=\"#响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。\" class=\"headerlink\" title=\"响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。\"></a>响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。</h5><h5 id=\"自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。\"><a href=\"#自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。\" class=\"headerlink\" title=\"自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。\"></a>自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。</h5><h5 id=\"使用TypeScript重构，增强了类型安全。\"><a href=\"#使用TypeScript重构，增强了类型安全。\" class=\"headerlink\" title=\"使用TypeScript重构，增强了类型安全。\"></a>使用TypeScript重构，增强了类型安全。</h5><h5 id=\"Composition-API-组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。\"><a href=\"#Composition-API-组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。\" class=\"headerlink\" title=\"Composition API 组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。\"></a>Composition API 组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。</h5><h6 id=\"vue2写法\"><a href=\"#vue2写法\" class=\"headerlink\" title=\"vue2写法\"></a>vue2写法</h6><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> App <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"vue3写法\"><a href=\"#vue3写法\" class=\"headerlink\" title=\"vue3写法\"></a>vue3写法</h6><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span> computed <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> Vue\n<span class=\"token keyword\">let</span> App <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> double <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> state<span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">,</span> double <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"Vue-3-还内置了-Fragment、Teleport-和-Suspense-三个新组件\"><a href=\"#Vue-3-还内置了-Fragment、Teleport-和-Suspense-三个新组件\" class=\"headerlink\" title=\"Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件\"></a>Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件</h5><ul>\n<li> Fragment: Vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。</li>\n<li> Teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。</li>\n<li> Suspense: 异步组件，更方便开发有异步请求的组件。</li>\n</ul>\n<h5 id=\"新一代工程化工具-Vite\"><a href=\"#新一代工程化工具-Vite\" class=\"headerlink\" title=\"新一代工程化工具 Vite\"></a>新一代工程化工具 Vite</h5><p>Webpack采用预编译的方式，往往由于工程文件很多，导致打包时间要到分钟级别，严重影响开发体验，而Vite采用按需加载，可以大大缩短启动时间，开发期间几乎秒启动，按需加载。</p>\n<h2 id=\"vue2要不要升级vue3\"><a href=\"#vue2要不要升级vue3\" class=\"headerlink\" title=\"vue2要不要升级vue3\"></a>vue2要不要升级vue3</h2><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102164915.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>工程化工具 Vite 带来了更丝滑的调试体验。</li>\n<li>对于产品的最终效果来看，Vue 3 性能更高，体积更小。</li>\n<li>对于普通开发者来说，Composition API 组合语法带来了更好的组织代码的形式。</li>\n<li>全新的响应式系统基于 Proxy，也可以独立使用。</li>\n<li>Vue 3 内置了新的 Fragment、Teleport 和 Suspense 等组件。</li>\n<li>对于 Vue 的二次开发来说，自定义渲染器让我们开发跨端应用时更加得心应手。</li>\n<li>对于 Vue 的源码维护者，全部的模块使用 TypeScript 重构，能够带来更好的可维护性。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102163240.png\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue2的历史问题\"><a href=\"#vue2的历史问题\" class=\"headerlink\" title=\"vue2的历史问题\"></a>vue2的历史问题</h2><p>为什么需要有Vue3？有人开玩笑式的抱怨</p>\n<blockquote>\n<p>别再升级了，老子学不动了</p>\n</blockquote>\n<p>框架升级一定是有原因的，是为了解决问题或者带来新特性，否则不会跨大版本不兼容升级。<br>为什么vue要有vue3呢，先来看看vue2框架结构和一些历史遗留问题。<br>vue2由几大块组成：组件，响应式，虚拟DOM，运行时，浏览器耦合模块。但是由于历史原因，其有以下几个缺点：</p>\n<ol>\n<li>vue2是基于Flow.js来做类型校验的，但是现在Flow.js已经停止维护。</li>\n<li>vue2的运行时耦合浏览器操作，这会带来如果需要适配小程序，则要改vue核心代码才行。</li>\n<li>vue2的响应式，也不是真正意义上的proxy，而是为了兼容IE使用了Object.defineProperty()，有很大的性能问题。</li>\n<li>对应代码较多的组件，data,methods导致数据和方法隔离，当行数比较多时，需要来回查看，不利于维护。</li>\n</ol>\n<h2 id=\"vue3的新特性\"><a href=\"#vue3的新特性\" class=\"headerlink\" title=\"vue3的新特性\"></a>vue3的新特性</h2><h5 id=\"响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。\"><a href=\"#响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。\" class=\"headerlink\" title=\"响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。\"></a>响应式系统，使用了Proxy来实现，所以vue3不再兼容IE11以下浏览器。</h5><h5 id=\"自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。\"><a href=\"#自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。\" class=\"headerlink\" title=\"自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。\"></a>自定义渲染器，将浏览器相关渲染独立出来，这样只需要增加对小程序渲染的模块，就增加了对小程序的支持。</h5><h5 id=\"使用TypeScript重构，增强了类型安全。\"><a href=\"#使用TypeScript重构，增强了类型安全。\" class=\"headerlink\" title=\"使用TypeScript重构，增强了类型安全。\"></a>使用TypeScript重构，增强了类型安全。</h5><h5 id=\"Composition-API-组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。\"><a href=\"#Composition-API-组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。\" class=\"headerlink\" title=\"Composition API 组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。\"></a>Composition API 组合语法，解决数据定义和方法分开导致的注意力打断，复杂逻辑的代码行数很多的情况下，便于维护。</h5><h6 id=\"vue2写法\"><a href=\"#vue2写法\" class=\"headerlink\" title=\"vue2写法\"></a>vue2写法</h6><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> App <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"vue3写法\"><a href=\"#vue3写法\" class=\"headerlink\" title=\"vue3写法\"></a>vue3写法</h6><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> reactive<span class=\"token punctuation\">,</span> computed <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> Vue\n<span class=\"token keyword\">let</span> App <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      count<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> double <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> state<span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">,</span> double <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"Vue-3-还内置了-Fragment、Teleport-和-Suspense-三个新组件\"><a href=\"#Vue-3-还内置了-Fragment、Teleport-和-Suspense-三个新组件\" class=\"headerlink\" title=\"Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件\"></a>Vue 3 还内置了 Fragment、Teleport 和 Suspense 三个新组件</h5><ul>\n<li> Fragment: Vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。</li>\n<li> Teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。</li>\n<li> Suspense: 异步组件，更方便开发有异步请求的组件。</li>\n</ul>\n<h5 id=\"新一代工程化工具-Vite\"><a href=\"#新一代工程化工具-Vite\" class=\"headerlink\" title=\"新一代工程化工具 Vite\"></a>新一代工程化工具 Vite</h5><p>Webpack采用预编译的方式，往往由于工程文件很多，导致打包时间要到分钟级别，严重影响开发体验，而Vite采用按需加载，可以大大缩短启动时间，开发期间几乎秒启动，按需加载。</p>\n<h2 id=\"vue2要不要升级vue3\"><a href=\"#vue2要不要升级vue3\" class=\"headerlink\" title=\"vue2要不要升级vue3\"></a>vue2要不要升级vue3</h2><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102164915.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>工程化工具 Vite 带来了更丝滑的调试体验。</li>\n<li>对于产品的最终效果来看，Vue 3 性能更高，体积更小。</li>\n<li>对于普通开发者来说，Composition API 组合语法带来了更好的组织代码的形式。</li>\n<li>全新的响应式系统基于 Proxy，也可以独立使用。</li>\n<li>Vue 3 内置了新的 Fragment、Teleport 和 Suspense 等组件。</li>\n<li>对于 Vue 的二次开发来说，自定义渲染器让我们开发跨端应用时更加得心应手。</li>\n<li>对于 Vue 的源码维护者，全部的模块使用 TypeScript 重构，能够带来更好的可维护性。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211102163240.png\"></li>\n</ul>\n"},{"title":"echarts5图表渲染过程分析","author":"王登武","date":"2021-11-10T08:35:17.000Z","_content":"\n### Echarts快速入门\nEcharts就不做过多介绍了，相信大家都听说或者使用过，现在以官方给的第一个快速入门为基础，分析一下渲染过程。示例代码如下\n\n``` javascript\n<div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n<script type=\"text/javascript\">\n\n    // 基于准备好的dom，初始化echarts实例\n    var myChart = echarts.init(document.getElementById('main'));\n\n    // 指定图表的配置项和数据\n    var option = {\n      title: {\n        text: 'ECharts 入门示例'\n      },\n      tooltip: {},\n      legend: {\n        data: ['销量']\n      },\n      xAxis: {\n        data: ['衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子']\n      },\n      yAxis: {},\n      series: [\n        {\n          name: '销量',\n          type: 'bar',\n          data: [5, 20, 36, 10, 10, 20]\n        }\n      ]\n    };\n\n    // 使用刚指定的配置项和数据显示图表。\n    myChart.setOption(option);\n  </script>\n```\n渲染出来的效果就是这样的\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211112181806.png)\n### 代码分析\necharts是依赖zrender来绘制的，上述代码可以看到调用了echarts的2个方法，**init**和**setOption**,5.x版本的echarts是使用typescript写的。\n先看下init方法的定义,在src/echarts.ts里,为了更简洁清晰，后续代码我删掉了非主干流程渲染的部分内容。\n\n``` javascript\nimport { init } from './core/echarts';\nexport default {\n    init() {\n        return init.apply(null, arguments);\n    }\n};\n```\n真正的init方法其实是./core/echarts里的\n\n``` javascript\nexport function init(\n    dom: HTMLElement,\n    theme?: string | object,\n    opts?: EChartsInitOpts\n): EChartsType {\n    const existInstance = getInstanceByDom(dom);\n    if (existInstance) {\n         return existInstance;\n    }\n    const chart = new ECharts(dom, theme, opts);\n    chart.id = 'ec_' + idBase++;\n    instances[chart.id] = chart;\n\n    modelUtil.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);\n\n    enableConnect(chart);\n\n    lifecycle.trigger('afterinit', chart);\n\n    return chart;\n}\n```\n代码实例化了ECharts对象，构造函数代码\n\n``` javascript\nclass ECharts extends Eventful<ECEventDefinition> {\n\t constructor(\n\t        dom: HTMLElement,\n\t        // Theme name or themeOption.\n\t        theme?: string | ThemeOption,\n\t        opts?: EChartsInitOpts\n\t    ) {\n\t        super(new ECEventProcessor());\n\t\n\t        opts = opts || {};\n\t\n\t        // Get theme by name\n\t        if (typeof theme === 'string') {\n\t            theme = themeStorage[theme] as object;\n\t        }\n\t\n\t        this._dom = dom;\n\t\n\t        let defaultRenderer = 'canvas';\n\t        let defaultUseDirtyRect = false;\n\t        \n\t        const zr = this._zr = zrender.init(dom, {\n\t            renderer: opts.renderer || defaultRenderer,\n\t            devicePixelRatio: opts.devicePixelRatio,\n\t            width: opts.width,\n\t            height: opts.height,\n\t            useDirtyRect: opts.useDirtyRect == null ? defaultUseDirtyRect : opts.useDirtyRect\n\t        });\n\t\n\t        // Expect 60 fps.\n\t        this._throttledZrFlush = throttle(bind(zr.flush, zr), 17);\n\t\n\t        theme = clone(theme);\n\t        theme && backwardCompat(theme as ECUnitOption, true);\n\t\n\t        this._theme = theme;\n\t\n\t        this._locale = createLocaleObject(opts.locale || SYSTEM_LANG);\n\t\n\t        this._coordSysMgr = new CoordinateSystemManager();\n\t\n\t        const api = this._api = createExtensionAPI(this);\n\t\n\t        // Sort on demand\n\t        function prioritySortFunc(a: StageHandlerInternal, b: StageHandlerInternal): number {\n\t            return a.__prio - b.__prio;\n\t        }\n\t        timsort(visualFuncs, prioritySortFunc);\n\t        timsort(dataProcessorFuncs, prioritySortFunc);\n\t\n\t        this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);\n\t\n\t        this._messageCenter = new MessageCenter();\n\t\n\t        // Init mouse events\n\t        this._initEvents();\n\t\n\t        // In case some people write `window.onresize = chart.resize`\n\t        this.resize = bind(this.resize, this);\n\t\n\t        zr.animation.on('frame', this._onframe, this);\n\t\n\t        bindRenderedEvent(zr, this);\n\t\n\t        bindMouseEvent(zr, this);\n\t\n\t        // ECharts instance can be used as value.\n\t        setAsPrimitive(this);\n\t  }\n    }\n``` \n内容比较多，重点代码是初始化了zrender\n\n``` javascript\nconst zr = this._zr = zrender.init(dom, {\n\t            renderer: opts.renderer || defaultRenderer,\n\t            devicePixelRatio: opts.devicePixelRatio,\n\t            width: opts.width,\n\t            height: opts.height,\n\t            useDirtyRect: opts.useDirtyRect == null ? defaultUseDirtyRect : opts.useDirtyRect\n });\n```\n初始化了`this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);`,后续series渲染的时候会用到。\n同时注册了渲染回调`zr.animation.on('frame', this._onframe, this);`\n\n在分析setOption方法之前，有必要先说一下echarts的组件设计思想，我们示例里看到的绘制出来的图形，其实是很多组件构成的，echarts主要分成2类，一类是ComponentView，一类是ChartView。分别在src/chart下面和src/component下面。\n先看下父类ComponentView(src/view/Component.ts)定义\n\n``` javascript\nclass ComponentView {\n    readonly group: ViewRootGroup;\n    readonly uid: string;\n    __model: ComponentModel;\n    __alive: boolean;\n    __id: string;\n\n    constructor() {\n        this.group = new Group();\n        this.uid = componentUtil.getUID('viewComponent');\n    }\n\n    init(ecModel: GlobalModel, api: ExtensionAPI): void {}\n\n    render(model: ComponentModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {}\n\n    dispose(ecModel: GlobalModel, api: ExtensionAPI): void {}\n\n    updateView(model: ComponentModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        // Do nothing;\n    }\n\n    updateLayout(model: ComponentModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        // Do nothing;\n    }\n\n    updateVisual(model: ComponentModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        // Do nothing;\n    }\n\n    /**\n     * Hook for blur target series.\n     * Can be used in marker for blur the markers\n     */\n    blurSeries(seriesModels: SeriesModel[], ecModel: GlobalModel): void {\n         // Do nothing;\n    }\n\n    static registerClass: clazzUtil.ClassManager['registerClass'];\n};\n```\n最主要的2个方法init和render是由各个组件子类来实现的。\nChartView(src/view/Chart.ts)\n\n``` javascript\nclass ChartView {\n    type: string;\n    readonly group: ViewRootGroup;\n    readonly uid: string;\n    readonly renderTask: SeriesTask;\n    ignoreLabelLineUpdate: boolean;\n    __alive: boolean;\n    __model: SeriesModel;\n    __id: string;\n\n    static protoInitialize = (function () {\n        const proto = ChartView.prototype;\n        proto.type = 'chart';\n    })();\n\n    constructor() {\n        this.group = new Group();\n        this.uid = componentUtil.getUID('viewChart');\n\n        this.renderTask = createTask<SeriesTaskContext>({\n            plan: renderTaskPlan,\n            reset: renderTaskReset\n        });\n        this.renderTask.context = {view: this} as SeriesTaskContext;\n    }\n\n    init(ecModel: GlobalModel, api: ExtensionAPI): void {}\n\n    render(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {}\n\n    highlight(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n    }\n\n    downplay(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        toggleHighlight(seriesModel.getData(), payload, 'normal');\n    }\n\n    remove(ecModel: GlobalModel, api: ExtensionAPI): void {\n        this.group.removeAll();\n    }\n    dispose(ecModel: GlobalModel, api: ExtensionAPI): void {}\n    updateView(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        this.render(seriesModel, ecModel, api, payload);\n    }\n\n    // FIXME never used?\n    updateLayout(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        this.render(seriesModel, ecModel, api, payload);\n    }\n\n    // FIXME never used?\n    updateVisual(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        this.render(seriesModel, ecModel, api, payload);\n    }\n\n    static markUpdateMethod(payload: Payload, methodName: keyof ChartView): void {\n        inner(payload).updateMethod = methodName;\n    }\n\n    static registerClass: clazzUtil.ClassManager['registerClass'];\n};\n```\n也是需要关注init和render方法，但是额外不一样的是构造函数里初始化了renderTask，这块在渲染数据的时候会用到。\n下面再回到setOption方法，我们来看看setOption(src/core/echarts.ts)的实现\n\n``` javascript\nsetOption<Opt extends ECBasicOption>(option: Opt, notMerge?: boolean | SetOptionOpts, lazyUpdate?: boolean): void {\n        if (this._disposed) {\n            disposedWarning(this.id);\n            return;\n        }\n\n        let silent;\n        let replaceMerge;\n        let transitionOpt: SetOptionTransitionOpt;\n        if (isObject(notMerge)) {\n            lazyUpdate = notMerge.lazyUpdate;\n            silent = notMerge.silent;\n            replaceMerge = notMerge.replaceMerge;\n            transitionOpt = notMerge.transition;\n            notMerge = notMerge.notMerge;\n        }\n\n        this[IN_MAIN_PROCESS_KEY] = true;\n\n        if (!this._model || notMerge) {\n            const optionManager = new OptionManager(this._api);\n            const theme = this._theme;\n            const ecModel = this._model = new GlobalModel();\n            ecModel.scheduler = this._scheduler;\n            ecModel.init(null, null, null, theme, this._locale, optionManager);\n        }\n\n        this._model.setOption(option as ECBasicOption, { replaceMerge }, optionPreprocessorFuncs);\n\n        const updateParams = {\n            seriesTransition: transitionOpt,\n            optionChanged: true\n        } as UpdateLifecycleParams;\n\n        if (lazyUpdate) {\n            this[PENDING_UPDATE] = {\n                silent: silent,\n                updateParams: updateParams\n            };\n            this[IN_MAIN_PROCESS_KEY] = false;\n\n            // `setOption(option, {lazyMode: true})` may be called when zrender has been slept.\n            // It should wake it up to make sure zrender start to render at the next frame.\n            this.getZr().wakeUp();\n        }\n        else {\n            prepare(this);\n\n            updateMethods.update.call(this, null, updateParams);\n\n            // Ensure zr refresh sychronously, and then pixel in canvas can be\n            // fetched after `setOption`.\n            this._zr.flush();\n\n            this[PENDING_UPDATE] = null;\n            this[IN_MAIN_PROCESS_KEY] = false;\n\n            flushPendingActions.call(this, silent);\n            triggerUpdatedEvent.call(this, silent);\n        }\n    }\n```\n初始化model，`this._model.setOption(option as ECBasicOption, { replaceMerge }, optionPreprocessorFuncs);` \n`prepare(this);`的方法实现\n\n``` javascript\nprepare = function (ecIns: ECharts): void {\n            const scheduler = ecIns._scheduler;\n\n            scheduler.restorePipelines(ecIns._model);\n            scheduler.prepareStageTasks();\n\n            prepareView(ecIns, true);\n            prepareView(ecIns, false);\n\n            scheduler.plan();\n};\n```\n``` javascript\nrestorePipelines(ecModel: GlobalModel): void {\n        const scheduler = this;\n        const pipelineMap = scheduler._pipelineMap = createHashMap();\n\n        ecModel.eachSeries(function (seriesModel) {\n            const progressive = seriesModel.getProgressive();\n            const pipelineId = seriesModel.uid;\n\n            pipelineMap.set(pipelineId, {\n                id: pipelineId,\n                head: null,\n                tail: null,\n                threshold: seriesModel.getProgressiveThreshold(),\n                progressiveEnabled: progressive\n                    && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),\n                blockIndex: -1,\n                step: Math.round(progressive || 700),\n                count: 0\n            });\n\n            scheduler._pipe(seriesModel, seriesModel.dataTask);\n        });\n    }\n```\n其中seriesModel的内容:\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211113135714.png)\n\n``` javascript\nprivate _pipe(seriesModel: SeriesModel, task: GeneralTask) {\n        const pipelineId = seriesModel.uid;\n        const pipeline = this._pipelineMap.get(pipelineId);\n        !pipeline.head && (pipeline.head = task);\n        pipeline.tail && pipeline.tail.pipe(task);\n        pipeline.tail = task;\n        task.__idxInPipeline = pipeline.count++;\n        task.__pipeline = pipeline;\n  }\n```\n通过_pipe方法就将task加到了pipeline里，等待后续执行task进行渲染。\nprepareView(ecIns, true);\nprepareView(ecIns, false);\n分别执行ComponentView和ChartView的init方法，具体怎么找到对应的clazz呢？\n\n``` javascript\nfunction doPrepare(model: ComponentModel): void {\n                const requireNewView = model.__requireNewView;\n                model.__requireNewView = false;\n                const viewId = '_ec_' + model.id + '_' + model.type;\n                let view = !requireNewView && viewMap[viewId];\n                if (!view) {\n                    const classType = parseClassType(model.type);\n                    const Clazz = isComponent\n                        ? (ComponentView as ComponentViewConstructor).getClass(classType.main, classType.sub)\n                        : (\n                                     (ChartView as ChartViewConstructor).getClass(classType.sub)\n                        );\n\n                    if (__DEV__) {\n                        assert(Clazz, classType.sub + ' does not exist.');\n                    }\n\n                    view = new Clazz();\n                    view.init(ecModel, api);\n                    viewMap[viewId] = view;\n                    viewList.push(view as any);\n                    zr.add(view.group);\n                }\n\n                model.__viewId = view.__id = viewId;\n                view.__alive = true;\n                view.__model = model;\n                view.group.__ecComponentInfo = {\n                    mainType: model.mainType,\n                    index: model.componentIndex\n                };\n                !isComponent && scheduler.prepareView(\n                    view as ChartView, model as SeriesModel, ecModel, api\n                );\n     }\n```\n\n``` javascript\n(ComponentView as ComponentViewConstructor).getClass(classType.main, classType.sub)\n\nimport * as clazzUtil from '../util/clazz';\nexport type ComponentViewConstructor = typeof ComponentView\n    & clazzUtil.ExtendableConstructor\n    & clazzUtil.ClassManager;\n\nclazzUtil.enableClassExtend(ComponentView as ComponentViewConstructor);\nclazzUtil.enableClassManagement(ComponentView as ComponentViewConstructor);\n\ntarget.getClass = function (\n        mainType: ComponentMainType,\n        subType?: ComponentSubType,\n        throwWhenNotFound?: boolean\n    ): Constructor {\n        let clz = storage[mainType];\n\n        if (clz && (clz as SubclassContainer)[IS_CONTAINER]) {\n            clz = subType ? (clz as SubclassContainer)[subType] : null;\n        }\n\n        if (throwWhenNotFound && !clz) {\n            throw new Error(\n                !subType\n                    ? mainType + '.' + 'type should be specified.'\n                    : 'Component ' + mainType + '.' + (subType || '') + ' is used but not imported.'\n            );\n        }\n\n        return clz as Constructor;\n };\n \n target.registerClass = function (\n        clz: Constructor\n    ): Constructor {\n        const componentFullType = (clz as any).type || clz.prototype.type;\n        if (componentFullType) {\n            checkClassType(componentFullType);\n            clz.prototype.type = componentFullType;\n            const componentTypeInfo = parseClassType(componentFullType);\n            if (!componentTypeInfo.sub) {\n                    storage[componentTypeInfo.main] = clz;\n            }\n            else if (componentTypeInfo.sub !== IS_CONTAINER) {\n                const container = makeContainer(componentTypeInfo);\n                container[componentTypeInfo.sub] = clz;\n            }\n        }\n        return clz;\n  };\n  //以TitleView为例\n  class TitleView extends ComponentView {\n\n    static type = 'title' as const;\n    type = TitleView.type;\n```\n``` javascript\nprepareView(view: ChartView, model: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI): void {\n        const renderTask = view.renderTask;\n        const context = renderTask.context;\n\n        context.model = model;\n        context.ecModel = ecModel;\n        context.api = api;\n\n        renderTask.__block = !view.incrementalPrepareRender;\n\n        this._pipe(model, renderTask);\n    }\n```\n \n而BarView不同的地方在，将renderTask加入了pipeline。\nsetOption里的`prepare(this);`执行完了，总结一下就是初始化Model，初始化对应的ComponentView和ChartView并将series对应的task加入pipeline，再来看下`updateMethods.update.call(this, null, updateParams);`\n\n``` javascript\nupdateMethods = {\n            update(this: ECharts, payload: Payload, updateParams: UpdateLifecycleParams): void {\n                const ecModel = this._model;\n                const api = this._api;\n                const zr = this._zr;\n                const coordSysMgr = this._coordSysMgr;\n                const scheduler = this._scheduler;\n                // update before setOption\n                if (!ecModel) {\n                    return;\n                }\n                ecModel.setUpdatePayload(payload);\n                scheduler.restoreData(ecModel, payload);\n                scheduler.performSeriesTasks(ecModel);\n                coordSysMgr.create(ecModel, api);\n                scheduler.performDataProcessorTasks(ecModel, payload);\n                updateStreamModes(this, ecModel);\n                coordSysMgr.update(ecModel, api);\n                clearColorPalette(ecModel);\n                scheduler.performVisualTasks(ecModel, payload);\n                \n                render(this, ecModel, api, payload, updateParams);\n\n                // Set background\n                let backgroundColor = ecModel.get('backgroundColor') || 'transparent';\n                const darkMode = ecModel.get('darkMode');\n\n                // In IE8\n                if (!env.canvasSupported) {\n                    const colorArr = colorTool.parse(backgroundColor as ColorString);\n                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\n                    if (colorArr[3] === 0) {\n                        backgroundColor = 'transparent';\n                    }\n                }\n                else {\n                    zr.setBackgroundColor(backgroundColor);\n\n                    // Force set dark mode.\n                    if (darkMode != null && darkMode !== 'auto') {\n                        zr.setDarkMode(darkMode);\n                    }\n                }\n\n                lifecycle.trigger('afterupdate', ecModel, api);\n            },\n\n```\n最主要的是`render(this, ecModel, api, payload, updateParams);`方法，\n\n``` javascript\nrender = (\n            ecIns: ECharts, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload,\n            updateParams: UpdateLifecycleParams\n        ) => {\n\n            renderComponents(ecIns, ecModel, api, payload, updateParams);\n\n            each(ecIns._chartsViews, function (chart: ChartView) {\n                chart.__alive = false;\n            });\n\n            renderSeries(ecIns, ecModel, api, payload, updateParams);\n\n            // Remove groups of unrendered charts\n            each(ecIns._chartsViews, function (chart: ChartView) {\n                if (!chart.__alive) {\n                    chart.remove(ecModel, api);\n                }\n            });\n     };\n```\n先来看下`renderComponents(ecIns, ecModel, api, payload, updateParams);`\n\n``` javascript\nrenderComponents = (\n            ecIns: ECharts, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload,\n            updateParams: UpdateLifecycleParams, dirtyList?: ComponentView[]\n        ) => {\n            each(dirtyList || ecIns._componentsViews, function (componentView: ComponentView) {\n                const componentModel = componentView.__model;\n                clearStates(componentModel, componentView);\n\n                componentView.render(componentModel, ecModel, api, payload);\n\n                updateZ(componentModel, componentView);\n\n                updateStates(componentModel, componentView);\n            });\n\n    };\n```\necIns就是echarts实例，那针对这个示例都有哪些_componentsViews呢，\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114010528.png)\n拿其中一个TitleView来细看一下\n\n``` javascript\nrender(titleModel: TitleModel, ecModel: GlobalModel, api: ExtensionAPI) {\n        this.group.removeAll();\n        const group = this.group;\n\n       \n        const textEl = new graphic.Text({\n            style: createTextStyle(textStyleModel, {\n                text: titleModel.get('text'),\n                fill: textStyleModel.getTextColor()\n            }, {disableBox: true}),\n            z2: 10\n        });\n\n        group.add(textEl);\n        \n    }\n}\n```\nrender方法实在太长了，我删掉了样式，子标题，背景，标题框等相关代码，只留下Text渲染相关的了。\n可以看到，真正的渲染是调用了zrender的graphic.Text，并添加到了group里。\n再来看renderSeries\n\n``` javascript\nrenderSeries = (\n            ecIns: ECharts,\n            ecModel: GlobalModel,\n            api: ExtensionAPI,\n            payload: Payload | 'remain',\n            updateParams: UpdateLifecycleParams,\n            dirtyMap?: {[uid: string]: any}\n        ) => {\n            // Render all charts\n            const scheduler = ecIns._scheduler;\n\n            updateParams = extend(updateParams || {}, {\n                updatedSeries: ecModel.getSeries()\n            });\n\n            let unfinished: boolean = false;\n            ecModel.eachSeries(function (seriesModel) {\n                const chartView = ecIns._chartsMap[seriesModel.__viewId];\n                chartView.__alive = true;\n\n                const renderTask = chartView.renderTask;\n                 if (renderTask.perform(scheduler.getPerformArgs(renderTask))) {\n                    unfinished = true;\n                }\n\n            });\n     };\n```\n最重要的就是调用了renderTask.perform\nTask(src/core/task.ts)的perform方法。方法比较长，我就不贴代码了，主干是调用了`                    this._doProgress(progress, start, end, modBy, modDataCount);`\n\n``` javascript\nconst progressMethodMap: {[method: string]: TaskResetCallbackReturn<SeriesTaskContext>} = {\n    incrementalPrepareRender: {\n        progress: function (params: StageHandlerProgressParams, context: SeriesTaskContext): void {\n            context.view.incrementalRender(\n                params, context.model, context.ecModel, context.api, context.payload\n            );\n        }\n    },\n    render: {\n        // Put view.render in `progress` to support appendData. But in this case\n        // view.render should not be called in reset, otherwise it will be called\n        // twise. Use `forceFirstProgress` to make sure that view.render is called\n        // in any cases.\n        forceFirstProgress: true,\n        progress: function (params: StageHandlerProgressParams, context: SeriesTaskContext): void {\n            context.view.render(\n                context.model, context.ecModel, context.api, context.payload\n            );\n        }\n    }\n};\n```\n紧接着调用了progress方法，而progress方法里调用了view的render，以此示例的BarView举例\n\n``` javascript\nrender(seriesModel: BarSeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload) {\n        this._model = seriesModel;\n\n        this._removeOnRenderedListener(api);\n\n        this._updateDrawMode(seriesModel);\n\n        const coordinateSystemType = seriesModel.get('coordinateSystem');\n\n        if (coordinateSystemType === 'cartesian2d'\n            || coordinateSystemType === 'polar'\n        ) {\n            this._isLargeDraw\n                ? this._renderLarge(seriesModel, ecModel, api)\n                : this._renderNormal(seriesModel, ecModel, api, payload);\n        }\n        else if (__DEV__) {\n            warn('Only cartesian2d and polar supported for bar.');\n        }\n    }\n```\n根据是否是_isLargeDraw而分别调用不同的render，本示走的是_renderNormal方法。\n\n``` javascript\nprivate _renderNormal(\n        seriesModel: BarSeriesModel,\n        ecModel: GlobalModel,\n        api: ExtensionAPI,\n        payload: Payload\n    ): void {\n        const group = this.group;\n        const data = seriesModel.getData();\n        const oldData = this._data;\n        data.diff(oldData)\n            .add(function (dataIndex) {\n                const itemModel = data.getItemModel<BarDataItemOption>(dataIndex);\n                const layout = getLayout[coord.type](data, dataIndex, itemModel);\n                const el = elementCreator[coord.type](\n                    seriesModel,\n                    data,\n                    dataIndex,\n                    layout,\n                    isHorizontalOrRadial,\n                    animationModel,\n                    baseAxis.model,\n                    false,\n                    roundCap\n                );\n                group.add(el);\n            })\n            .execute();\n        this._data = data;\n    }\n    \n    const elementCreator: {\n    [key in 'polar' | 'cartesian2d']: ElementCreator\n} = {\n    cartesian2d(\n        seriesModel, data, newIndex, layout: RectLayout, isHorizontal,\n        animationModel, axisModel, isUpdate, roundCap\n    ) {\n        const rect = new Rect({\n            shape: extend({}, layout),\n            z2: 1\n        });\n        (rect as any).__dataIndex = newIndex;\n\n        rect.name = 'item';\n\n        if (animationModel) {\n            const rectShape = rect.shape;\n            const animateProperty = isHorizontal ? 'height' : 'width' as 'width' | 'height';\n            rectShape[animateProperty] = 0;\n        }\n        return rect;\n    },\n};\n```\n方法太长，我删掉了非主干代码，可以看到最终根据Model的data的diff来进行add,update,remove,最终还是调用了zrender的Rect来画出bar的样子。\n最后贴一下渲染BarView的调用栈\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114021358.png)\n渲染ComponentView比较直接，而渲染ChartView类型的就绕来绕去，主要原因是ChartView可能数据比较多，需要逐步分批渲染，以减少卡顿，保持每秒60帧的渲染，因为1000ms，每一帧不能超过16ms，才能保持流畅的渲染。\n在setOption方法的最后调用了`this._zr.flush();`则直接将绘制渲染出来了，当然对于ChartView的绘制，可能还需要等到下一次渲染的时候才会显示出来。\n\n``` javascript \nprivate _onframe(): void {\n        if (this._disposed) {\n            return;\n        }\n\n        applyChangedStates(this);\n\n        const scheduler = this._scheduler;\n\n        // Lazy update\n        if (this[PENDING_UPDATE]) {\n            const silent = (this[PENDING_UPDATE] as any).silent;\n\n            this[IN_MAIN_PROCESS_KEY] = true;\n\n            prepare(this);\n            updateMethods.update.call(this, null, this[PENDING_UPDATE].updateParams);\n\n            // At present, in each frame, zrender performs:\n            //   (1) animation step forward.\n            //   (2) trigger('frame') (where this `_onframe` is called)\n            //   (3) zrender flush (render).\n            // If we do nothing here, since we use `setToFinal: true`, the step (3) above\n            // will render the final state of the elements before the real animation started.\n            this._zr.flush();\n\n            this[IN_MAIN_PROCESS_KEY] = false;\n\n            this[PENDING_UPDATE] = null;\n\n            flushPendingActions.call(this, silent);\n\n            triggerUpdatedEvent.call(this, silent);\n        }\n        // Avoid do both lazy update and progress in one frame.\n        else if (scheduler.unfinished) {\n            // Stream progress.\n            let remainTime = TEST_FRAME_REMAIN_TIME;\n            const ecModel = this._model;\n            const api = this._api;\n            scheduler.unfinished = false;\n            do {\n                const startTime = +new Date();\n\n                scheduler.performSeriesTasks(ecModel);\n\n                // Currently dataProcessorFuncs do not check threshold.\n                scheduler.performDataProcessorTasks(ecModel);\n\n                updateStreamModes(this, ecModel);\n\n                // Do not update coordinate system here. Because that coord system update in\n                // each frame is not a good user experience. So we follow the rule that\n                // the extent of the coordinate system is determin in the first frame (the\n                // frame is executed immedietely after task reset.\n                // this._coordSysMgr.update(ecModel, api);\n\n                // console.log('--- ec frame visual ---', remainTime);\n                scheduler.performVisualTasks(ecModel);\n\n                renderSeries(this, this._model, api, 'remain', {});\n\n                remainTime -= (+new Date() - startTime);\n            }\n            while (remainTime > 0 && scheduler.unfinished);\n\n            // Call flush explicitly for trigger finished event.\n            if (!scheduler.unfinished) {\n                this._zr.flush();\n            }\n            // Else, zr flushing be ensue within the same frame,\n            // because zr flushing is after onframe event.\n        }\n   }\n```\n对于echarts的渲染分析就到这了，下次有机会我们自己动手写一个ChartView。","source":"_posts/echarts5图表渲染过程分析.md","raw":"---\ntitle: echarts5图表渲染过程分析\nauthor: 王登武\ndate: 2021-11-10 16:35:17\ncategories: 前端\ntags: \n - 图表\n  - echarts\n \n---\n\n### Echarts快速入门\nEcharts就不做过多介绍了，相信大家都听说或者使用过，现在以官方给的第一个快速入门为基础，分析一下渲染过程。示例代码如下\n\n``` javascript\n<div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n<script type=\"text/javascript\">\n\n    // 基于准备好的dom，初始化echarts实例\n    var myChart = echarts.init(document.getElementById('main'));\n\n    // 指定图表的配置项和数据\n    var option = {\n      title: {\n        text: 'ECharts 入门示例'\n      },\n      tooltip: {},\n      legend: {\n        data: ['销量']\n      },\n      xAxis: {\n        data: ['衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子']\n      },\n      yAxis: {},\n      series: [\n        {\n          name: '销量',\n          type: 'bar',\n          data: [5, 20, 36, 10, 10, 20]\n        }\n      ]\n    };\n\n    // 使用刚指定的配置项和数据显示图表。\n    myChart.setOption(option);\n  </script>\n```\n渲染出来的效果就是这样的\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211112181806.png)\n### 代码分析\necharts是依赖zrender来绘制的，上述代码可以看到调用了echarts的2个方法，**init**和**setOption**,5.x版本的echarts是使用typescript写的。\n先看下init方法的定义,在src/echarts.ts里,为了更简洁清晰，后续代码我删掉了非主干流程渲染的部分内容。\n\n``` javascript\nimport { init } from './core/echarts';\nexport default {\n    init() {\n        return init.apply(null, arguments);\n    }\n};\n```\n真正的init方法其实是./core/echarts里的\n\n``` javascript\nexport function init(\n    dom: HTMLElement,\n    theme?: string | object,\n    opts?: EChartsInitOpts\n): EChartsType {\n    const existInstance = getInstanceByDom(dom);\n    if (existInstance) {\n         return existInstance;\n    }\n    const chart = new ECharts(dom, theme, opts);\n    chart.id = 'ec_' + idBase++;\n    instances[chart.id] = chart;\n\n    modelUtil.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);\n\n    enableConnect(chart);\n\n    lifecycle.trigger('afterinit', chart);\n\n    return chart;\n}\n```\n代码实例化了ECharts对象，构造函数代码\n\n``` javascript\nclass ECharts extends Eventful<ECEventDefinition> {\n\t constructor(\n\t        dom: HTMLElement,\n\t        // Theme name or themeOption.\n\t        theme?: string | ThemeOption,\n\t        opts?: EChartsInitOpts\n\t    ) {\n\t        super(new ECEventProcessor());\n\t\n\t        opts = opts || {};\n\t\n\t        // Get theme by name\n\t        if (typeof theme === 'string') {\n\t            theme = themeStorage[theme] as object;\n\t        }\n\t\n\t        this._dom = dom;\n\t\n\t        let defaultRenderer = 'canvas';\n\t        let defaultUseDirtyRect = false;\n\t        \n\t        const zr = this._zr = zrender.init(dom, {\n\t            renderer: opts.renderer || defaultRenderer,\n\t            devicePixelRatio: opts.devicePixelRatio,\n\t            width: opts.width,\n\t            height: opts.height,\n\t            useDirtyRect: opts.useDirtyRect == null ? defaultUseDirtyRect : opts.useDirtyRect\n\t        });\n\t\n\t        // Expect 60 fps.\n\t        this._throttledZrFlush = throttle(bind(zr.flush, zr), 17);\n\t\n\t        theme = clone(theme);\n\t        theme && backwardCompat(theme as ECUnitOption, true);\n\t\n\t        this._theme = theme;\n\t\n\t        this._locale = createLocaleObject(opts.locale || SYSTEM_LANG);\n\t\n\t        this._coordSysMgr = new CoordinateSystemManager();\n\t\n\t        const api = this._api = createExtensionAPI(this);\n\t\n\t        // Sort on demand\n\t        function prioritySortFunc(a: StageHandlerInternal, b: StageHandlerInternal): number {\n\t            return a.__prio - b.__prio;\n\t        }\n\t        timsort(visualFuncs, prioritySortFunc);\n\t        timsort(dataProcessorFuncs, prioritySortFunc);\n\t\n\t        this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);\n\t\n\t        this._messageCenter = new MessageCenter();\n\t\n\t        // Init mouse events\n\t        this._initEvents();\n\t\n\t        // In case some people write `window.onresize = chart.resize`\n\t        this.resize = bind(this.resize, this);\n\t\n\t        zr.animation.on('frame', this._onframe, this);\n\t\n\t        bindRenderedEvent(zr, this);\n\t\n\t        bindMouseEvent(zr, this);\n\t\n\t        // ECharts instance can be used as value.\n\t        setAsPrimitive(this);\n\t  }\n    }\n``` \n内容比较多，重点代码是初始化了zrender\n\n``` javascript\nconst zr = this._zr = zrender.init(dom, {\n\t            renderer: opts.renderer || defaultRenderer,\n\t            devicePixelRatio: opts.devicePixelRatio,\n\t            width: opts.width,\n\t            height: opts.height,\n\t            useDirtyRect: opts.useDirtyRect == null ? defaultUseDirtyRect : opts.useDirtyRect\n });\n```\n初始化了`this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);`,后续series渲染的时候会用到。\n同时注册了渲染回调`zr.animation.on('frame', this._onframe, this);`\n\n在分析setOption方法之前，有必要先说一下echarts的组件设计思想，我们示例里看到的绘制出来的图形，其实是很多组件构成的，echarts主要分成2类，一类是ComponentView，一类是ChartView。分别在src/chart下面和src/component下面。\n先看下父类ComponentView(src/view/Component.ts)定义\n\n``` javascript\nclass ComponentView {\n    readonly group: ViewRootGroup;\n    readonly uid: string;\n    __model: ComponentModel;\n    __alive: boolean;\n    __id: string;\n\n    constructor() {\n        this.group = new Group();\n        this.uid = componentUtil.getUID('viewComponent');\n    }\n\n    init(ecModel: GlobalModel, api: ExtensionAPI): void {}\n\n    render(model: ComponentModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {}\n\n    dispose(ecModel: GlobalModel, api: ExtensionAPI): void {}\n\n    updateView(model: ComponentModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        // Do nothing;\n    }\n\n    updateLayout(model: ComponentModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        // Do nothing;\n    }\n\n    updateVisual(model: ComponentModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        // Do nothing;\n    }\n\n    /**\n     * Hook for blur target series.\n     * Can be used in marker for blur the markers\n     */\n    blurSeries(seriesModels: SeriesModel[], ecModel: GlobalModel): void {\n         // Do nothing;\n    }\n\n    static registerClass: clazzUtil.ClassManager['registerClass'];\n};\n```\n最主要的2个方法init和render是由各个组件子类来实现的。\nChartView(src/view/Chart.ts)\n\n``` javascript\nclass ChartView {\n    type: string;\n    readonly group: ViewRootGroup;\n    readonly uid: string;\n    readonly renderTask: SeriesTask;\n    ignoreLabelLineUpdate: boolean;\n    __alive: boolean;\n    __model: SeriesModel;\n    __id: string;\n\n    static protoInitialize = (function () {\n        const proto = ChartView.prototype;\n        proto.type = 'chart';\n    })();\n\n    constructor() {\n        this.group = new Group();\n        this.uid = componentUtil.getUID('viewChart');\n\n        this.renderTask = createTask<SeriesTaskContext>({\n            plan: renderTaskPlan,\n            reset: renderTaskReset\n        });\n        this.renderTask.context = {view: this} as SeriesTaskContext;\n    }\n\n    init(ecModel: GlobalModel, api: ExtensionAPI): void {}\n\n    render(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {}\n\n    highlight(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n    }\n\n    downplay(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        toggleHighlight(seriesModel.getData(), payload, 'normal');\n    }\n\n    remove(ecModel: GlobalModel, api: ExtensionAPI): void {\n        this.group.removeAll();\n    }\n    dispose(ecModel: GlobalModel, api: ExtensionAPI): void {}\n    updateView(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        this.render(seriesModel, ecModel, api, payload);\n    }\n\n    // FIXME never used?\n    updateLayout(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        this.render(seriesModel, ecModel, api, payload);\n    }\n\n    // FIXME never used?\n    updateVisual(seriesModel: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload): void {\n        this.render(seriesModel, ecModel, api, payload);\n    }\n\n    static markUpdateMethod(payload: Payload, methodName: keyof ChartView): void {\n        inner(payload).updateMethod = methodName;\n    }\n\n    static registerClass: clazzUtil.ClassManager['registerClass'];\n};\n```\n也是需要关注init和render方法，但是额外不一样的是构造函数里初始化了renderTask，这块在渲染数据的时候会用到。\n下面再回到setOption方法，我们来看看setOption(src/core/echarts.ts)的实现\n\n``` javascript\nsetOption<Opt extends ECBasicOption>(option: Opt, notMerge?: boolean | SetOptionOpts, lazyUpdate?: boolean): void {\n        if (this._disposed) {\n            disposedWarning(this.id);\n            return;\n        }\n\n        let silent;\n        let replaceMerge;\n        let transitionOpt: SetOptionTransitionOpt;\n        if (isObject(notMerge)) {\n            lazyUpdate = notMerge.lazyUpdate;\n            silent = notMerge.silent;\n            replaceMerge = notMerge.replaceMerge;\n            transitionOpt = notMerge.transition;\n            notMerge = notMerge.notMerge;\n        }\n\n        this[IN_MAIN_PROCESS_KEY] = true;\n\n        if (!this._model || notMerge) {\n            const optionManager = new OptionManager(this._api);\n            const theme = this._theme;\n            const ecModel = this._model = new GlobalModel();\n            ecModel.scheduler = this._scheduler;\n            ecModel.init(null, null, null, theme, this._locale, optionManager);\n        }\n\n        this._model.setOption(option as ECBasicOption, { replaceMerge }, optionPreprocessorFuncs);\n\n        const updateParams = {\n            seriesTransition: transitionOpt,\n            optionChanged: true\n        } as UpdateLifecycleParams;\n\n        if (lazyUpdate) {\n            this[PENDING_UPDATE] = {\n                silent: silent,\n                updateParams: updateParams\n            };\n            this[IN_MAIN_PROCESS_KEY] = false;\n\n            // `setOption(option, {lazyMode: true})` may be called when zrender has been slept.\n            // It should wake it up to make sure zrender start to render at the next frame.\n            this.getZr().wakeUp();\n        }\n        else {\n            prepare(this);\n\n            updateMethods.update.call(this, null, updateParams);\n\n            // Ensure zr refresh sychronously, and then pixel in canvas can be\n            // fetched after `setOption`.\n            this._zr.flush();\n\n            this[PENDING_UPDATE] = null;\n            this[IN_MAIN_PROCESS_KEY] = false;\n\n            flushPendingActions.call(this, silent);\n            triggerUpdatedEvent.call(this, silent);\n        }\n    }\n```\n初始化model，`this._model.setOption(option as ECBasicOption, { replaceMerge }, optionPreprocessorFuncs);` \n`prepare(this);`的方法实现\n\n``` javascript\nprepare = function (ecIns: ECharts): void {\n            const scheduler = ecIns._scheduler;\n\n            scheduler.restorePipelines(ecIns._model);\n            scheduler.prepareStageTasks();\n\n            prepareView(ecIns, true);\n            prepareView(ecIns, false);\n\n            scheduler.plan();\n};\n```\n``` javascript\nrestorePipelines(ecModel: GlobalModel): void {\n        const scheduler = this;\n        const pipelineMap = scheduler._pipelineMap = createHashMap();\n\n        ecModel.eachSeries(function (seriesModel) {\n            const progressive = seriesModel.getProgressive();\n            const pipelineId = seriesModel.uid;\n\n            pipelineMap.set(pipelineId, {\n                id: pipelineId,\n                head: null,\n                tail: null,\n                threshold: seriesModel.getProgressiveThreshold(),\n                progressiveEnabled: progressive\n                    && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),\n                blockIndex: -1,\n                step: Math.round(progressive || 700),\n                count: 0\n            });\n\n            scheduler._pipe(seriesModel, seriesModel.dataTask);\n        });\n    }\n```\n其中seriesModel的内容:\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211113135714.png)\n\n``` javascript\nprivate _pipe(seriesModel: SeriesModel, task: GeneralTask) {\n        const pipelineId = seriesModel.uid;\n        const pipeline = this._pipelineMap.get(pipelineId);\n        !pipeline.head && (pipeline.head = task);\n        pipeline.tail && pipeline.tail.pipe(task);\n        pipeline.tail = task;\n        task.__idxInPipeline = pipeline.count++;\n        task.__pipeline = pipeline;\n  }\n```\n通过_pipe方法就将task加到了pipeline里，等待后续执行task进行渲染。\nprepareView(ecIns, true);\nprepareView(ecIns, false);\n分别执行ComponentView和ChartView的init方法，具体怎么找到对应的clazz呢？\n\n``` javascript\nfunction doPrepare(model: ComponentModel): void {\n                const requireNewView = model.__requireNewView;\n                model.__requireNewView = false;\n                const viewId = '_ec_' + model.id + '_' + model.type;\n                let view = !requireNewView && viewMap[viewId];\n                if (!view) {\n                    const classType = parseClassType(model.type);\n                    const Clazz = isComponent\n                        ? (ComponentView as ComponentViewConstructor).getClass(classType.main, classType.sub)\n                        : (\n                                     (ChartView as ChartViewConstructor).getClass(classType.sub)\n                        );\n\n                    if (__DEV__) {\n                        assert(Clazz, classType.sub + ' does not exist.');\n                    }\n\n                    view = new Clazz();\n                    view.init(ecModel, api);\n                    viewMap[viewId] = view;\n                    viewList.push(view as any);\n                    zr.add(view.group);\n                }\n\n                model.__viewId = view.__id = viewId;\n                view.__alive = true;\n                view.__model = model;\n                view.group.__ecComponentInfo = {\n                    mainType: model.mainType,\n                    index: model.componentIndex\n                };\n                !isComponent && scheduler.prepareView(\n                    view as ChartView, model as SeriesModel, ecModel, api\n                );\n     }\n```\n\n``` javascript\n(ComponentView as ComponentViewConstructor).getClass(classType.main, classType.sub)\n\nimport * as clazzUtil from '../util/clazz';\nexport type ComponentViewConstructor = typeof ComponentView\n    & clazzUtil.ExtendableConstructor\n    & clazzUtil.ClassManager;\n\nclazzUtil.enableClassExtend(ComponentView as ComponentViewConstructor);\nclazzUtil.enableClassManagement(ComponentView as ComponentViewConstructor);\n\ntarget.getClass = function (\n        mainType: ComponentMainType,\n        subType?: ComponentSubType,\n        throwWhenNotFound?: boolean\n    ): Constructor {\n        let clz = storage[mainType];\n\n        if (clz && (clz as SubclassContainer)[IS_CONTAINER]) {\n            clz = subType ? (clz as SubclassContainer)[subType] : null;\n        }\n\n        if (throwWhenNotFound && !clz) {\n            throw new Error(\n                !subType\n                    ? mainType + '.' + 'type should be specified.'\n                    : 'Component ' + mainType + '.' + (subType || '') + ' is used but not imported.'\n            );\n        }\n\n        return clz as Constructor;\n };\n \n target.registerClass = function (\n        clz: Constructor\n    ): Constructor {\n        const componentFullType = (clz as any).type || clz.prototype.type;\n        if (componentFullType) {\n            checkClassType(componentFullType);\n            clz.prototype.type = componentFullType;\n            const componentTypeInfo = parseClassType(componentFullType);\n            if (!componentTypeInfo.sub) {\n                    storage[componentTypeInfo.main] = clz;\n            }\n            else if (componentTypeInfo.sub !== IS_CONTAINER) {\n                const container = makeContainer(componentTypeInfo);\n                container[componentTypeInfo.sub] = clz;\n            }\n        }\n        return clz;\n  };\n  //以TitleView为例\n  class TitleView extends ComponentView {\n\n    static type = 'title' as const;\n    type = TitleView.type;\n```\n``` javascript\nprepareView(view: ChartView, model: SeriesModel, ecModel: GlobalModel, api: ExtensionAPI): void {\n        const renderTask = view.renderTask;\n        const context = renderTask.context;\n\n        context.model = model;\n        context.ecModel = ecModel;\n        context.api = api;\n\n        renderTask.__block = !view.incrementalPrepareRender;\n\n        this._pipe(model, renderTask);\n    }\n```\n \n而BarView不同的地方在，将renderTask加入了pipeline。\nsetOption里的`prepare(this);`执行完了，总结一下就是初始化Model，初始化对应的ComponentView和ChartView并将series对应的task加入pipeline，再来看下`updateMethods.update.call(this, null, updateParams);`\n\n``` javascript\nupdateMethods = {\n            update(this: ECharts, payload: Payload, updateParams: UpdateLifecycleParams): void {\n                const ecModel = this._model;\n                const api = this._api;\n                const zr = this._zr;\n                const coordSysMgr = this._coordSysMgr;\n                const scheduler = this._scheduler;\n                // update before setOption\n                if (!ecModel) {\n                    return;\n                }\n                ecModel.setUpdatePayload(payload);\n                scheduler.restoreData(ecModel, payload);\n                scheduler.performSeriesTasks(ecModel);\n                coordSysMgr.create(ecModel, api);\n                scheduler.performDataProcessorTasks(ecModel, payload);\n                updateStreamModes(this, ecModel);\n                coordSysMgr.update(ecModel, api);\n                clearColorPalette(ecModel);\n                scheduler.performVisualTasks(ecModel, payload);\n                \n                render(this, ecModel, api, payload, updateParams);\n\n                // Set background\n                let backgroundColor = ecModel.get('backgroundColor') || 'transparent';\n                const darkMode = ecModel.get('darkMode');\n\n                // In IE8\n                if (!env.canvasSupported) {\n                    const colorArr = colorTool.parse(backgroundColor as ColorString);\n                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\n                    if (colorArr[3] === 0) {\n                        backgroundColor = 'transparent';\n                    }\n                }\n                else {\n                    zr.setBackgroundColor(backgroundColor);\n\n                    // Force set dark mode.\n                    if (darkMode != null && darkMode !== 'auto') {\n                        zr.setDarkMode(darkMode);\n                    }\n                }\n\n                lifecycle.trigger('afterupdate', ecModel, api);\n            },\n\n```\n最主要的是`render(this, ecModel, api, payload, updateParams);`方法，\n\n``` javascript\nrender = (\n            ecIns: ECharts, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload,\n            updateParams: UpdateLifecycleParams\n        ) => {\n\n            renderComponents(ecIns, ecModel, api, payload, updateParams);\n\n            each(ecIns._chartsViews, function (chart: ChartView) {\n                chart.__alive = false;\n            });\n\n            renderSeries(ecIns, ecModel, api, payload, updateParams);\n\n            // Remove groups of unrendered charts\n            each(ecIns._chartsViews, function (chart: ChartView) {\n                if (!chart.__alive) {\n                    chart.remove(ecModel, api);\n                }\n            });\n     };\n```\n先来看下`renderComponents(ecIns, ecModel, api, payload, updateParams);`\n\n``` javascript\nrenderComponents = (\n            ecIns: ECharts, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload,\n            updateParams: UpdateLifecycleParams, dirtyList?: ComponentView[]\n        ) => {\n            each(dirtyList || ecIns._componentsViews, function (componentView: ComponentView) {\n                const componentModel = componentView.__model;\n                clearStates(componentModel, componentView);\n\n                componentView.render(componentModel, ecModel, api, payload);\n\n                updateZ(componentModel, componentView);\n\n                updateStates(componentModel, componentView);\n            });\n\n    };\n```\necIns就是echarts实例，那针对这个示例都有哪些_componentsViews呢，\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114010528.png)\n拿其中一个TitleView来细看一下\n\n``` javascript\nrender(titleModel: TitleModel, ecModel: GlobalModel, api: ExtensionAPI) {\n        this.group.removeAll();\n        const group = this.group;\n\n       \n        const textEl = new graphic.Text({\n            style: createTextStyle(textStyleModel, {\n                text: titleModel.get('text'),\n                fill: textStyleModel.getTextColor()\n            }, {disableBox: true}),\n            z2: 10\n        });\n\n        group.add(textEl);\n        \n    }\n}\n```\nrender方法实在太长了，我删掉了样式，子标题，背景，标题框等相关代码，只留下Text渲染相关的了。\n可以看到，真正的渲染是调用了zrender的graphic.Text，并添加到了group里。\n再来看renderSeries\n\n``` javascript\nrenderSeries = (\n            ecIns: ECharts,\n            ecModel: GlobalModel,\n            api: ExtensionAPI,\n            payload: Payload | 'remain',\n            updateParams: UpdateLifecycleParams,\n            dirtyMap?: {[uid: string]: any}\n        ) => {\n            // Render all charts\n            const scheduler = ecIns._scheduler;\n\n            updateParams = extend(updateParams || {}, {\n                updatedSeries: ecModel.getSeries()\n            });\n\n            let unfinished: boolean = false;\n            ecModel.eachSeries(function (seriesModel) {\n                const chartView = ecIns._chartsMap[seriesModel.__viewId];\n                chartView.__alive = true;\n\n                const renderTask = chartView.renderTask;\n                 if (renderTask.perform(scheduler.getPerformArgs(renderTask))) {\n                    unfinished = true;\n                }\n\n            });\n     };\n```\n最重要的就是调用了renderTask.perform\nTask(src/core/task.ts)的perform方法。方法比较长，我就不贴代码了，主干是调用了`                    this._doProgress(progress, start, end, modBy, modDataCount);`\n\n``` javascript\nconst progressMethodMap: {[method: string]: TaskResetCallbackReturn<SeriesTaskContext>} = {\n    incrementalPrepareRender: {\n        progress: function (params: StageHandlerProgressParams, context: SeriesTaskContext): void {\n            context.view.incrementalRender(\n                params, context.model, context.ecModel, context.api, context.payload\n            );\n        }\n    },\n    render: {\n        // Put view.render in `progress` to support appendData. But in this case\n        // view.render should not be called in reset, otherwise it will be called\n        // twise. Use `forceFirstProgress` to make sure that view.render is called\n        // in any cases.\n        forceFirstProgress: true,\n        progress: function (params: StageHandlerProgressParams, context: SeriesTaskContext): void {\n            context.view.render(\n                context.model, context.ecModel, context.api, context.payload\n            );\n        }\n    }\n};\n```\n紧接着调用了progress方法，而progress方法里调用了view的render，以此示例的BarView举例\n\n``` javascript\nrender(seriesModel: BarSeriesModel, ecModel: GlobalModel, api: ExtensionAPI, payload: Payload) {\n        this._model = seriesModel;\n\n        this._removeOnRenderedListener(api);\n\n        this._updateDrawMode(seriesModel);\n\n        const coordinateSystemType = seriesModel.get('coordinateSystem');\n\n        if (coordinateSystemType === 'cartesian2d'\n            || coordinateSystemType === 'polar'\n        ) {\n            this._isLargeDraw\n                ? this._renderLarge(seriesModel, ecModel, api)\n                : this._renderNormal(seriesModel, ecModel, api, payload);\n        }\n        else if (__DEV__) {\n            warn('Only cartesian2d and polar supported for bar.');\n        }\n    }\n```\n根据是否是_isLargeDraw而分别调用不同的render，本示走的是_renderNormal方法。\n\n``` javascript\nprivate _renderNormal(\n        seriesModel: BarSeriesModel,\n        ecModel: GlobalModel,\n        api: ExtensionAPI,\n        payload: Payload\n    ): void {\n        const group = this.group;\n        const data = seriesModel.getData();\n        const oldData = this._data;\n        data.diff(oldData)\n            .add(function (dataIndex) {\n                const itemModel = data.getItemModel<BarDataItemOption>(dataIndex);\n                const layout = getLayout[coord.type](data, dataIndex, itemModel);\n                const el = elementCreator[coord.type](\n                    seriesModel,\n                    data,\n                    dataIndex,\n                    layout,\n                    isHorizontalOrRadial,\n                    animationModel,\n                    baseAxis.model,\n                    false,\n                    roundCap\n                );\n                group.add(el);\n            })\n            .execute();\n        this._data = data;\n    }\n    \n    const elementCreator: {\n    [key in 'polar' | 'cartesian2d']: ElementCreator\n} = {\n    cartesian2d(\n        seriesModel, data, newIndex, layout: RectLayout, isHorizontal,\n        animationModel, axisModel, isUpdate, roundCap\n    ) {\n        const rect = new Rect({\n            shape: extend({}, layout),\n            z2: 1\n        });\n        (rect as any).__dataIndex = newIndex;\n\n        rect.name = 'item';\n\n        if (animationModel) {\n            const rectShape = rect.shape;\n            const animateProperty = isHorizontal ? 'height' : 'width' as 'width' | 'height';\n            rectShape[animateProperty] = 0;\n        }\n        return rect;\n    },\n};\n```\n方法太长，我删掉了非主干代码，可以看到最终根据Model的data的diff来进行add,update,remove,最终还是调用了zrender的Rect来画出bar的样子。\n最后贴一下渲染BarView的调用栈\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114021358.png)\n渲染ComponentView比较直接，而渲染ChartView类型的就绕来绕去，主要原因是ChartView可能数据比较多，需要逐步分批渲染，以减少卡顿，保持每秒60帧的渲染，因为1000ms，每一帧不能超过16ms，才能保持流畅的渲染。\n在setOption方法的最后调用了`this._zr.flush();`则直接将绘制渲染出来了，当然对于ChartView的绘制，可能还需要等到下一次渲染的时候才会显示出来。\n\n``` javascript \nprivate _onframe(): void {\n        if (this._disposed) {\n            return;\n        }\n\n        applyChangedStates(this);\n\n        const scheduler = this._scheduler;\n\n        // Lazy update\n        if (this[PENDING_UPDATE]) {\n            const silent = (this[PENDING_UPDATE] as any).silent;\n\n            this[IN_MAIN_PROCESS_KEY] = true;\n\n            prepare(this);\n            updateMethods.update.call(this, null, this[PENDING_UPDATE].updateParams);\n\n            // At present, in each frame, zrender performs:\n            //   (1) animation step forward.\n            //   (2) trigger('frame') (where this `_onframe` is called)\n            //   (3) zrender flush (render).\n            // If we do nothing here, since we use `setToFinal: true`, the step (3) above\n            // will render the final state of the elements before the real animation started.\n            this._zr.flush();\n\n            this[IN_MAIN_PROCESS_KEY] = false;\n\n            this[PENDING_UPDATE] = null;\n\n            flushPendingActions.call(this, silent);\n\n            triggerUpdatedEvent.call(this, silent);\n        }\n        // Avoid do both lazy update and progress in one frame.\n        else if (scheduler.unfinished) {\n            // Stream progress.\n            let remainTime = TEST_FRAME_REMAIN_TIME;\n            const ecModel = this._model;\n            const api = this._api;\n            scheduler.unfinished = false;\n            do {\n                const startTime = +new Date();\n\n                scheduler.performSeriesTasks(ecModel);\n\n                // Currently dataProcessorFuncs do not check threshold.\n                scheduler.performDataProcessorTasks(ecModel);\n\n                updateStreamModes(this, ecModel);\n\n                // Do not update coordinate system here. Because that coord system update in\n                // each frame is not a good user experience. So we follow the rule that\n                // the extent of the coordinate system is determin in the first frame (the\n                // frame is executed immedietely after task reset.\n                // this._coordSysMgr.update(ecModel, api);\n\n                // console.log('--- ec frame visual ---', remainTime);\n                scheduler.performVisualTasks(ecModel);\n\n                renderSeries(this, this._model, api, 'remain', {});\n\n                remainTime -= (+new Date() - startTime);\n            }\n            while (remainTime > 0 && scheduler.unfinished);\n\n            // Call flush explicitly for trigger finished event.\n            if (!scheduler.unfinished) {\n                this._zr.flush();\n            }\n            // Else, zr flushing be ensue within the same frame,\n            // because zr flushing is after onframe event.\n        }\n   }\n```\n对于echarts的渲染分析就到这了，下次有机会我们自己动手写一个ChartView。","slug":"echarts5图表渲染过程分析","published":1,"updated":"2021-11-13T18:35:36.065Z","_id":"ckvwa61i90000049ggzm80bwg","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Echarts快速入门\"><a href=\"#Echarts快速入门\" class=\"headerlink\" title=\"Echarts快速入门\"></a>Echarts快速入门</h3><p>Echarts就不做过多介绍了，相信大家都听说或者使用过，现在以官方给的第一个快速入门为基础，分析一下渲染过程。示例代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"main\"</span> style<span class=\"token operator\">=</span><span class=\"token string\">\"width: 600px;height:400px;\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n\n    <span class=\"token comment\">// 基于准备好的dom，初始化echarts实例</span>\n    <span class=\"token keyword\">var</span> myChart <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 指定图表的配置项和数据</span>\n    <span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      title<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'ECharts 入门示例'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      tooltip<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      legend<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'销量'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'衬衫'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'羊毛衫'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'雪纺衫'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'裤子'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'高跟鞋'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'袜子'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'销量'</span><span class=\"token punctuation\">,</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n          data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 使用刚指定的配置项和数据显示图表。</span>\n    myChart<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>渲染出来的效果就是这样的<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211112181806.png\"></p>\n<h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><p>echarts是依赖zrender来绘制的，上述代码可以看到调用了echarts的2个方法，<strong>init</strong>和<strong>setOption</strong>,5.x版本的echarts是使用typescript写的。<br>先看下init方法的定义,在src/echarts.ts里,为了更简洁清晰，后续代码我删掉了非主干流程渲染的部分内容。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> init <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./core/echarts'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>真正的init方法其实是./core/echarts里的</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">dom<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span>\n    theme<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> object<span class=\"token punctuation\">,</span>\n    opts<span class=\"token operator\">?</span><span class=\"token operator\">:</span> EChartsInitOpts</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> EChartsType <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> existInstance <span class=\"token operator\">=</span> <span class=\"token function\">getInstanceByDom</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existInstance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span> existInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> chart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ECharts</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    chart<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'ec_'</span> <span class=\"token operator\">+</span> idBase<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    instances<span class=\"token punctuation\">[</span>chart<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chart<span class=\"token punctuation\">;</span>\n\n    modelUtil<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> <span class=\"token constant\">DOM_ATTRIBUTE_KEY</span><span class=\"token punctuation\">,</span> chart<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">enableConnect</span><span class=\"token punctuation\">(</span>chart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'afterinit'</span><span class=\"token punctuation\">,</span> chart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> chart<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码实例化了ECharts对象，构造函数代码</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ECharts</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Eventful</span><span class=\"token operator\">&lt;</span>ECEventDefinition<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\t <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n\t        dom<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span>\n\t        <span class=\"token comment\">// Theme name or themeOption.</span>\n\t        theme<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> ThemeOption<span class=\"token punctuation\">,</span>\n\t        opts<span class=\"token operator\">?</span><span class=\"token operator\">:</span> EChartsInitOpts\n\t    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ECEventProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        opts <span class=\"token operator\">=</span> opts <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// Get theme by name</span>\n\t        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> theme <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t            theme <span class=\"token operator\">=</span> themeStorage<span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> object<span class=\"token punctuation\">;</span>\n\t        <span class=\"token punctuation\">&#125;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_dom <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">let</span> defaultRenderer <span class=\"token operator\">=</span> <span class=\"token string\">'canvas'</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token keyword\">let</span> defaultUseDirtyRect <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t        \n\t        <span class=\"token keyword\">const</span> zr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr <span class=\"token operator\">=</span> zrender<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n\t            renderer<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">||</span> defaultRenderer<span class=\"token punctuation\">,</span>\n\t            devicePixelRatio<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>devicePixelRatio<span class=\"token punctuation\">,</span>\n\t            width<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n\t            height<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span>\n\t            useDirtyRect<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>useDirtyRect <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> defaultUseDirtyRect <span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>useDirtyRect\n\t        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// Expect 60 fps.</span>\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_throttledZrFlush <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>zr<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">,</span> zr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        theme <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        theme <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">backwardCompat</span><span class=\"token punctuation\">(</span>theme <span class=\"token keyword\">as</span> ECUnitOption<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_theme <span class=\"token operator\">=</span> theme<span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_locale <span class=\"token operator\">=</span> <span class=\"token function\">createLocaleObject</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>locale <span class=\"token operator\">||</span> <span class=\"token constant\">SYSTEM_LANG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_coordSysMgr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CoordinateSystemManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_api <span class=\"token operator\">=</span> <span class=\"token function\">createExtensionAPI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// Sort on demand</span>\n\t        <span class=\"token keyword\">function</span> <span class=\"token function\">prioritySortFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> StageHandlerInternal<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> StageHandlerInternal</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n\t            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>__prio <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>__prio<span class=\"token punctuation\">;</span>\n\t        <span class=\"token punctuation\">&#125;</span>\n\t        <span class=\"token function\">timsort</span><span class=\"token punctuation\">(</span>visualFuncs<span class=\"token punctuation\">,</span> prioritySortFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token function\">timsort</span><span class=\"token punctuation\">(</span>dataProcessorFuncs<span class=\"token punctuation\">,</span> prioritySortFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scheduler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> dataProcessorFuncs<span class=\"token punctuation\">,</span> visualFuncs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_messageCenter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// Init mouse events</span>\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_initEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// In case some people write `window.onresize = chart.resize`</span>\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resize <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        zr<span class=\"token punctuation\">.</span>animation<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onframe<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token function\">bindRenderedEvent</span><span class=\"token punctuation\">(</span>zr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token function\">bindMouseEvent</span><span class=\"token punctuation\">(</span>zr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// ECharts instance can be used as value.</span>\n\t        <span class=\"token function\">setAsPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>内容比较多，重点代码是初始化了zrender</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> zr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr <span class=\"token operator\">=</span> zrender<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n\t            renderer<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">||</span> defaultRenderer<span class=\"token punctuation\">,</span>\n\t            devicePixelRatio<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>devicePixelRatio<span class=\"token punctuation\">,</span>\n\t            width<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n\t            height<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span>\n\t            useDirtyRect<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>useDirtyRect <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> defaultUseDirtyRect <span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>useDirtyRect\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>初始化了<code>this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);</code>,后续series渲染的时候会用到。<br>同时注册了渲染回调<code>zr.animation.on(&#39;frame&#39;, this._onframe, this);</code></p>\n<p>在分析setOption方法之前，有必要先说一下echarts的组件设计思想，我们示例里看到的绘制出来的图形，其实是很多组件构成的，echarts主要分成2类，一类是ComponentView，一类是ChartView。分别在src/chart下面和src/component下面。<br>先看下父类ComponentView(src/view/Component.ts)定义</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentView</span> <span class=\"token punctuation\">&#123;</span>\n    readonly group<span class=\"token operator\">:</span> ViewRootGroup<span class=\"token punctuation\">;</span>\n    readonly uid<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    __model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">;</span>\n    __alive<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n    __id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> componentUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getUID</span><span class=\"token punctuation\">(</span><span class=\"token string\">'viewComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Do nothing;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">updateLayout</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Do nothing;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">updateVisual</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Do nothing;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Hook for blur target series.\n     * Can be used in marker for blur the markers\n     */</span>\n    <span class=\"token function\">blurSeries</span><span class=\"token punctuation\">(</span>seriesModels<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// Do nothing;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> registerClass<span class=\"token operator\">:</span> clazzUtil<span class=\"token punctuation\">.</span>ClassManager<span class=\"token punctuation\">[</span><span class=\"token string\">'registerClass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最主要的2个方法init和render是由各个组件子类来实现的。<br>ChartView(src/view/Chart.ts)</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ChartView</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    readonly group<span class=\"token operator\">:</span> ViewRootGroup<span class=\"token punctuation\">;</span>\n    readonly uid<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    readonly renderTask<span class=\"token operator\">:</span> SeriesTask<span class=\"token punctuation\">;</span>\n    ignoreLabelLineUpdate<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n    __alive<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n    __model<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">;</span>\n    __id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> protoInitialize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token class-name\">ChartView</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n        proto<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'chart'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> componentUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getUID</span><span class=\"token punctuation\">(</span><span class=\"token string\">'viewChart'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderTask <span class=\"token operator\">=</span> createTask<span class=\"token operator\">&lt;</span>SeriesTaskContext<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            plan<span class=\"token operator\">:</span> renderTaskPlan<span class=\"token punctuation\">,</span>\n            reset<span class=\"token operator\">:</span> renderTaskReset\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderTask<span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>view<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> SeriesTaskContext<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">highlight</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">toggleHighlight</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> <span class=\"token string\">'emphasis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">downplay</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">toggleHighlight</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// FIXME never used?</span>\n    <span class=\"token function\">updateLayout</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// FIXME never used?</span>\n    <span class=\"token function\">updateVisual</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token function\">markUpdateMethod</span><span class=\"token punctuation\">(</span>payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">,</span> methodName<span class=\"token operator\">:</span> keyof ChartView<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>updateMethod <span class=\"token operator\">=</span> methodName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> registerClass<span class=\"token operator\">:</span> clazzUtil<span class=\"token punctuation\">.</span>ClassManager<span class=\"token punctuation\">[</span><span class=\"token string\">'registerClass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也是需要关注init和render方法，但是额外不一样的是构造函数里初始化了renderTask，这块在渲染数据的时候会用到。<br>下面再回到setOption方法，我们来看看setOption(src/core/echarts.ts)的实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">setOption<span class=\"token operator\">&lt;</span>Opt <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ECBasicOption</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>option<span class=\"token operator\">:</span> Opt<span class=\"token punctuation\">,</span> notMerge<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">|</span> SetOptionOpts<span class=\"token punctuation\">,</span> lazyUpdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disposed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">disposedWarning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">let</span> silent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> replaceMerge<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> transitionOpt<span class=\"token operator\">:</span> SetOptionTransitionOpt<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>notMerge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            lazyUpdate <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>lazyUpdate<span class=\"token punctuation\">;</span>\n            silent <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>silent<span class=\"token punctuation\">;</span>\n            replaceMerge <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>replaceMerge<span class=\"token punctuation\">;</span>\n            transitionOpt <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>transition<span class=\"token punctuation\">;</span>\n            notMerge <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>notMerge<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model <span class=\"token operator\">||</span> notMerge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> optionManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptionManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_theme<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> ecModel <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ecModel<span class=\"token punctuation\">.</span>scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n            ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_locale<span class=\"token punctuation\">,</span> optionManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span>option <span class=\"token keyword\">as</span> ECBasicOption<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> replaceMerge <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> optionPreprocessorFuncs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> updateParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            seriesTransition<span class=\"token operator\">:</span> transitionOpt<span class=\"token punctuation\">,</span>\n            optionChanged<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> UpdateLifecycleParams<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                silent<span class=\"token operator\">:</span> silent<span class=\"token punctuation\">,</span>\n                updateParams<span class=\"token operator\">:</span> updateParams\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// `setOption(option, &#123;lazyMode: true&#125;)` may be called when zrender has been slept.</span>\n            <span class=\"token comment\">// It should wake it up to make sure zrender start to render at the next frame.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getZr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">wakeUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            updateMethods<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Ensure zr refresh sychronously, and then pixel in canvas can be</span>\n            <span class=\"token comment\">// fetched after `setOption`.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">flushPendingActions</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> silent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">triggerUpdatedEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> silent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>初始化model，<code>this._model.setOption(option as ECBasicOption, &#123; replaceMerge &#125;, optionPreprocessorFuncs);</code><br><code>prepare(this);</code>的方法实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">prepare</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ecIns<span class=\"token operator\">:</span> ECharts</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> ecIns<span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n\n            scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">restorePipelines</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStageTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">prepareView</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">prepareView</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">plan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">restorePipelines</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> pipelineMap <span class=\"token operator\">=</span> scheduler<span class=\"token punctuation\">.</span>_pipelineMap <span class=\"token operator\">=</span> <span class=\"token function\">createHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">eachSeries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">seriesModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> progressive <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getProgressive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> pipelineId <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">;</span>\n\n            pipelineMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>pipelineId<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n                id<span class=\"token operator\">:</span> pipelineId<span class=\"token punctuation\">,</span>\n                head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                tail<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                threshold<span class=\"token operator\">:</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getProgressiveThreshold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                progressiveEnabled<span class=\"token operator\">:</span> progressive\n                    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">.</span>preventIncremental <span class=\"token operator\">&amp;&amp;</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">preventIncremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                blockIndex<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                step<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>progressive <span class=\"token operator\">||</span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">_pipe</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> seriesModel<span class=\"token punctuation\">.</span>dataTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中seriesModel的内容:<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211113135714.png\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">private</span> <span class=\"token function\">_pipe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> task<span class=\"token operator\">:</span> GeneralTask</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> pipelineId <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> pipeline <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_pipelineMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pipelineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">!</span>pipeline<span class=\"token punctuation\">.</span>head <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pipeline<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">&amp;&amp;</span> pipeline<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pipeline<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> task<span class=\"token punctuation\">;</span>\n        task<span class=\"token punctuation\">.</span>__idxInPipeline <span class=\"token operator\">=</span> pipeline<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        task<span class=\"token punctuation\">.</span>__pipeline <span class=\"token operator\">=</span> pipeline<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过_pipe方法就将task加到了pipeline里，等待后续执行task进行渲染。<br>prepareView(ecIns, true);<br>prepareView(ecIns, false);<br>分别执行ComponentView和ChartView的init方法，具体怎么找到对应的clazz呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doPrepare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">model<span class=\"token operator\">:</span> ComponentModel</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> requireNewView <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>__requireNewView<span class=\"token punctuation\">;</span>\n                model<span class=\"token punctuation\">.</span>__requireNewView <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> viewId <span class=\"token operator\">=</span> <span class=\"token string\">'_ec_'</span> <span class=\"token operator\">+</span> model<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'_'</span> <span class=\"token operator\">+</span> model<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>requireNewView <span class=\"token operator\">&amp;&amp;</span> viewMap<span class=\"token punctuation\">[</span>viewId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">const</span> classType <span class=\"token operator\">=</span> <span class=\"token function\">parseClassType</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">const</span> Clazz <span class=\"token operator\">=</span> isComponent\n                        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>ComponentView <span class=\"token keyword\">as</span> ComponentViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span>classType<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">,</span> classType<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n                                     <span class=\"token punctuation\">(</span>ChartView <span class=\"token keyword\">as</span> ChartViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span>classType<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>Clazz<span class=\"token punctuation\">,</span> classType<span class=\"token punctuation\">.</span>sub <span class=\"token operator\">+</span> <span class=\"token string\">' does not exist.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                    view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clazz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    view<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    viewMap<span class=\"token punctuation\">[</span>viewId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> view<span class=\"token punctuation\">;</span>\n                    viewList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>view <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    zr<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                model<span class=\"token punctuation\">.</span>__viewId <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>__id <span class=\"token operator\">=</span> viewId<span class=\"token punctuation\">;</span>\n                view<span class=\"token punctuation\">.</span>__alive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                view<span class=\"token punctuation\">.</span>__model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n                view<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span>__ecComponentInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                    mainType<span class=\"token operator\">:</span> model<span class=\"token punctuation\">.</span>mainType<span class=\"token punctuation\">,</span>\n                    index<span class=\"token operator\">:</span> model<span class=\"token punctuation\">.</span>componentIndex\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">!</span>isComponent <span class=\"token operator\">&amp;&amp;</span> scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">prepareView</span><span class=\"token punctuation\">(</span>\n                    view <span class=\"token keyword\">as</span> ChartView<span class=\"token punctuation\">,</span> model <span class=\"token keyword\">as</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>ComponentView <span class=\"token keyword\">as</span> ComponentViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span>classType<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">,</span> classType<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> clazzUtil <span class=\"token keyword\">from</span> <span class=\"token string\">'../util/clazz'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> type ComponentViewConstructor <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> ComponentView\n    <span class=\"token operator\">&amp;</span> clazzUtil<span class=\"token punctuation\">.</span>ExtendableConstructor\n    <span class=\"token operator\">&amp;</span> clazzUtil<span class=\"token punctuation\">.</span>ClassManager<span class=\"token punctuation\">;</span>\n\nclazzUtil<span class=\"token punctuation\">.</span><span class=\"token function\">enableClassExtend</span><span class=\"token punctuation\">(</span>ComponentView <span class=\"token keyword\">as</span> ComponentViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclazzUtil<span class=\"token punctuation\">.</span><span class=\"token function\">enableClassManagement</span><span class=\"token punctuation\">(</span>ComponentView <span class=\"token keyword\">as</span> ComponentViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntarget<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">mainType<span class=\"token operator\">:</span> ComponentMainType<span class=\"token punctuation\">,</span>\n        subType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ComponentSubType<span class=\"token punctuation\">,</span>\n        throwWhenNotFound<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Constructor <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> clz <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">[</span>mainType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clz <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>clz <span class=\"token keyword\">as</span> SubclassContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IS_CONTAINER</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            clz <span class=\"token operator\">=</span> subType <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>clz <span class=\"token keyword\">as</span> SubclassContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>subType<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>throwWhenNotFound <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>clz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">!</span>subType\n                    <span class=\"token operator\">?</span> mainType <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'type should be specified.'</span>\n                    <span class=\"token operator\">:</span> <span class=\"token string\">'Component '</span> <span class=\"token operator\">+</span> mainType <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>subType <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' is used but not imported.'</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> clz <span class=\"token keyword\">as</span> Constructor<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n \n target<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">registerClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">clz<span class=\"token operator\">:</span> Constructor</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Constructor <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> componentFullType <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>clz <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">||</span> clz<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>componentFullType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">checkClassType</span><span class=\"token punctuation\">(</span>componentFullType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            clz<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> componentFullType<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> componentTypeInfo <span class=\"token operator\">=</span> <span class=\"token function\">parseClassType</span><span class=\"token punctuation\">(</span>componentFullType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>componentTypeInfo<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    storage<span class=\"token punctuation\">[</span>componentTypeInfo<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clz<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>componentTypeInfo<span class=\"token punctuation\">.</span>sub <span class=\"token operator\">!==</span> <span class=\"token constant\">IS_CONTAINER</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token function\">makeContainer</span><span class=\"token punctuation\">(</span>componentTypeInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                container<span class=\"token punctuation\">[</span>componentTypeInfo<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clz<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> clz<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//以TitleView为例</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">TitleView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ComponentView</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">static</span> type <span class=\"token operator\">=</span> <span class=\"token string\">'title'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    type <span class=\"token operator\">=</span> TitleView<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">prepareView</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> ChartView<span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> renderTask <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>renderTask<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> renderTask<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span>ecModel <span class=\"token operator\">=</span> ecModel<span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span>api <span class=\"token operator\">=</span> api<span class=\"token punctuation\">;</span>\n\n        renderTask<span class=\"token punctuation\">.</span>__block <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>view<span class=\"token punctuation\">.</span>incrementalPrepareRender<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_pipe</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> renderTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而BarView不同的地方在，将renderTask加入了pipeline。<br>setOption里的<code>prepare(this);</code>执行完了，总结一下就是初始化Model，初始化对应的ComponentView和ChartView并将series对应的task加入pipeline，再来看下<code>updateMethods.update.call(this, null, updateParams);</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">updateMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> ECharts<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">,</span> updateParams<span class=\"token operator\">:</span> UpdateLifecycleParams<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> ecModel <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_api<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> zr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> coordSysMgr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_coordSysMgr<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// update before setOption</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ecModel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">setUpdatePayload</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">restoreData</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performSeriesTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                coordSysMgr<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performDataProcessorTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">updateStreamModes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                coordSysMgr<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">clearColorPalette</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performVisualTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Set background</span>\n                <span class=\"token keyword\">let</span> backgroundColor <span class=\"token operator\">=</span> ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'backgroundColor'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'transparent'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> darkMode <span class=\"token operator\">=</span> ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'darkMode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// In IE8</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>env<span class=\"token punctuation\">.</span>canvasSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">const</span> colorArr <span class=\"token operator\">=</span> colorTool<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>backgroundColor <span class=\"token keyword\">as</span> ColorString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    backgroundColor <span class=\"token operator\">=</span> colorTool<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>colorArr<span class=\"token punctuation\">,</span> <span class=\"token string\">'rgb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>colorArr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'transparent'</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    zr<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>backgroundColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Force set dark mode.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>darkMode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> darkMode <span class=\"token operator\">!==</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        zr<span class=\"token punctuation\">.</span><span class=\"token function\">setDarkMode</span><span class=\"token punctuation\">(</span>darkMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'afterupdate'</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最主要的是<code>render(this, ecModel, api, payload, updateParams);</code>方法，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">ecIns<span class=\"token operator\">:</span> ECharts<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">,</span>\n            updateParams<span class=\"token operator\">:</span> UpdateLifecycleParams</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token function\">renderComponents</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">each</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">.</span>_chartsViews<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chart<span class=\"token operator\">:</span> ChartView</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                chart<span class=\"token punctuation\">.</span>__alive <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">renderSeries</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Remove groups of unrendered charts</span>\n            <span class=\"token function\">each</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">.</span>_chartsViews<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chart<span class=\"token operator\">:</span> ChartView</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>chart<span class=\"token punctuation\">.</span>__alive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    chart<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>先来看下<code>renderComponents(ecIns, ecModel, api, payload, updateParams);</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">renderComponents</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">ecIns<span class=\"token operator\">:</span> ECharts<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">,</span>\n            updateParams<span class=\"token operator\">:</span> UpdateLifecycleParams<span class=\"token punctuation\">,</span> dirtyList<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ComponentView<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">each</span><span class=\"token punctuation\">(</span>dirtyList <span class=\"token operator\">||</span> ecIns<span class=\"token punctuation\">.</span>_componentsViews<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">componentView<span class=\"token operator\">:</span> ComponentView</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> componentModel <span class=\"token operator\">=</span> componentView<span class=\"token punctuation\">.</span>__model<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">clearStates</span><span class=\"token punctuation\">(</span>componentModel<span class=\"token punctuation\">,</span> componentView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                componentView<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>componentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">updateZ</span><span class=\"token punctuation\">(</span>componentModel<span class=\"token punctuation\">,</span> componentView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">updateStates</span><span class=\"token punctuation\">(</span>componentModel<span class=\"token punctuation\">,</span> componentView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ecIns就是echarts实例，那针对这个示例都有哪些_componentsViews呢，<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114010528.png\"><br>拿其中一个TitleView来细看一下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">titleModel<span class=\"token operator\">:</span> TitleModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> group <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">;</span>\n\n       \n        <span class=\"token keyword\">const</span> textEl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">graphic<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            style<span class=\"token operator\">:</span> <span class=\"token function\">createTextStyle</span><span class=\"token punctuation\">(</span>textStyleModel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n                text<span class=\"token operator\">:</span> titleModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                fill<span class=\"token operator\">:</span> textStyleModel<span class=\"token punctuation\">.</span><span class=\"token function\">getTextColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>disableBox<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            z2<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        group<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>textEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>render方法实在太长了，我删掉了样式，子标题，背景，标题框等相关代码，只留下Text渲染相关的了。<br>可以看到，真正的渲染是调用了zrender的graphic.Text，并添加到了group里。<br>再来看renderSeries</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">renderSeries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            ecIns<span class=\"token operator\">:</span> ECharts<span class=\"token punctuation\">,</span>\n            ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span>\n            api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span>\n            payload<span class=\"token operator\">:</span> Payload <span class=\"token operator\">|</span> <span class=\"token string\">'remain'</span><span class=\"token punctuation\">,</span>\n            updateParams<span class=\"token operator\">:</span> UpdateLifecycleParams<span class=\"token punctuation\">,</span>\n            dirtyMap<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span>uid<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Render all charts</span>\n            <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> ecIns<span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n\n            updateParams <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>updateParams <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n                updatedSeries<span class=\"token operator\">:</span> ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">getSeries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">let</span> unfinished<span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">eachSeries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">seriesModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> chartView <span class=\"token operator\">=</span> ecIns<span class=\"token punctuation\">.</span>_chartsMap<span class=\"token punctuation\">[</span>seriesModel<span class=\"token punctuation\">.</span>__viewId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                chartView<span class=\"token punctuation\">.</span>__alive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">const</span> renderTask <span class=\"token operator\">=</span> chartView<span class=\"token punctuation\">.</span>renderTask<span class=\"token punctuation\">;</span>\n                 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>renderTask<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">getPerformArgs</span><span class=\"token punctuation\">(</span>renderTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    unfinished <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最重要的就是调用了renderTask.perform<br>Task(src/core/task.ts)的perform方法。方法比较长，我就不贴代码了，主干是调用了<code>                    this._doProgress(progress, start, end, modBy, modDataCount);</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> progressMethodMap<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span>method<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> TaskResetCallbackReturn<span class=\"token operator\">&lt;</span>SeriesTaskContext<span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    incrementalPrepareRender<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function-variable function\">progress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">params<span class=\"token operator\">:</span> StageHandlerProgressParams<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> SeriesTaskContext</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n            context<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span><span class=\"token function\">incrementalRender</span><span class=\"token punctuation\">(</span>\n                params<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>ecModel<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>payload\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    render<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Put view.render in `progress` to support appendData. But in this case</span>\n        <span class=\"token comment\">// view.render should not be called in reset, otherwise it will be called</span>\n        <span class=\"token comment\">// twise. Use `forceFirstProgress` to make sure that view.render is called</span>\n        <span class=\"token comment\">// in any cases.</span>\n        forceFirstProgress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">progress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">params<span class=\"token operator\">:</span> StageHandlerProgressParams<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> SeriesTaskContext</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n            context<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n                context<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>ecModel<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>payload\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>紧接着调用了progress方法，而progress方法里调用了view的render，以此示例的BarView举例</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">seriesModel<span class=\"token operator\">:</span> BarSeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_removeOnRenderedListener</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_updateDrawMode</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> coordinateSystemType <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'coordinateSystem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>coordinateSystemType <span class=\"token operator\">===</span> <span class=\"token string\">'cartesian2d'</span>\n            <span class=\"token operator\">||</span> coordinateSystemType <span class=\"token operator\">===</span> <span class=\"token string\">'polar'</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isLargeDraw\n                <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_renderLarge</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_renderNormal</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Only cartesian2d and polar supported for bar.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据是否是_isLargeDraw而分别调用不同的render，本示走的是_renderNormal方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">private</span> <span class=\"token function\">_renderNormal</span><span class=\"token punctuation\">(</span>\n        seriesModel<span class=\"token operator\">:</span> BarSeriesModel<span class=\"token punctuation\">,</span>\n        ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span>\n        api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> Payload\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> group <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> oldData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>oldData<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dataIndex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> itemModel <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>getItemModel<span class=\"token operator\">&lt;</span>BarDataItemOption<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>dataIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> layout <span class=\"token operator\">=</span> getLayout<span class=\"token punctuation\">[</span>coord<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataIndex<span class=\"token punctuation\">,</span> itemModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> elementCreator<span class=\"token punctuation\">[</span>coord<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>\n                    seriesModel<span class=\"token punctuation\">,</span>\n                    data<span class=\"token punctuation\">,</span>\n                    dataIndex<span class=\"token punctuation\">,</span>\n                    layout<span class=\"token punctuation\">,</span>\n                    isHorizontalOrRadial<span class=\"token punctuation\">,</span>\n                    animationModel<span class=\"token punctuation\">,</span>\n                    baseAxis<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span>\n                    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                    roundCap\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                group<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">const</span> elementCreator<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token string\">'polar'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cartesian2d'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> ElementCreator\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">cartesian2d</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">seriesModel<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> newIndex<span class=\"token punctuation\">,</span> layout<span class=\"token operator\">:</span> RectLayout<span class=\"token punctuation\">,</span> isHorizontal<span class=\"token punctuation\">,</span>\n        animationModel<span class=\"token punctuation\">,</span> axisModel<span class=\"token punctuation\">,</span> isUpdate<span class=\"token punctuation\">,</span> roundCap</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            shape<span class=\"token operator\">:</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            z2<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>rect <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__dataIndex <span class=\"token operator\">=</span> newIndex<span class=\"token punctuation\">;</span>\n\n        rect<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animationModel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> rectShape <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> animateProperty <span class=\"token operator\">=</span> isHorizontal <span class=\"token operator\">?</span> <span class=\"token string\">'height'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'width'</span> <span class=\"token keyword\">as</span> <span class=\"token string\">'width'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'height'</span><span class=\"token punctuation\">;</span>\n            rectShape<span class=\"token punctuation\">[</span>animateProperty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> rect<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>方法太长，我删掉了非主干代码，可以看到最终根据Model的data的diff来进行add,update,remove,最终还是调用了zrender的Rect来画出bar的样子。<br>最后贴一下渲染BarView的调用栈<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114021358.png\"><br>渲染ComponentView比较直接，而渲染ChartView类型的就绕来绕去，主要原因是ChartView可能数据比较多，需要逐步分批渲染，以减少卡顿，保持每秒60帧的渲染，因为1000ms，每一帧不能超过16ms，才能保持流畅的渲染。<br>在setOption方法的最后调用了<code>this._zr.flush();</code>则直接将绘制渲染出来了，当然对于ChartView的绘制，可能还需要等到下一次渲染的时候才会显示出来。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">private</span> <span class=\"token function\">_onframe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disposed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token function\">applyChangedStates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Lazy update</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> silent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>silent<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            updateMethods<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// At present, in each frame, zrender performs:</span>\n            <span class=\"token comment\">//   (1) animation step forward.</span>\n            <span class=\"token comment\">//   (2) trigger('frame') (where this `_onframe` is called)</span>\n            <span class=\"token comment\">//   (3) zrender flush (render).</span>\n            <span class=\"token comment\">// If we do nothing here, since we use `setToFinal: true`, the step (3) above</span>\n            <span class=\"token comment\">// will render the final state of the elements before the real animation started.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">flushPendingActions</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> silent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">triggerUpdatedEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> silent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Avoid do both lazy update and progress in one frame.</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scheduler<span class=\"token punctuation\">.</span>unfinished<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Stream progress.</span>\n            <span class=\"token keyword\">let</span> remainTime <span class=\"token operator\">=</span> <span class=\"token constant\">TEST_FRAME_REMAIN_TIME</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> ecModel <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_api<span class=\"token punctuation\">;</span>\n            scheduler<span class=\"token punctuation\">.</span>unfinished <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performSeriesTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Currently dataProcessorFuncs do not check threshold.</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performDataProcessorTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">updateStreamModes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Do not update coordinate system here. Because that coord system update in</span>\n                <span class=\"token comment\">// each frame is not a good user experience. So we follow the rule that</span>\n                <span class=\"token comment\">// the extent of the coordinate system is determin in the first frame (the</span>\n                <span class=\"token comment\">// frame is executed immedietely after task reset.</span>\n                <span class=\"token comment\">// this._coordSysMgr.update(ecModel, api);</span>\n\n                <span class=\"token comment\">// console.log('--- ec frame visual ---', remainTime);</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performVisualTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">renderSeries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> <span class=\"token string\">'remain'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                remainTime <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>remainTime <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> scheduler<span class=\"token punctuation\">.</span>unfinished<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Call flush explicitly for trigger finished event.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>scheduler<span class=\"token punctuation\">.</span>unfinished<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// Else, zr flushing be ensue within the same frame,</span>\n            <span class=\"token comment\">// because zr flushing is after onframe event.</span>\n        <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于echarts的渲染分析就到这了，下次有机会我们自己动手写一个ChartView。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Echarts快速入门\"><a href=\"#Echarts快速入门\" class=\"headerlink\" title=\"Echarts快速入门\"></a>Echarts快速入门</h3><p>Echarts就不做过多介绍了，相信大家都听说或者使用过，现在以官方给的第一个快速入门为基础，分析一下渲染过程。示例代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"main\"</span> style<span class=\"token operator\">=</span><span class=\"token string\">\"width: 600px;height:400px;\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n\n    <span class=\"token comment\">// 基于准备好的dom，初始化echarts实例</span>\n    <span class=\"token keyword\">var</span> myChart <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 指定图表的配置项和数据</span>\n    <span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      title<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'ECharts 入门示例'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      tooltip<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      legend<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'销量'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      xAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'衬衫'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'羊毛衫'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'雪纺衫'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'裤子'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'高跟鞋'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'袜子'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      yAxis<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      series<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'销量'</span><span class=\"token punctuation\">,</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n          data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 使用刚指定的配置项和数据显示图表。</span>\n    myChart<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>渲染出来的效果就是这样的<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211112181806.png\"></p>\n<h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><p>echarts是依赖zrender来绘制的，上述代码可以看到调用了echarts的2个方法，<strong>init</strong>和<strong>setOption</strong>,5.x版本的echarts是使用typescript写的。<br>先看下init方法的定义,在src/echarts.ts里,为了更简洁清晰，后续代码我删掉了非主干流程渲染的部分内容。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> init <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./core/echarts'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>真正的init方法其实是./core/echarts里的</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">dom<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span>\n    theme<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> object<span class=\"token punctuation\">,</span>\n    opts<span class=\"token operator\">?</span><span class=\"token operator\">:</span> EChartsInitOpts</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> EChartsType <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> existInstance <span class=\"token operator\">=</span> <span class=\"token function\">getInstanceByDom</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existInstance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span> existInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> chart <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ECharts</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    chart<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'ec_'</span> <span class=\"token operator\">+</span> idBase<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    instances<span class=\"token punctuation\">[</span>chart<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chart<span class=\"token punctuation\">;</span>\n\n    modelUtil<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> <span class=\"token constant\">DOM_ATTRIBUTE_KEY</span><span class=\"token punctuation\">,</span> chart<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">enableConnect</span><span class=\"token punctuation\">(</span>chart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'afterinit'</span><span class=\"token punctuation\">,</span> chart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> chart<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码实例化了ECharts对象，构造函数代码</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ECharts</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Eventful</span><span class=\"token operator\">&lt;</span>ECEventDefinition<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n\t <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n\t        dom<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">,</span>\n\t        <span class=\"token comment\">// Theme name or themeOption.</span>\n\t        theme<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> ThemeOption<span class=\"token punctuation\">,</span>\n\t        opts<span class=\"token operator\">?</span><span class=\"token operator\">:</span> EChartsInitOpts\n\t    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ECEventProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        opts <span class=\"token operator\">=</span> opts <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// Get theme by name</span>\n\t        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> theme <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t            theme <span class=\"token operator\">=</span> themeStorage<span class=\"token punctuation\">[</span>theme<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> object<span class=\"token punctuation\">;</span>\n\t        <span class=\"token punctuation\">&#125;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_dom <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">let</span> defaultRenderer <span class=\"token operator\">=</span> <span class=\"token string\">'canvas'</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token keyword\">let</span> defaultUseDirtyRect <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t        \n\t        <span class=\"token keyword\">const</span> zr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr <span class=\"token operator\">=</span> zrender<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n\t            renderer<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">||</span> defaultRenderer<span class=\"token punctuation\">,</span>\n\t            devicePixelRatio<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>devicePixelRatio<span class=\"token punctuation\">,</span>\n\t            width<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n\t            height<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span>\n\t            useDirtyRect<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>useDirtyRect <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> defaultUseDirtyRect <span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>useDirtyRect\n\t        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// Expect 60 fps.</span>\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_throttledZrFlush <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>zr<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">,</span> zr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        theme <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>theme<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        theme <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">backwardCompat</span><span class=\"token punctuation\">(</span>theme <span class=\"token keyword\">as</span> ECUnitOption<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_theme <span class=\"token operator\">=</span> theme<span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_locale <span class=\"token operator\">=</span> <span class=\"token function\">createLocaleObject</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>locale <span class=\"token operator\">||</span> <span class=\"token constant\">SYSTEM_LANG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_coordSysMgr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CoordinateSystemManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_api <span class=\"token operator\">=</span> <span class=\"token function\">createExtensionAPI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// Sort on demand</span>\n\t        <span class=\"token keyword\">function</span> <span class=\"token function\">prioritySortFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> StageHandlerInternal<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> StageHandlerInternal</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n\t            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>__prio <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>__prio<span class=\"token punctuation\">;</span>\n\t        <span class=\"token punctuation\">&#125;</span>\n\t        <span class=\"token function\">timsort</span><span class=\"token punctuation\">(</span>visualFuncs<span class=\"token punctuation\">,</span> prioritySortFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token function\">timsort</span><span class=\"token punctuation\">(</span>dataProcessorFuncs<span class=\"token punctuation\">,</span> prioritySortFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scheduler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> dataProcessorFuncs<span class=\"token punctuation\">,</span> visualFuncs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_messageCenter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// Init mouse events</span>\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_initEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// In case some people write `window.onresize = chart.resize`</span>\n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resize <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        zr<span class=\"token punctuation\">.</span>animation<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onframe<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token function\">bindRenderedEvent</span><span class=\"token punctuation\">(</span>zr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token function\">bindMouseEvent</span><span class=\"token punctuation\">(</span>zr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t        <span class=\"token comment\">// ECharts instance can be used as value.</span>\n\t        <span class=\"token function\">setAsPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>内容比较多，重点代码是初始化了zrender</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> zr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr <span class=\"token operator\">=</span> zrender<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n\t            renderer<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">||</span> defaultRenderer<span class=\"token punctuation\">,</span>\n\t            devicePixelRatio<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>devicePixelRatio<span class=\"token punctuation\">,</span>\n\t            width<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n\t            height<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span>\n\t            useDirtyRect<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>useDirtyRect <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> defaultUseDirtyRect <span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>useDirtyRect\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>初始化了<code>this._scheduler = new Scheduler(this, api, dataProcessorFuncs, visualFuncs);</code>,后续series渲染的时候会用到。<br>同时注册了渲染回调<code>zr.animation.on(&#39;frame&#39;, this._onframe, this);</code></p>\n<p>在分析setOption方法之前，有必要先说一下echarts的组件设计思想，我们示例里看到的绘制出来的图形，其实是很多组件构成的，echarts主要分成2类，一类是ComponentView，一类是ChartView。分别在src/chart下面和src/component下面。<br>先看下父类ComponentView(src/view/Component.ts)定义</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentView</span> <span class=\"token punctuation\">&#123;</span>\n    readonly group<span class=\"token operator\">:</span> ViewRootGroup<span class=\"token punctuation\">;</span>\n    readonly uid<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    __model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">;</span>\n    __alive<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n    __id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> componentUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getUID</span><span class=\"token punctuation\">(</span><span class=\"token string\">'viewComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Do nothing;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">updateLayout</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Do nothing;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">updateVisual</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">:</span> ComponentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Do nothing;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * Hook for blur target series.\n     * Can be used in marker for blur the markers\n     */</span>\n    <span class=\"token function\">blurSeries</span><span class=\"token punctuation\">(</span>seriesModels<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// Do nothing;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> registerClass<span class=\"token operator\">:</span> clazzUtil<span class=\"token punctuation\">.</span>ClassManager<span class=\"token punctuation\">[</span><span class=\"token string\">'registerClass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最主要的2个方法init和render是由各个组件子类来实现的。<br>ChartView(src/view/Chart.ts)</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ChartView</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    readonly group<span class=\"token operator\">:</span> ViewRootGroup<span class=\"token punctuation\">;</span>\n    readonly uid<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    readonly renderTask<span class=\"token operator\">:</span> SeriesTask<span class=\"token punctuation\">;</span>\n    ignoreLabelLineUpdate<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n    __alive<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n    __model<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">;</span>\n    __id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> protoInitialize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> proto <span class=\"token operator\">=</span> <span class=\"token class-name\">ChartView</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n        proto<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'chart'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uid <span class=\"token operator\">=</span> componentUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getUID</span><span class=\"token punctuation\">(</span><span class=\"token string\">'viewChart'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderTask <span class=\"token operator\">=</span> createTask<span class=\"token operator\">&lt;</span>SeriesTaskContext<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            plan<span class=\"token operator\">:</span> renderTaskPlan<span class=\"token punctuation\">,</span>\n            reset<span class=\"token operator\">:</span> renderTaskReset\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderTask<span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>view<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> SeriesTaskContext<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">highlight</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">toggleHighlight</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> <span class=\"token string\">'emphasis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">downplay</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">toggleHighlight</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// FIXME never used?</span>\n    <span class=\"token function\">updateLayout</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// FIXME never used?</span>\n    <span class=\"token function\">updateVisual</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token function\">markUpdateMethod</span><span class=\"token punctuation\">(</span>payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">,</span> methodName<span class=\"token operator\">:</span> keyof ChartView<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>updateMethod <span class=\"token operator\">=</span> methodName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> registerClass<span class=\"token operator\">:</span> clazzUtil<span class=\"token punctuation\">.</span>ClassManager<span class=\"token punctuation\">[</span><span class=\"token string\">'registerClass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也是需要关注init和render方法，但是额外不一样的是构造函数里初始化了renderTask，这块在渲染数据的时候会用到。<br>下面再回到setOption方法，我们来看看setOption(src/core/echarts.ts)的实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">setOption<span class=\"token operator\">&lt;</span>Opt <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ECBasicOption</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>option<span class=\"token operator\">:</span> Opt<span class=\"token punctuation\">,</span> notMerge<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">|</span> SetOptionOpts<span class=\"token punctuation\">,</span> lazyUpdate<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disposed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">disposedWarning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">let</span> silent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> replaceMerge<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> transitionOpt<span class=\"token operator\">:</span> SetOptionTransitionOpt<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>notMerge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            lazyUpdate <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>lazyUpdate<span class=\"token punctuation\">;</span>\n            silent <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>silent<span class=\"token punctuation\">;</span>\n            replaceMerge <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>replaceMerge<span class=\"token punctuation\">;</span>\n            transitionOpt <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>transition<span class=\"token punctuation\">;</span>\n            notMerge <span class=\"token operator\">=</span> notMerge<span class=\"token punctuation\">.</span>notMerge<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model <span class=\"token operator\">||</span> notMerge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> optionManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptionManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_theme<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> ecModel <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GlobalModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ecModel<span class=\"token punctuation\">.</span>scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n            ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> theme<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_locale<span class=\"token punctuation\">,</span> optionManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span>option <span class=\"token keyword\">as</span> ECBasicOption<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> replaceMerge <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> optionPreprocessorFuncs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> updateParams <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            seriesTransition<span class=\"token operator\">:</span> transitionOpt<span class=\"token punctuation\">,</span>\n            optionChanged<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">as</span> UpdateLifecycleParams<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                silent<span class=\"token operator\">:</span> silent<span class=\"token punctuation\">,</span>\n                updateParams<span class=\"token operator\">:</span> updateParams\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// `setOption(option, &#123;lazyMode: true&#125;)` may be called when zrender has been slept.</span>\n            <span class=\"token comment\">// It should wake it up to make sure zrender start to render at the next frame.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getZr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">wakeUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            updateMethods<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Ensure zr refresh sychronously, and then pixel in canvas can be</span>\n            <span class=\"token comment\">// fetched after `setOption`.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">flushPendingActions</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> silent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">triggerUpdatedEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> silent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>初始化model，<code>this._model.setOption(option as ECBasicOption, &#123; replaceMerge &#125;, optionPreprocessorFuncs);</code><br><code>prepare(this);</code>的方法实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">prepare</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ecIns<span class=\"token operator\">:</span> ECharts</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> ecIns<span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n\n            scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">restorePipelines</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStageTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">prepareView</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">prepareView</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">plan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">restorePipelines</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> pipelineMap <span class=\"token operator\">=</span> scheduler<span class=\"token punctuation\">.</span>_pipelineMap <span class=\"token operator\">=</span> <span class=\"token function\">createHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">eachSeries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">seriesModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> progressive <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getProgressive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> pipelineId <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">;</span>\n\n            pipelineMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>pipelineId<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n                id<span class=\"token operator\">:</span> pipelineId<span class=\"token punctuation\">,</span>\n                head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                tail<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                threshold<span class=\"token operator\">:</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getProgressiveThreshold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                progressiveEnabled<span class=\"token operator\">:</span> progressive\n                    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">.</span>preventIncremental <span class=\"token operator\">&amp;&amp;</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">preventIncremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                blockIndex<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                step<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>progressive <span class=\"token operator\">||</span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">_pipe</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> seriesModel<span class=\"token punctuation\">.</span>dataTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中seriesModel的内容:<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211113135714.png\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">private</span> <span class=\"token function\">_pipe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">seriesModel<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> task<span class=\"token operator\">:</span> GeneralTask</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> pipelineId <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> pipeline <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_pipelineMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pipelineId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">!</span>pipeline<span class=\"token punctuation\">.</span>head <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>pipeline<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pipeline<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">&amp;&amp;</span> pipeline<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pipeline<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> task<span class=\"token punctuation\">;</span>\n        task<span class=\"token punctuation\">.</span>__idxInPipeline <span class=\"token operator\">=</span> pipeline<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        task<span class=\"token punctuation\">.</span>__pipeline <span class=\"token operator\">=</span> pipeline<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过_pipe方法就将task加到了pipeline里，等待后续执行task进行渲染。<br>prepareView(ecIns, true);<br>prepareView(ecIns, false);<br>分别执行ComponentView和ChartView的init方法，具体怎么找到对应的clazz呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doPrepare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">model<span class=\"token operator\">:</span> ComponentModel</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> requireNewView <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>__requireNewView<span class=\"token punctuation\">;</span>\n                model<span class=\"token punctuation\">.</span>__requireNewView <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> viewId <span class=\"token operator\">=</span> <span class=\"token string\">'_ec_'</span> <span class=\"token operator\">+</span> model<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">'_'</span> <span class=\"token operator\">+</span> model<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> view <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>requireNewView <span class=\"token operator\">&amp;&amp;</span> viewMap<span class=\"token punctuation\">[</span>viewId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">const</span> classType <span class=\"token operator\">=</span> <span class=\"token function\">parseClassType</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">const</span> Clazz <span class=\"token operator\">=</span> isComponent\n                        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>ComponentView <span class=\"token keyword\">as</span> ComponentViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span>classType<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">,</span> classType<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n                                     <span class=\"token punctuation\">(</span>ChartView <span class=\"token keyword\">as</span> ChartViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span>classType<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>Clazz<span class=\"token punctuation\">,</span> classType<span class=\"token punctuation\">.</span>sub <span class=\"token operator\">+</span> <span class=\"token string\">' does not exist.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                    view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Clazz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    view<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    viewMap<span class=\"token punctuation\">[</span>viewId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> view<span class=\"token punctuation\">;</span>\n                    viewList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>view <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    zr<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                model<span class=\"token punctuation\">.</span>__viewId <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>__id <span class=\"token operator\">=</span> viewId<span class=\"token punctuation\">;</span>\n                view<span class=\"token punctuation\">.</span>__alive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                view<span class=\"token punctuation\">.</span>__model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n                view<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span>__ecComponentInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n                    mainType<span class=\"token operator\">:</span> model<span class=\"token punctuation\">.</span>mainType<span class=\"token punctuation\">,</span>\n                    index<span class=\"token operator\">:</span> model<span class=\"token punctuation\">.</span>componentIndex\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">!</span>isComponent <span class=\"token operator\">&amp;&amp;</span> scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">prepareView</span><span class=\"token punctuation\">(</span>\n                    view <span class=\"token keyword\">as</span> ChartView<span class=\"token punctuation\">,</span> model <span class=\"token keyword\">as</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>ComponentView <span class=\"token keyword\">as</span> ComponentViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span>classType<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">,</span> classType<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> clazzUtil <span class=\"token keyword\">from</span> <span class=\"token string\">'../util/clazz'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> type ComponentViewConstructor <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> ComponentView\n    <span class=\"token operator\">&amp;</span> clazzUtil<span class=\"token punctuation\">.</span>ExtendableConstructor\n    <span class=\"token operator\">&amp;</span> clazzUtil<span class=\"token punctuation\">.</span>ClassManager<span class=\"token punctuation\">;</span>\n\nclazzUtil<span class=\"token punctuation\">.</span><span class=\"token function\">enableClassExtend</span><span class=\"token punctuation\">(</span>ComponentView <span class=\"token keyword\">as</span> ComponentViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclazzUtil<span class=\"token punctuation\">.</span><span class=\"token function\">enableClassManagement</span><span class=\"token punctuation\">(</span>ComponentView <span class=\"token keyword\">as</span> ComponentViewConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntarget<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">mainType<span class=\"token operator\">:</span> ComponentMainType<span class=\"token punctuation\">,</span>\n        subType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ComponentSubType<span class=\"token punctuation\">,</span>\n        throwWhenNotFound<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Constructor <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> clz <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">[</span>mainType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clz <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>clz <span class=\"token keyword\">as</span> SubclassContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IS_CONTAINER</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            clz <span class=\"token operator\">=</span> subType <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>clz <span class=\"token keyword\">as</span> SubclassContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>subType<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>throwWhenNotFound <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>clz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n                <span class=\"token operator\">!</span>subType\n                    <span class=\"token operator\">?</span> mainType <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'type should be specified.'</span>\n                    <span class=\"token operator\">:</span> <span class=\"token string\">'Component '</span> <span class=\"token operator\">+</span> mainType <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>subType <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' is used but not imported.'</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> clz <span class=\"token keyword\">as</span> Constructor<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n \n target<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">registerClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">clz<span class=\"token operator\">:</span> Constructor</span>\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Constructor <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> componentFullType <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>clz <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">||</span> clz<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>componentFullType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">checkClassType</span><span class=\"token punctuation\">(</span>componentFullType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            clz<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> componentFullType<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> componentTypeInfo <span class=\"token operator\">=</span> <span class=\"token function\">parseClassType</span><span class=\"token punctuation\">(</span>componentFullType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>componentTypeInfo<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    storage<span class=\"token punctuation\">[</span>componentTypeInfo<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clz<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>componentTypeInfo<span class=\"token punctuation\">.</span>sub <span class=\"token operator\">!==</span> <span class=\"token constant\">IS_CONTAINER</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token function\">makeContainer</span><span class=\"token punctuation\">(</span>componentTypeInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                container<span class=\"token punctuation\">[</span>componentTypeInfo<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> clz<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> clz<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//以TitleView为例</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">TitleView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ComponentView</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">static</span> type <span class=\"token operator\">=</span> <span class=\"token string\">'title'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    type <span class=\"token operator\">=</span> TitleView<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">prepareView</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> ChartView<span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> SeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> renderTask <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>renderTask<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> renderTask<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n\n        context<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span>ecModel <span class=\"token operator\">=</span> ecModel<span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span>api <span class=\"token operator\">=</span> api<span class=\"token punctuation\">;</span>\n\n        renderTask<span class=\"token punctuation\">.</span>__block <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>view<span class=\"token punctuation\">.</span>incrementalPrepareRender<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_pipe</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> renderTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而BarView不同的地方在，将renderTask加入了pipeline。<br>setOption里的<code>prepare(this);</code>执行完了，总结一下就是初始化Model，初始化对应的ComponentView和ChartView并将series对应的task加入pipeline，再来看下<code>updateMethods.update.call(this, null, updateParams);</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">updateMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> ECharts<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">,</span> updateParams<span class=\"token operator\">:</span> UpdateLifecycleParams<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> ecModel <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_api<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> zr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> coordSysMgr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_coordSysMgr<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// update before setOption</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ecModel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">setUpdatePayload</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">restoreData</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performSeriesTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                coordSysMgr<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performDataProcessorTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">updateStreamModes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                coordSysMgr<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">clearColorPalette</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performVisualTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Set background</span>\n                <span class=\"token keyword\">let</span> backgroundColor <span class=\"token operator\">=</span> ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'backgroundColor'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'transparent'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> darkMode <span class=\"token operator\">=</span> ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'darkMode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// In IE8</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>env<span class=\"token punctuation\">.</span>canvasSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">const</span> colorArr <span class=\"token operator\">=</span> colorTool<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>backgroundColor <span class=\"token keyword\">as</span> ColorString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    backgroundColor <span class=\"token operator\">=</span> colorTool<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>colorArr<span class=\"token punctuation\">,</span> <span class=\"token string\">'rgb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>colorArr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'transparent'</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    zr<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>backgroundColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// Force set dark mode.</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>darkMode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> darkMode <span class=\"token operator\">!==</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        zr<span class=\"token punctuation\">.</span><span class=\"token function\">setDarkMode</span><span class=\"token punctuation\">(</span>darkMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'afterupdate'</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最主要的是<code>render(this, ecModel, api, payload, updateParams);</code>方法，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">ecIns<span class=\"token operator\">:</span> ECharts<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">,</span>\n            updateParams<span class=\"token operator\">:</span> UpdateLifecycleParams</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token function\">renderComponents</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">each</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">.</span>_chartsViews<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chart<span class=\"token operator\">:</span> ChartView</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                chart<span class=\"token punctuation\">.</span>__alive <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">renderSeries</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Remove groups of unrendered charts</span>\n            <span class=\"token function\">each</span><span class=\"token punctuation\">(</span>ecIns<span class=\"token punctuation\">.</span>_chartsViews<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chart<span class=\"token operator\">:</span> ChartView</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>chart<span class=\"token punctuation\">.</span>__alive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    chart<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>先来看下<code>renderComponents(ecIns, ecModel, api, payload, updateParams);</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">renderComponents</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token parameter\">ecIns<span class=\"token operator\">:</span> ECharts<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload<span class=\"token punctuation\">,</span>\n            updateParams<span class=\"token operator\">:</span> UpdateLifecycleParams<span class=\"token punctuation\">,</span> dirtyList<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ComponentView<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">each</span><span class=\"token punctuation\">(</span>dirtyList <span class=\"token operator\">||</span> ecIns<span class=\"token punctuation\">.</span>_componentsViews<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">componentView<span class=\"token operator\">:</span> ComponentView</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> componentModel <span class=\"token operator\">=</span> componentView<span class=\"token punctuation\">.</span>__model<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">clearStates</span><span class=\"token punctuation\">(</span>componentModel<span class=\"token punctuation\">,</span> componentView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                componentView<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>componentModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">updateZ</span><span class=\"token punctuation\">(</span>componentModel<span class=\"token punctuation\">,</span> componentView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">updateStates</span><span class=\"token punctuation\">(</span>componentModel<span class=\"token punctuation\">,</span> componentView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ecIns就是echarts实例，那针对这个示例都有哪些_componentsViews呢，<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114010528.png\"><br>拿其中一个TitleView来细看一下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">titleModel<span class=\"token operator\">:</span> TitleModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> group <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">;</span>\n\n       \n        <span class=\"token keyword\">const</span> textEl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">graphic<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            style<span class=\"token operator\">:</span> <span class=\"token function\">createTextStyle</span><span class=\"token punctuation\">(</span>textStyleModel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n                text<span class=\"token operator\">:</span> titleModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                fill<span class=\"token operator\">:</span> textStyleModel<span class=\"token punctuation\">.</span><span class=\"token function\">getTextColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>disableBox<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            z2<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        group<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>textEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>render方法实在太长了，我删掉了样式，子标题，背景，标题框等相关代码，只留下Text渲染相关的了。<br>可以看到，真正的渲染是调用了zrender的graphic.Text，并添加到了group里。<br>再来看renderSeries</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">renderSeries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            ecIns<span class=\"token operator\">:</span> ECharts<span class=\"token punctuation\">,</span>\n            ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span>\n            api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span>\n            payload<span class=\"token operator\">:</span> Payload <span class=\"token operator\">|</span> <span class=\"token string\">'remain'</span><span class=\"token punctuation\">,</span>\n            updateParams<span class=\"token operator\">:</span> UpdateLifecycleParams<span class=\"token punctuation\">,</span>\n            dirtyMap<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span>uid<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Render all charts</span>\n            <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> ecIns<span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n\n            updateParams <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>updateParams <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n                updatedSeries<span class=\"token operator\">:</span> ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">getSeries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">let</span> unfinished<span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            ecModel<span class=\"token punctuation\">.</span><span class=\"token function\">eachSeries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">seriesModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> chartView <span class=\"token operator\">=</span> ecIns<span class=\"token punctuation\">.</span>_chartsMap<span class=\"token punctuation\">[</span>seriesModel<span class=\"token punctuation\">.</span>__viewId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                chartView<span class=\"token punctuation\">.</span>__alive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">const</span> renderTask <span class=\"token operator\">=</span> chartView<span class=\"token punctuation\">.</span>renderTask<span class=\"token punctuation\">;</span>\n                 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>renderTask<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span>scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">getPerformArgs</span><span class=\"token punctuation\">(</span>renderTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    unfinished <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最重要的就是调用了renderTask.perform<br>Task(src/core/task.ts)的perform方法。方法比较长，我就不贴代码了，主干是调用了<code>                    this._doProgress(progress, start, end, modBy, modDataCount);</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> progressMethodMap<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span>method<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> TaskResetCallbackReturn<span class=\"token operator\">&lt;</span>SeriesTaskContext<span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    incrementalPrepareRender<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function-variable function\">progress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">params<span class=\"token operator\">:</span> StageHandlerProgressParams<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> SeriesTaskContext</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n            context<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span><span class=\"token function\">incrementalRender</span><span class=\"token punctuation\">(</span>\n                params<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>ecModel<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>payload\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    render<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Put view.render in `progress` to support appendData. But in this case</span>\n        <span class=\"token comment\">// view.render should not be called in reset, otherwise it will be called</span>\n        <span class=\"token comment\">// twise. Use `forceFirstProgress` to make sure that view.render is called</span>\n        <span class=\"token comment\">// in any cases.</span>\n        forceFirstProgress<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">progress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">params<span class=\"token operator\">:</span> StageHandlerProgressParams<span class=\"token punctuation\">,</span> context<span class=\"token operator\">:</span> SeriesTaskContext</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n            context<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n                context<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>ecModel<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span>payload\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>紧接着调用了progress方法，而progress方法里调用了view的render，以此示例的BarView举例</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">seriesModel<span class=\"token operator\">:</span> BarSeriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span> api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> Payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_removeOnRenderedListener</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_updateDrawMode</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> coordinateSystemType <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'coordinateSystem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>coordinateSystemType <span class=\"token operator\">===</span> <span class=\"token string\">'cartesian2d'</span>\n            <span class=\"token operator\">||</span> coordinateSystemType <span class=\"token operator\">===</span> <span class=\"token string\">'polar'</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_isLargeDraw\n                <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_renderLarge</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_renderNormal</span><span class=\"token punctuation\">(</span>seriesModel<span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Only cartesian2d and polar supported for bar.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>根据是否是_isLargeDraw而分别调用不同的render，本示走的是_renderNormal方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">private</span> <span class=\"token function\">_renderNormal</span><span class=\"token punctuation\">(</span>\n        seriesModel<span class=\"token operator\">:</span> BarSeriesModel<span class=\"token punctuation\">,</span>\n        ecModel<span class=\"token operator\">:</span> GlobalModel<span class=\"token punctuation\">,</span>\n        api<span class=\"token operator\">:</span> ExtensionAPI<span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> Payload\n    <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> group <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> seriesModel<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> oldData <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>oldData<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dataIndex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> itemModel <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>getItemModel<span class=\"token operator\">&lt;</span>BarDataItemOption<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>dataIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> layout <span class=\"token operator\">=</span> getLayout<span class=\"token punctuation\">[</span>coord<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> dataIndex<span class=\"token punctuation\">,</span> itemModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> elementCreator<span class=\"token punctuation\">[</span>coord<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>\n                    seriesModel<span class=\"token punctuation\">,</span>\n                    data<span class=\"token punctuation\">,</span>\n                    dataIndex<span class=\"token punctuation\">,</span>\n                    layout<span class=\"token punctuation\">,</span>\n                    isHorizontalOrRadial<span class=\"token punctuation\">,</span>\n                    animationModel<span class=\"token punctuation\">,</span>\n                    baseAxis<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span>\n                    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                    roundCap\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                group<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">const</span> elementCreator<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token string\">'polar'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cartesian2d'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> ElementCreator\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">cartesian2d</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">seriesModel<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> newIndex<span class=\"token punctuation\">,</span> layout<span class=\"token operator\">:</span> RectLayout<span class=\"token punctuation\">,</span> isHorizontal<span class=\"token punctuation\">,</span>\n        animationModel<span class=\"token punctuation\">,</span> axisModel<span class=\"token punctuation\">,</span> isUpdate<span class=\"token punctuation\">,</span> roundCap</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> rect <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            shape<span class=\"token operator\">:</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            z2<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span>rect <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__dataIndex <span class=\"token operator\">=</span> newIndex<span class=\"token punctuation\">;</span>\n\n        rect<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animationModel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> rectShape <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> animateProperty <span class=\"token operator\">=</span> isHorizontal <span class=\"token operator\">?</span> <span class=\"token string\">'height'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'width'</span> <span class=\"token keyword\">as</span> <span class=\"token string\">'width'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'height'</span><span class=\"token punctuation\">;</span>\n            rectShape<span class=\"token punctuation\">[</span>animateProperty<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> rect<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>方法太长，我删掉了非主干代码，可以看到最终根据Model的data的diff来进行add,update,remove,最终还是调用了zrender的Rect来画出bar的样子。<br>最后贴一下渲染BarView的调用栈<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211114021358.png\"><br>渲染ComponentView比较直接，而渲染ChartView类型的就绕来绕去，主要原因是ChartView可能数据比较多，需要逐步分批渲染，以减少卡顿，保持每秒60帧的渲染，因为1000ms，每一帧不能超过16ms，才能保持流畅的渲染。<br>在setOption方法的最后调用了<code>this._zr.flush();</code>则直接将绘制渲染出来了，当然对于ChartView的绘制，可能还需要等到下一次渲染的时候才会显示出来。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">private</span> <span class=\"token function\">_onframe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_disposed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token function\">applyChangedStates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> scheduler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_scheduler<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Lazy update</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> silent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>silent<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            updateMethods<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>updateParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// At present, in each frame, zrender performs:</span>\n            <span class=\"token comment\">//   (1) animation step forward.</span>\n            <span class=\"token comment\">//   (2) trigger('frame') (where this `_onframe` is called)</span>\n            <span class=\"token comment\">//   (3) zrender flush (render).</span>\n            <span class=\"token comment\">// If we do nothing here, since we use `setToFinal: true`, the step (3) above</span>\n            <span class=\"token comment\">// will render the final state of the elements before the real animation started.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">IN_MAIN_PROCESS_KEY</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token constant\">PENDING_UPDATE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">flushPendingActions</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> silent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">triggerUpdatedEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> silent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// Avoid do both lazy update and progress in one frame.</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scheduler<span class=\"token punctuation\">.</span>unfinished<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Stream progress.</span>\n            <span class=\"token keyword\">let</span> remainTime <span class=\"token operator\">=</span> <span class=\"token constant\">TEST_FRAME_REMAIN_TIME</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> ecModel <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_api<span class=\"token punctuation\">;</span>\n            scheduler<span class=\"token punctuation\">.</span>unfinished <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">const</span> startTime <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performSeriesTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Currently dataProcessorFuncs do not check threshold.</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performDataProcessorTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">updateStreamModes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// Do not update coordinate system here. Because that coord system update in</span>\n                <span class=\"token comment\">// each frame is not a good user experience. So we follow the rule that</span>\n                <span class=\"token comment\">// the extent of the coordinate system is determin in the first frame (the</span>\n                <span class=\"token comment\">// frame is executed immedietely after task reset.</span>\n                <span class=\"token comment\">// this._coordSysMgr.update(ecModel, api);</span>\n\n                <span class=\"token comment\">// console.log('--- ec frame visual ---', remainTime);</span>\n                scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">performVisualTasks</span><span class=\"token punctuation\">(</span>ecModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">renderSeries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_model<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> <span class=\"token string\">'remain'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                remainTime <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>remainTime <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> scheduler<span class=\"token punctuation\">.</span>unfinished<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Call flush explicitly for trigger finished event.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>scheduler<span class=\"token punctuation\">.</span>unfinished<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_zr<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// Else, zr flushing be ensue within the same frame,</span>\n            <span class=\"token comment\">// because zr flushing is after onframe event.</span>\n        <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于echarts的渲染分析就到这了，下次有机会我们自己动手写一个ChartView。</p>\n"},{"title":"函数式编程简介","author":"王登武","date":"2021-11-24T02:47:05.000Z","_content":"### 函数式编程是什么\n函数式编程是一种编程范式，大部分人已知的编程范式有C的命令式，Java的面向对象，我们不需要从学术的角度，来严格定义函数式编程，并且函数式和面向对象也不是非此即彼的关系，强大如Scala也是混合式范式语言，我们从实用角度来介绍和解读函数式编程。\n函数式编程至少应该具有以下特性：\n\n* 函数是一等公民\n* 支持匿名函数\n* 闭包\n* 柯里化\n* 惰性求值\n* 参数多态\n* 代数数据类型\n* 。。。\n\n函数式编程理所当然是以函数为主要编程对象，而面向对象则以对象为主要编程对象，但是你仔细想想，面向对象如果没有方法，而只是有一堆属性的类，哪还有什么功能价值呢？所以即便是面向对象也离不开方法，当然这里的方法除了不是一等公民以外，和函数式编程差别也很大，那差别在哪里了？\n\n### 纯函数\n纯函数，又称为没有副作用，或者引用透明，那什么样的方法是没有副作用的呢？\n\n* 方法的参数值不变，则返回值就不会改变，比如random函数就不是纯函数。\n* 必须有返回值。\n* 方法不会对外界变量造成改变，即便是打印日志，控制台输出，都不可以。\n* 不能抛出异常，即便是抛出异常也不是纯函数。\n\n纯函数有什么好处呢？\n\n* 独立性，因为不会依赖外部变量，只依赖输入的参数，很方便进行单元测试。\n* 确定性，相同的参数，总是返回相同的结果，不会出现诡异的bug。\n* 安全性，不用担心它抛出异常，函数调用等价于表达式。\n* 结合高阶函数，稳定的纯函数复合出来的函数依然具备以上特性。\n\n### 手写纯函数\n我们下面使用Java来写一个纯函数，虽然Java它并不是函数式的语言，但是并不妨碍我们展示函数式编程，有些语言对函数式编程比较友好，比如Scala，但是函数式编程并不仅仅取决于语言，而是取决于你怎么写代码。\n自从Java8开始支持lambda表达式开始，Java已经有点函数式的味道了。我们先从一个接口开始，因为Java里函数不是一等公民，所以我们只能从接口定义函数。\n\n``` java\npublic interface Function<T, U> {\n    U apply(T arg);\n}\n```\n\n我们来做一下单元测试\n\n``` java\npublic class FunctionTest {\n    private final Function<Integer, Integer> add = x -> x + 1;\n    private final Function<Integer, Integer> multi = x -> x * 2;\n    \n    @Test\n    public void testApply() {\n        assertEquals(Integer.valueOf(2), add.apply(1));\n        assertEquals(Integer.valueOf(4), multi.apply(2));\n    }\n}\n```\nadd和multi就是纯函数。这个apply的定义虽然看起来很基础简单，但是就像函数式的基石一样，非常有用。\n\n### 高阶函数\n什么是高阶函数呢？别被高阶给吓到，其实就是可以接收函数作为参数，并且可以返回函数的函数。\n\n``` java\npublic interface Function<T, U> {\n    U apply(T arg);\n\n    default <V> Function<V, U> compose(Function<V, T> f) {\n        return v -> apply(f.apply(v));\n    }\n}\n```\n来看单元测试\n\n``` java\npublic class FunctionTest {\n    private final Function<Integer, Integer> add = x -> x + 1;\n    private final Function<Integer, Integer> multi = x -> x * 2;\n\n    @Test\n    public void testApply() {\n        assertEquals(Integer.valueOf(2), add.apply(1));\n        assertEquals(Integer.valueOf(4), multi.apply(2));\n    }\n\n    @Test\n    public void testCompose() {\n        Function<Integer, Integer> compose = add.compose(multi);\n        Integer result = compose.apply(1);\n        assertEquals(Integer.valueOf(3), result);\n    }\n}\n```\nadd组合函数multi生成了新的函数compose，调用该函数得到返回值，其实就是执行了1+1*2 = 3\n对函数式编程有点感觉了吗？这才只是开胃菜，让我们继续烧脑。\n \n### 柯里化\n函数是可以有多个参数的，以2个参数的举例，f(x,y) = x+y*2 有时候我们并不想一次性把2个参数都确定，而只是固定一个参数，以固定的这个参数为函数，再应用另外一个参数，比如我们先固定x=1,然后再应用这个得到的函数y=2，y=3，就可以得到一个对参数加倍再固定+1的函数。\n但是，我们之前定义的apply方法只有一个参数怎么办？其实把函数看成只有一个参数，引入Tuple类型，先看下Tuple的定义\n\n``` java\npublic class Tuple<T, U> {\n    public final T _1;\n    public final U _2;\n\n    public Tuple(T t, U u) {\n        this._1 = t;\n        this._2 = u;\n    }\n}\n```\n很简单，就是参数的盒子而已，这样我们就可以使用之前定义的函数来传入2个参数了。\n\n``` java\n static <A, B, C> Function<A, Function<B, C>> curry(Function<Tuple<A, B>, C> f) {\n        return a -> b -> f.apply(new Tuple<>(a, b));\n }\n```\n单元测试如下\n\n``` java\nprivate final Function<Tuple<Integer, Integer>, Integer> addWithTuple = t -> t._1 + t._2 * 2;\n@Test\npublic void testCurry() {\n    Integer result = Function.<Integer, Integer, Integer>curry(addWithTuple).apply(1).apply(2);\n    assertEquals(Integer.valueOf(5), result);\n}\n```\n### 惰性求值\n惰性求值是指只有在真正获取的时候，才去执行函数，举个栗子\n\n``` java\n@Test\npublic void testLazy() {\n    add(1, recursion(1));\n}\n\nprivate Integer recursion(Integer b) {\n    return recursion(b);\n}\n\nprivate Integer add(int a, int b) {\n    return a;\n}\n```\n执行上面的代码，就会得到java.lang.StackOverflowError，我们明明不需要b的结果，但是由于Java表达式并不支持惰性，所以导致递归函数一直执行到爆栈。\n我们来改造一下。\n\n``` java\n@Test\npublic void testLazy() {\n    add(1, () -> recursion(1));\n}\n\nprivate Integer recursion(Integer b) {\n    return recursion(b);\n}\n\nprivate Integer add(int a, Supplier<Integer> b) {\n    return a;\n}\n```\n好吧，我承认我作弊，改变了参数类型，但是这个例子只是让你感觉一下，什么是惰性求值。\n### 模式匹配\n函数式最有用的一个功能，我觉得就是模式匹配，因为可以很好的消除if else，命令式往往充斥着if else，而这些往往是令人难以理解和产生bug的地方，因此难于维护，而函数式编程里，只有表达式没有语句，if else往往纠结在细节里，而函数式编程通过代数数据类型，以及解构对象来对表达式进行匹配，可以很优雅的解决if else的问题。下面我们来演示一下如何消除if else，这次因为Java表达能力不够简洁，我们使用kotlin来做演示\n#### 需求\n* 计算个人所得税\n* 如果一个人有房子则减免100再计税\n* 如果一个人有孩子则减免200再计税\n* 减免后大于等于1000则缴税减免后金额的3%\n* 减免后大于等于3000则缴税减免后金额的5%\n* 求应交税多少，不考虑精度丢失等情况\n\n过程式函数实现\n\n``` java\n/**\n * 计算个人所得税\n * 如果一个人有房子则减免100再计税\n * 如果一个人有孩子则减免200再计税\n * 减免后大于等于1000则缴税减免后金额的3%\n * 减免后大于等于3000则缴税减免后金额的5%\n * 求应交税多少，不考虑精度丢失等情况\n */\n private double tax(boolean hasHouse, boolean hasChild, double money) {\n        double firstLevel = 1000;\n        double firstLevelReduce = 100;\n        double secondLevel = 3000;\n        double secondLevelReduce = 200;\n        double tax = 0;\n        double after = money;\n        if (hasHouse) {\n            if (hasChild) {\n                after = money - secondLevelReduce - firstLevelReduce;\n            } else {\n                after = money - firstLevelReduce;\n            }\n        } else {\n            if (hasChild) {\n                after = money - secondLevelReduce;\n            }\n        }\n        if (after >= firstLevel) {\n            tax = after * 0.03;\n        }\n        if (after >= secondLevel) {\n            tax = after * 0.05;\n        }\n        return tax;\n }\n```\n过程式避免不了if else的嵌套，即便重构基于设计模式的优化，比如策略或者责任链，杀鸡用牛刀不说，扩展性好了，但是可读性差了。\n看一下使用kotlin的版本\n\n``` kotlin\n/**\n * 计算个人所得税\n * 如果一个人有房子则减免100再计税\n * 如果一个人有孩子则减免200再计税\n * 减免后大于等于1000则缴税减免后金额的3%\n * 减免后大于等于3000则缴税减免后金额的5%\n * 求应交税多少，不考虑精度丢失等情况\n */\ndata class Person(val hasHouse: Boolean, val hasChild: Boolean, val money: Double) {\n    private var actualReduce: Double = when (Pair(hasHouse, hasChild)) {\n        Pair(true, true) -> HAS_HOUSE_REDUCE + HAS_CHILD_REDUCE\n        Pair(true, false) -> HAS_HOUSE_REDUCE\n        Pair(false, true) -> HAS_CHILD_REDUCE\n        else -> 0.0\n    }\n\n    companion object {\n        private const val FIRST_LEVEL = 1000.0\n        private const val FIRST_LEVEL_RATE = 0.03\n        private const val SECOND_LEVEL = 3000.0\n        private const val SECOND_LEVEL_RATE = 0.05\n        private const val HAS_HOUSE_REDUCE = 100.0\n        private const val HAS_CHILD_REDUCE = 200.0\n    }\n\n    fun tax(): Double {\n        return when (val after = money - actualReduce) {\n            in FIRST_LEVEL..SECOND_LEVEL -> {\n                after * FIRST_LEVEL_RATE\n            }\n            in SECOND_LEVEL..Double.MAX_VALUE -> {\n                after * SECOND_LEVEL_RATE\n            }\n            else -> {\n                0.0\n            }\n        }\n    }\n\n}\n```\n虽然有点不公平，因为使用了类，但是其实逻辑都差不多，关键还是使用了when模式匹配，以及after的表达式匹配\n虽然你说when case不就是switch么，其实不是，因为模式匹配可以匹配类型，表达式等等，而switch只能是值（整数或字符串）。\n最关键的是可读性提高了，不需要注释说明，即可知道代码所表达的逻辑，接近自然语言。\n### 结束\n当然函数式还有很多没有介绍的，比如Typeclass，函数式的集合，集合的折叠fold,map,flatMap等等，以及函数式范畴学的Monad\n但是咱只是简介嘛，所以以后有机会再深入介绍吧。\n","source":"_posts/函数式编程简介.md","raw":"---\ntitle: 函数式编程简介\nauthor: 王登武\ndate: 2021-11-24 10:47:05\ncategories: 函数式编程\ntags: 函数式编程\n---\n### 函数式编程是什么\n函数式编程是一种编程范式，大部分人已知的编程范式有C的命令式，Java的面向对象，我们不需要从学术的角度，来严格定义函数式编程，并且函数式和面向对象也不是非此即彼的关系，强大如Scala也是混合式范式语言，我们从实用角度来介绍和解读函数式编程。\n函数式编程至少应该具有以下特性：\n\n* 函数是一等公民\n* 支持匿名函数\n* 闭包\n* 柯里化\n* 惰性求值\n* 参数多态\n* 代数数据类型\n* 。。。\n\n函数式编程理所当然是以函数为主要编程对象，而面向对象则以对象为主要编程对象，但是你仔细想想，面向对象如果没有方法，而只是有一堆属性的类，哪还有什么功能价值呢？所以即便是面向对象也离不开方法，当然这里的方法除了不是一等公民以外，和函数式编程差别也很大，那差别在哪里了？\n\n### 纯函数\n纯函数，又称为没有副作用，或者引用透明，那什么样的方法是没有副作用的呢？\n\n* 方法的参数值不变，则返回值就不会改变，比如random函数就不是纯函数。\n* 必须有返回值。\n* 方法不会对外界变量造成改变，即便是打印日志，控制台输出，都不可以。\n* 不能抛出异常，即便是抛出异常也不是纯函数。\n\n纯函数有什么好处呢？\n\n* 独立性，因为不会依赖外部变量，只依赖输入的参数，很方便进行单元测试。\n* 确定性，相同的参数，总是返回相同的结果，不会出现诡异的bug。\n* 安全性，不用担心它抛出异常，函数调用等价于表达式。\n* 结合高阶函数，稳定的纯函数复合出来的函数依然具备以上特性。\n\n### 手写纯函数\n我们下面使用Java来写一个纯函数，虽然Java它并不是函数式的语言，但是并不妨碍我们展示函数式编程，有些语言对函数式编程比较友好，比如Scala，但是函数式编程并不仅仅取决于语言，而是取决于你怎么写代码。\n自从Java8开始支持lambda表达式开始，Java已经有点函数式的味道了。我们先从一个接口开始，因为Java里函数不是一等公民，所以我们只能从接口定义函数。\n\n``` java\npublic interface Function<T, U> {\n    U apply(T arg);\n}\n```\n\n我们来做一下单元测试\n\n``` java\npublic class FunctionTest {\n    private final Function<Integer, Integer> add = x -> x + 1;\n    private final Function<Integer, Integer> multi = x -> x * 2;\n    \n    @Test\n    public void testApply() {\n        assertEquals(Integer.valueOf(2), add.apply(1));\n        assertEquals(Integer.valueOf(4), multi.apply(2));\n    }\n}\n```\nadd和multi就是纯函数。这个apply的定义虽然看起来很基础简单，但是就像函数式的基石一样，非常有用。\n\n### 高阶函数\n什么是高阶函数呢？别被高阶给吓到，其实就是可以接收函数作为参数，并且可以返回函数的函数。\n\n``` java\npublic interface Function<T, U> {\n    U apply(T arg);\n\n    default <V> Function<V, U> compose(Function<V, T> f) {\n        return v -> apply(f.apply(v));\n    }\n}\n```\n来看单元测试\n\n``` java\npublic class FunctionTest {\n    private final Function<Integer, Integer> add = x -> x + 1;\n    private final Function<Integer, Integer> multi = x -> x * 2;\n\n    @Test\n    public void testApply() {\n        assertEquals(Integer.valueOf(2), add.apply(1));\n        assertEquals(Integer.valueOf(4), multi.apply(2));\n    }\n\n    @Test\n    public void testCompose() {\n        Function<Integer, Integer> compose = add.compose(multi);\n        Integer result = compose.apply(1);\n        assertEquals(Integer.valueOf(3), result);\n    }\n}\n```\nadd组合函数multi生成了新的函数compose，调用该函数得到返回值，其实就是执行了1+1*2 = 3\n对函数式编程有点感觉了吗？这才只是开胃菜，让我们继续烧脑。\n \n### 柯里化\n函数是可以有多个参数的，以2个参数的举例，f(x,y) = x+y*2 有时候我们并不想一次性把2个参数都确定，而只是固定一个参数，以固定的这个参数为函数，再应用另外一个参数，比如我们先固定x=1,然后再应用这个得到的函数y=2，y=3，就可以得到一个对参数加倍再固定+1的函数。\n但是，我们之前定义的apply方法只有一个参数怎么办？其实把函数看成只有一个参数，引入Tuple类型，先看下Tuple的定义\n\n``` java\npublic class Tuple<T, U> {\n    public final T _1;\n    public final U _2;\n\n    public Tuple(T t, U u) {\n        this._1 = t;\n        this._2 = u;\n    }\n}\n```\n很简单，就是参数的盒子而已，这样我们就可以使用之前定义的函数来传入2个参数了。\n\n``` java\n static <A, B, C> Function<A, Function<B, C>> curry(Function<Tuple<A, B>, C> f) {\n        return a -> b -> f.apply(new Tuple<>(a, b));\n }\n```\n单元测试如下\n\n``` java\nprivate final Function<Tuple<Integer, Integer>, Integer> addWithTuple = t -> t._1 + t._2 * 2;\n@Test\npublic void testCurry() {\n    Integer result = Function.<Integer, Integer, Integer>curry(addWithTuple).apply(1).apply(2);\n    assertEquals(Integer.valueOf(5), result);\n}\n```\n### 惰性求值\n惰性求值是指只有在真正获取的时候，才去执行函数，举个栗子\n\n``` java\n@Test\npublic void testLazy() {\n    add(1, recursion(1));\n}\n\nprivate Integer recursion(Integer b) {\n    return recursion(b);\n}\n\nprivate Integer add(int a, int b) {\n    return a;\n}\n```\n执行上面的代码，就会得到java.lang.StackOverflowError，我们明明不需要b的结果，但是由于Java表达式并不支持惰性，所以导致递归函数一直执行到爆栈。\n我们来改造一下。\n\n``` java\n@Test\npublic void testLazy() {\n    add(1, () -> recursion(1));\n}\n\nprivate Integer recursion(Integer b) {\n    return recursion(b);\n}\n\nprivate Integer add(int a, Supplier<Integer> b) {\n    return a;\n}\n```\n好吧，我承认我作弊，改变了参数类型，但是这个例子只是让你感觉一下，什么是惰性求值。\n### 模式匹配\n函数式最有用的一个功能，我觉得就是模式匹配，因为可以很好的消除if else，命令式往往充斥着if else，而这些往往是令人难以理解和产生bug的地方，因此难于维护，而函数式编程里，只有表达式没有语句，if else往往纠结在细节里，而函数式编程通过代数数据类型，以及解构对象来对表达式进行匹配，可以很优雅的解决if else的问题。下面我们来演示一下如何消除if else，这次因为Java表达能力不够简洁，我们使用kotlin来做演示\n#### 需求\n* 计算个人所得税\n* 如果一个人有房子则减免100再计税\n* 如果一个人有孩子则减免200再计税\n* 减免后大于等于1000则缴税减免后金额的3%\n* 减免后大于等于3000则缴税减免后金额的5%\n* 求应交税多少，不考虑精度丢失等情况\n\n过程式函数实现\n\n``` java\n/**\n * 计算个人所得税\n * 如果一个人有房子则减免100再计税\n * 如果一个人有孩子则减免200再计税\n * 减免后大于等于1000则缴税减免后金额的3%\n * 减免后大于等于3000则缴税减免后金额的5%\n * 求应交税多少，不考虑精度丢失等情况\n */\n private double tax(boolean hasHouse, boolean hasChild, double money) {\n        double firstLevel = 1000;\n        double firstLevelReduce = 100;\n        double secondLevel = 3000;\n        double secondLevelReduce = 200;\n        double tax = 0;\n        double after = money;\n        if (hasHouse) {\n            if (hasChild) {\n                after = money - secondLevelReduce - firstLevelReduce;\n            } else {\n                after = money - firstLevelReduce;\n            }\n        } else {\n            if (hasChild) {\n                after = money - secondLevelReduce;\n            }\n        }\n        if (after >= firstLevel) {\n            tax = after * 0.03;\n        }\n        if (after >= secondLevel) {\n            tax = after * 0.05;\n        }\n        return tax;\n }\n```\n过程式避免不了if else的嵌套，即便重构基于设计模式的优化，比如策略或者责任链，杀鸡用牛刀不说，扩展性好了，但是可读性差了。\n看一下使用kotlin的版本\n\n``` kotlin\n/**\n * 计算个人所得税\n * 如果一个人有房子则减免100再计税\n * 如果一个人有孩子则减免200再计税\n * 减免后大于等于1000则缴税减免后金额的3%\n * 减免后大于等于3000则缴税减免后金额的5%\n * 求应交税多少，不考虑精度丢失等情况\n */\ndata class Person(val hasHouse: Boolean, val hasChild: Boolean, val money: Double) {\n    private var actualReduce: Double = when (Pair(hasHouse, hasChild)) {\n        Pair(true, true) -> HAS_HOUSE_REDUCE + HAS_CHILD_REDUCE\n        Pair(true, false) -> HAS_HOUSE_REDUCE\n        Pair(false, true) -> HAS_CHILD_REDUCE\n        else -> 0.0\n    }\n\n    companion object {\n        private const val FIRST_LEVEL = 1000.0\n        private const val FIRST_LEVEL_RATE = 0.03\n        private const val SECOND_LEVEL = 3000.0\n        private const val SECOND_LEVEL_RATE = 0.05\n        private const val HAS_HOUSE_REDUCE = 100.0\n        private const val HAS_CHILD_REDUCE = 200.0\n    }\n\n    fun tax(): Double {\n        return when (val after = money - actualReduce) {\n            in FIRST_LEVEL..SECOND_LEVEL -> {\n                after * FIRST_LEVEL_RATE\n            }\n            in SECOND_LEVEL..Double.MAX_VALUE -> {\n                after * SECOND_LEVEL_RATE\n            }\n            else -> {\n                0.0\n            }\n        }\n    }\n\n}\n```\n虽然有点不公平，因为使用了类，但是其实逻辑都差不多，关键还是使用了when模式匹配，以及after的表达式匹配\n虽然你说when case不就是switch么，其实不是，因为模式匹配可以匹配类型，表达式等等，而switch只能是值（整数或字符串）。\n最关键的是可读性提高了，不需要注释说明，即可知道代码所表达的逻辑，接近自然语言。\n### 结束\n当然函数式还有很多没有介绍的，比如Typeclass，函数式的集合，集合的折叠fold,map,flatMap等等，以及函数式范畴学的Monad\n但是咱只是简介嘛，所以以后有机会再深入介绍吧。\n","slug":"函数式编程简介","published":1,"updated":"2021-11-25T12:00:56.254Z","_id":"ckwer356y0000zc9g8ktj0ffr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"函数式编程是什么\"><a href=\"#函数式编程是什么\" class=\"headerlink\" title=\"函数式编程是什么\"></a>函数式编程是什么</h3><p>函数式编程是一种编程范式，大部分人已知的编程范式有C的命令式，Java的面向对象，我们不需要从学术的角度，来严格定义函数式编程，并且函数式和面向对象也不是非此即彼的关系，强大如Scala也是混合式范式语言，我们从实用角度来介绍和解读函数式编程。<br>函数式编程至少应该具有以下特性：</p>\n<ul>\n<li>函数是一等公民</li>\n<li>支持匿名函数</li>\n<li>闭包</li>\n<li>柯里化</li>\n<li>惰性求值</li>\n<li>参数多态</li>\n<li>代数数据类型</li>\n<li>。。。</li>\n</ul>\n<p>函数式编程理所当然是以函数为主要编程对象，而面向对象则以对象为主要编程对象，但是你仔细想想，面向对象如果没有方法，而只是有一堆属性的类，哪还有什么功能价值呢？所以即便是面向对象也离不开方法，当然这里的方法除了不是一等公民以外，和函数式编程差别也很大，那差别在哪里了？</p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>纯函数，又称为没有副作用，或者引用透明，那什么样的方法是没有副作用的呢？</p>\n<ul>\n<li>方法的参数值不变，则返回值就不会改变，比如random函数就不是纯函数。</li>\n<li>必须有返回值。</li>\n<li>方法不会对外界变量造成改变，即便是打印日志，控制台输出，都不可以。</li>\n<li>不能抛出异常，即便是抛出异常也不是纯函数。</li>\n</ul>\n<p>纯函数有什么好处呢？</p>\n<ul>\n<li>独立性，因为不会依赖外部变量，只依赖输入的参数，很方便进行单元测试。</li>\n<li>确定性，相同的参数，总是返回相同的结果，不会出现诡异的bug。</li>\n<li>安全性，不用担心它抛出异常，函数调用等价于表达式。</li>\n<li>结合高阶函数，稳定的纯函数复合出来的函数依然具备以上特性。</li>\n</ul>\n<h3 id=\"手写纯函数\"><a href=\"#手写纯函数\" class=\"headerlink\" title=\"手写纯函数\"></a>手写纯函数</h3><p>我们下面使用Java来写一个纯函数，虽然Java它并不是函数式的语言，但是并不妨碍我们展示函数式编程，有些语言对函数式编程比较友好，比如Scala，但是函数式编程并不仅仅取决于语言，而是取决于你怎么写代码。<br>自从Java8开始支持lambda表达式开始，Java已经有点函数式的味道了。我们先从一个接口开始，因为Java里函数不是一等公民，所以我们只能从接口定义函数。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">U</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>我们来做一下单元测试</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> add <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> multi <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testApply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> multi<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>add和multi就是纯函数。这个apply的定义虽然看起来很基础简单，但是就像函数式的基石一样，非常有用。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>什么是高阶函数呢？别被高阶给吓到，其实就是可以接收函数作为参数，并且可以返回函数的函数。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">U</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> v <span class=\"token operator\">-></span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>来看单元测试</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> add <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> multi <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testApply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> multi<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> compose <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>multi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> compose<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>add组合函数multi生成了新的函数compose，调用该函数得到返回值，其实就是执行了1+1*2 = 3<br>对函数式编程有点感觉了吗？这才只是开胃菜，让我们继续烧脑。</p>\n<h3 id=\"柯里化\"><a href=\"#柯里化\" class=\"headerlink\" title=\"柯里化\"></a>柯里化</h3><p>函数是可以有多个参数的，以2个参数的举例，f(x,y) = x+y*2 有时候我们并不想一次性把2个参数都确定，而只是固定一个参数，以固定的这个参数为函数，再应用另外一个参数，比如我们先固定x=1,然后再应用这个得到的函数y=2，y=3，就可以得到一个对参数加倍再固定+1的函数。<br>但是，我们之前定义的apply方法只有一个参数怎么办？其实把函数看成只有一个参数，引入Tuple类型，先看下Tuple的定义</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tuple</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> _1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">U</span> _2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Tuple</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span> u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_2 <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>很简单，就是参数的盒子而已，这样我们就可以使用之前定义的函数来传入2个参数了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">></span></span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> a <span class=\"token operator\">-></span> b <span class=\"token operator\">-></span> f<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Tuple</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>单元测试如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> addWithTuple <span class=\"token operator\">=</span> t <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span>_2 <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCurry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>addWithTuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"惰性求值\"><a href=\"#惰性求值\" class=\"headerlink\" title=\"惰性求值\"></a>惰性求值</h3><p>惰性求值是指只有在真正获取的时候，才去执行函数，举个栗子</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，就会得到java.lang.StackOverflowError，我们明明不需要b的结果，但是由于Java表达式并不支持惰性，所以导致递归函数一直执行到爆栈。<br>我们来改造一下。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好吧，我承认我作弊，改变了参数类型，但是这个例子只是让你感觉一下，什么是惰性求值。</p>\n<h3 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h3><p>函数式最有用的一个功能，我觉得就是模式匹配，因为可以很好的消除if else，命令式往往充斥着if else，而这些往往是令人难以理解和产生bug的地方，因此难于维护，而函数式编程里，只有表达式没有语句，if else往往纠结在细节里，而函数式编程通过代数数据类型，以及解构对象来对表达式进行匹配，可以很优雅的解决if else的问题。下面我们来演示一下如何消除if else，这次因为Java表达能力不够简洁，我们使用kotlin来做演示</p>\n<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><ul>\n<li>计算个人所得税</li>\n<li>如果一个人有房子则减免100再计税</li>\n<li>如果一个人有孩子则减免200再计税</li>\n<li>减免后大于等于1000则缴税减免后金额的3%</li>\n<li>减免后大于等于3000则缴税减免后金额的5%</li>\n<li>求应交税多少，不考虑精度丢失等情况</li>\n</ul>\n<p>过程式函数实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 计算个人所得税\n * 如果一个人有房子则减免100再计税\n * 如果一个人有孩子则减免200再计税\n * 减免后大于等于1000则缴税减免后金额的3%\n * 减免后大于等于3000则缴税减免后金额的5%\n * 求应交税多少，不考虑精度丢失等情况\n */</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> <span class=\"token function\">tax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> hasHouse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> hasChild<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">double</span> firstLevel <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> firstLevelReduce <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> secondLevel <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> secondLevelReduce <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> tax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> after <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasHouse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">=</span> money <span class=\"token operator\">-</span> secondLevelReduce <span class=\"token operator\">-</span> firstLevelReduce<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">=</span> money <span class=\"token operator\">-</span> firstLevelReduce<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">=</span> money <span class=\"token operator\">-</span> secondLevelReduce<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>after <span class=\"token operator\">>=</span> firstLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            tax <span class=\"token operator\">=</span> after <span class=\"token operator\">*</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>after <span class=\"token operator\">>=</span> secondLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            tax <span class=\"token operator\">=</span> after <span class=\"token operator\">*</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> tax<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>过程式避免不了if else的嵌套，即便重构基于设计模式的优化，比如策略或者责任链，杀鸡用牛刀不说，扩展性好了，但是可读性差了。<br>看一下使用kotlin的版本</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * 计算个人所得税\n * 如果一个人有房子则减免100再计税\n * 如果一个人有孩子则减免200再计税\n * 减免后大于等于1000则缴税减免后金额的3%\n * 减免后大于等于3000则缴税减免后金额的5%\n * 求应交税多少，不考虑精度丢失等情况\n */</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> hasHouse<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> hasChild<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> money<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> actualReduce<span class=\"token operator\">:</span> Double <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span>hasHouse<span class=\"token punctuation\">,</span> hasChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> HAS_HOUSE_REDUCE <span class=\"token operator\">+</span> HAS_CHILD_REDUCE\n        <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> HAS_HOUSE_REDUCE\n        <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> HAS_CHILD_REDUCE\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token number\">0.0</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> FIRST_LEVEL <span class=\"token operator\">=</span> <span class=\"token number\">1000.0</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> FIRST_LEVEL_RATE <span class=\"token operator\">=</span> <span class=\"token number\">0.03</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SECOND_LEVEL <span class=\"token operator\">=</span> <span class=\"token number\">3000.0</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SECOND_LEVEL_RATE <span class=\"token operator\">=</span> <span class=\"token number\">0.05</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> HAS_HOUSE_REDUCE <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> HAS_CHILD_REDUCE <span class=\"token operator\">=</span> <span class=\"token number\">200.0</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">tax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Double <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> after <span class=\"token operator\">=</span> money <span class=\"token operator\">-</span> actualReduce<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">in</span> FIRST_LEVEL<span class=\"token operator\">..</span>SECOND_LEVEL <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">*</span> FIRST_LEVEL_RATE\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">in</span> SECOND_LEVEL<span class=\"token operator\">..</span>Double<span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">*</span> SECOND_LEVEL_RATE\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token number\">0.0</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>虽然有点不公平，因为使用了类，但是其实逻辑都差不多，关键还是使用了when模式匹配，以及after的表达式匹配<br>虽然你说when case不就是switch么，其实不是，因为模式匹配可以匹配类型，表达式等等，而switch只能是值（整数或字符串）。<br>最关键的是可读性提高了，不需要注释说明，即可知道代码所表达的逻辑，接近自然语言。</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>当然函数式还有很多没有介绍的，比如Typeclass，函数式的集合，集合的折叠fold,map,flatMap等等，以及函数式范畴学的Monad<br>但是咱只是简介嘛，所以以后有机会再深入介绍吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数式编程是什么\"><a href=\"#函数式编程是什么\" class=\"headerlink\" title=\"函数式编程是什么\"></a>函数式编程是什么</h3><p>函数式编程是一种编程范式，大部分人已知的编程范式有C的命令式，Java的面向对象，我们不需要从学术的角度，来严格定义函数式编程，并且函数式和面向对象也不是非此即彼的关系，强大如Scala也是混合式范式语言，我们从实用角度来介绍和解读函数式编程。<br>函数式编程至少应该具有以下特性：</p>\n<ul>\n<li>函数是一等公民</li>\n<li>支持匿名函数</li>\n<li>闭包</li>\n<li>柯里化</li>\n<li>惰性求值</li>\n<li>参数多态</li>\n<li>代数数据类型</li>\n<li>。。。</li>\n</ul>\n<p>函数式编程理所当然是以函数为主要编程对象，而面向对象则以对象为主要编程对象，但是你仔细想想，面向对象如果没有方法，而只是有一堆属性的类，哪还有什么功能价值呢？所以即便是面向对象也离不开方法，当然这里的方法除了不是一等公民以外，和函数式编程差别也很大，那差别在哪里了？</p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>纯函数，又称为没有副作用，或者引用透明，那什么样的方法是没有副作用的呢？</p>\n<ul>\n<li>方法的参数值不变，则返回值就不会改变，比如random函数就不是纯函数。</li>\n<li>必须有返回值。</li>\n<li>方法不会对外界变量造成改变，即便是打印日志，控制台输出，都不可以。</li>\n<li>不能抛出异常，即便是抛出异常也不是纯函数。</li>\n</ul>\n<p>纯函数有什么好处呢？</p>\n<ul>\n<li>独立性，因为不会依赖外部变量，只依赖输入的参数，很方便进行单元测试。</li>\n<li>确定性，相同的参数，总是返回相同的结果，不会出现诡异的bug。</li>\n<li>安全性，不用担心它抛出异常，函数调用等价于表达式。</li>\n<li>结合高阶函数，稳定的纯函数复合出来的函数依然具备以上特性。</li>\n</ul>\n<h3 id=\"手写纯函数\"><a href=\"#手写纯函数\" class=\"headerlink\" title=\"手写纯函数\"></a>手写纯函数</h3><p>我们下面使用Java来写一个纯函数，虽然Java它并不是函数式的语言，但是并不妨碍我们展示函数式编程，有些语言对函数式编程比较友好，比如Scala，但是函数式编程并不仅仅取决于语言，而是取决于你怎么写代码。<br>自从Java8开始支持lambda表达式开始，Java已经有点函数式的味道了。我们先从一个接口开始，因为Java里函数不是一等公民，所以我们只能从接口定义函数。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">U</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>我们来做一下单元测试</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> add <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> multi <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testApply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> multi<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>add和multi就是纯函数。这个apply的定义虽然看起来很基础简单，但是就像函数式的基石一样，非常有用。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>什么是高阶函数呢？别被高阶给吓到，其实就是可以接收函数作为参数，并且可以返回函数的函数。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">U</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> v <span class=\"token operator\">-></span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>来看单元测试</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> add <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> multi <span class=\"token operator\">=</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testApply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> multi<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCompose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> compose <span class=\"token operator\">=</span> add<span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>multi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> compose<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>add组合函数multi生成了新的函数compose，调用该函数得到返回值，其实就是执行了1+1*2 = 3<br>对函数式编程有点感觉了吗？这才只是开胃菜，让我们继续烧脑。</p>\n<h3 id=\"柯里化\"><a href=\"#柯里化\" class=\"headerlink\" title=\"柯里化\"></a>柯里化</h3><p>函数是可以有多个参数的，以2个参数的举例，f(x,y) = x+y*2 有时候我们并不想一次性把2个参数都确定，而只是固定一个参数，以固定的这个参数为函数，再应用另外一个参数，比如我们先固定x=1,然后再应用这个得到的函数y=2，y=3，就可以得到一个对参数加倍再固定+1的函数。<br>但是，我们之前定义的apply方法只有一个参数怎么办？其实把函数看成只有一个参数，引入Tuple类型，先看下Tuple的定义</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tuple</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> _1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">U</span> _2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Tuple</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span> u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_2 <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>很简单，就是参数的盒子而已，这样我们就可以使用之前定义的函数来传入2个参数了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">></span></span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> a <span class=\"token operator\">-></span> b <span class=\"token operator\">-></span> f<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Tuple</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>单元测试如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tuple</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> addWithTuple <span class=\"token operator\">=</span> t <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span>_2 <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCurry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>addWithTuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"惰性求值\"><a href=\"#惰性求值\" class=\"headerlink\" title=\"惰性求值\"></a>惰性求值</h3><p>惰性求值是指只有在真正获取的时候，才去执行函数，举个栗子</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面的代码，就会得到java.lang.StackOverflowError，我们明明不需要b的结果，但是由于Java表达式并不支持惰性，所以导致递归函数一直执行到爆栈。<br>我们来改造一下。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好吧，我承认我作弊，改变了参数类型，但是这个例子只是让你感觉一下，什么是惰性求值。</p>\n<h3 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a>模式匹配</h3><p>函数式最有用的一个功能，我觉得就是模式匹配，因为可以很好的消除if else，命令式往往充斥着if else，而这些往往是令人难以理解和产生bug的地方，因此难于维护，而函数式编程里，只有表达式没有语句，if else往往纠结在细节里，而函数式编程通过代数数据类型，以及解构对象来对表达式进行匹配，可以很优雅的解决if else的问题。下面我们来演示一下如何消除if else，这次因为Java表达能力不够简洁，我们使用kotlin来做演示</p>\n<h4 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h4><ul>\n<li>计算个人所得税</li>\n<li>如果一个人有房子则减免100再计税</li>\n<li>如果一个人有孩子则减免200再计税</li>\n<li>减免后大于等于1000则缴税减免后金额的3%</li>\n<li>减免后大于等于3000则缴税减免后金额的5%</li>\n<li>求应交税多少，不考虑精度丢失等情况</li>\n</ul>\n<p>过程式函数实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 计算个人所得税\n * 如果一个人有房子则减免100再计税\n * 如果一个人有孩子则减免200再计税\n * 减免后大于等于1000则缴税减免后金额的3%\n * 减免后大于等于3000则缴税减免后金额的5%\n * 求应交税多少，不考虑精度丢失等情况\n */</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> <span class=\"token function\">tax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> hasHouse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> hasChild<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">double</span> firstLevel <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> firstLevelReduce <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> secondLevel <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> secondLevelReduce <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> tax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> after <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasHouse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">=</span> money <span class=\"token operator\">-</span> secondLevelReduce <span class=\"token operator\">-</span> firstLevelReduce<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">=</span> money <span class=\"token operator\">-</span> firstLevelReduce<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">=</span> money <span class=\"token operator\">-</span> secondLevelReduce<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>after <span class=\"token operator\">>=</span> firstLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            tax <span class=\"token operator\">=</span> after <span class=\"token operator\">*</span> <span class=\"token number\">0.03</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>after <span class=\"token operator\">>=</span> secondLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            tax <span class=\"token operator\">=</span> after <span class=\"token operator\">*</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> tax<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>过程式避免不了if else的嵌套，即便重构基于设计模式的优化，比如策略或者责任链，杀鸡用牛刀不说，扩展性好了，但是可读性差了。<br>看一下使用kotlin的版本</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * 计算个人所得税\n * 如果一个人有房子则减免100再计税\n * 如果一个人有孩子则减免200再计税\n * 减免后大于等于1000则缴税减免后金额的3%\n * 减免后大于等于3000则缴税减免后金额的5%\n * 求应交税多少，不考虑精度丢失等情况\n */</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> hasHouse<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> hasChild<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> money<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> actualReduce<span class=\"token operator\">:</span> Double <span class=\"token operator\">=</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span>hasHouse<span class=\"token punctuation\">,</span> hasChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> HAS_HOUSE_REDUCE <span class=\"token operator\">+</span> HAS_CHILD_REDUCE\n        <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> HAS_HOUSE_REDUCE\n        <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> HAS_CHILD_REDUCE\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token number\">0.0</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> FIRST_LEVEL <span class=\"token operator\">=</span> <span class=\"token number\">1000.0</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> FIRST_LEVEL_RATE <span class=\"token operator\">=</span> <span class=\"token number\">0.03</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SECOND_LEVEL <span class=\"token operator\">=</span> <span class=\"token number\">3000.0</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SECOND_LEVEL_RATE <span class=\"token operator\">=</span> <span class=\"token number\">0.05</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> HAS_HOUSE_REDUCE <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> HAS_CHILD_REDUCE <span class=\"token operator\">=</span> <span class=\"token number\">200.0</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">tax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Double <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> after <span class=\"token operator\">=</span> money <span class=\"token operator\">-</span> actualReduce<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">in</span> FIRST_LEVEL<span class=\"token operator\">..</span>SECOND_LEVEL <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">*</span> FIRST_LEVEL_RATE\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">in</span> SECOND_LEVEL<span class=\"token operator\">..</span>Double<span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                after <span class=\"token operator\">*</span> SECOND_LEVEL_RATE\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token number\">0.0</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>虽然有点不公平，因为使用了类，但是其实逻辑都差不多，关键还是使用了when模式匹配，以及after的表达式匹配<br>虽然你说when case不就是switch么，其实不是，因为模式匹配可以匹配类型，表达式等等，而switch只能是值（整数或字符串）。<br>最关键的是可读性提高了，不需要注释说明，即可知道代码所表达的逻辑，接近自然语言。</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>当然函数式还有很多没有介绍的，比如Typeclass，函数式的集合，集合的折叠fold,map,flatMap等等，以及函数式范畴学的Monad<br>但是咱只是简介嘛，所以以后有机会再深入介绍吧。</p>\n"},{"title":"深入浅出HikariCP数据库连接池","author":"王登武","date":"2021-12-01T07:16:08.000Z","_content":"\n\n### HikariCP简介\nHikariCP数据库连接池是spring boot的默认数据库连接池，看名字我以为是日本人写的，后来才知道是一个常年居住在东京的美国人写的，spring默认把hikari作为数据库连接池的原因也很简单，因为它足够快，代码量少，稳定，虽然功能不及Druid，但是对于监控也有一定的扩展性，简单，快速，稳定是其胜出的原因。目前支持JDK8的最新版本是4.0.3，在GitHub开源，[项目地址](https://github.com/brettwooldridge/HikariCP)\n\n### 不使用数据库连接池\n现在由于spring的普及，以及spring boot的集成便利性，无论是使用JPA还是MyBatis，底层ORM已经非常成熟，即便是基于学习也很少有人手动建立数据库连接，并执行SQL了，如果不使用数据库连接池，完全手动连接数据库，并执行SQL应该怎么做呢，让我们回到刀耕火种的时代，再怀旧一下。\n\n``` kotlin\nspring.datasource.driverClassName=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/mysql\nspring.datasource.username=root\nspring.datasource.password=123456\n\ninterface HikariDao {\n    fun useHikari(): String\n    fun useJdbc(): String\n}\npackage data.source.hikari.demo.dao\n\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.jdbc.core.JdbcTemplate\nimport org.springframework.jdbc.core.ResultSetExtractor\nimport org.springframework.stereotype.Service\nimport java.sql.DriverManager\n\n@Service\nclass HikariDaoImpl(\n    @Autowired private val jdbcTemplate: JdbcTemplate,\n    @Value(\"\\${spring.datasource.url}\") private val jdbcUrl: String,\n    @Value(\"\\${spring.datasource.username}\") private val userName: String,\n    @Value(\"\\${spring.datasource.password}\") private val password: String,\n) : HikariDao {\n\n    companion object {\n        private const val ALIAS = \"time\"\n        private const val SQL = \"select now() as $ALIAS\"\n    }\n\n    override fun useHikari(): String {\n        return jdbcTemplate.query(SQL, ResultSetExtractor {\n            it.next();\n            return@ResultSetExtractor it.getString(ALIAS)\n        })!!\n    }\n\n    override fun useJdbc(): String {\n        val connection = DriverManager.getConnection(jdbcUrl, userName, password)\n        connection.use {\n            val statement = connection.createStatement()\n            statement.use {\n                val result = statement.executeQuery(SQL)\n                result.use {\n                    it.next()\n                    return result.getString(ALIAS)\n                }\n            }\n        }\n    }\n}\n```\n直接操作jdbc，需要通过DriverManager获取数据库连接，然后通过Statement执行SQL，拿到ResultSet，手动getXXX获取数据并组装成对象，这里使用了kotlin的use来自动close，通过示例可以看到如果手动操作，非常繁琐，需要关心很多和业务无关的操作，而spring jdbc以及ORM框架则把这些繁琐的操作都封装了起来，使我们只需要关注具体的SQL和对象。\n这里还有一个小知识点，就是SPI，在JDBC4.0之前，需要使用`Class.forName(driverClassName)`来加载驱动，而JDBC4.0之后只需要厂商在驱动包里配置一下即可\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211201182322.png)\n原理是通过`val loader = ServiceLoader.load(Driver::class.java)`即可加载到实现。\n\n### 为什么需要数据库连接池\n数据库连接是TCP连接，需要经过TCP的三次握手，如果每次访问数据库都需要建立连接，则会导致每次获取数据都需要等待连接，将会大大降低数据获取的响应时间，而数据库连接池则是将数据库连接缓存起来，保持TCP连接不断，在需要的时候，直接从连接池里获取，不需要等待即可执行SQL获取到数据\n除了降低响应时间之外，数据库连接池还可以设定数据库连接数量，因为数据库连接是宝贵资源，当某一个服务并发比较高，并且SQL执行比较慢的时候，会导致建立大量的数据库连接，这往往会对数据库造成致命的影响，导致数据库连接占满而不可用，其它正常的服务也将不可用。\n另外TCP连接频繁建立断开，由于TCP断开的4次握手，会导致大量的TIME_WAIT状态问题，这也将会影响数据库的性能。\n### 数据库连接池原理\n在系统初始化的时候，在内存中开辟一片空间，将一定数量的数据库连接作为对象存储在对象池里，并对外提供数据库连接的获取和归还方法。用户访问数据库时，并不是建立一个新的连接，而是从数据库连接池中取出一个已有的空闲连接对象；使用完毕归还后的连接也不会马上被关闭，而是由数据库连接池统一管理回收，为下一次借用做好准备。如果由于高并发请求导致数据库连接池中的连接被借用完毕，其他线程就会等待，直到有连接被归还。整个过程中，连接并不会被关闭，而是源源不断地循环使用，有借有还。数据库连接池还可以通过设置其参数来控制连接池中的初始连接数、连接的上下限数，以及每个连接的最大使用次数、最大空闲时间等，也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。\n### 数据库连接池组成\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/数据库连接池.jpg)\n### 配置项\n由于spring boot 2.x开始数据库连接池已经默认是HikariCP了，所以我们只需要进行配置即可，那都有哪些配置项需要配置呢，又有哪些需要注意的地方呢？\n#### 默认是怎么生效的\n我们先来看下，spring boot 2.6.1是怎么默认使用HikariCP为数据库连接池的。\n\n``` xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n```\n只要在pom.xml引入starter-jdbc，则默认就引入了HikariCP数据库连接池，我们看下spring-boot-starter-jdbc的pom.xml\n\n``` xml\n<dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n      <version>2.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.zaxxer</groupId>\n      <artifactId>HikariCP</artifactId>\n      <version>4.0.3</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>5.3.13</version>\n      <scope>compile</scope>\n    </dependency>\n</dependencies>\n```\t\n可以看到jdbc依赖了HikariCP，并且版本是4.0.3最新版本。了解spring boot starter机制的应该知道，除了pom依赖，还需要有autoconfig\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211202154126.png)\n\n``` java\n@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnMissingBean(DataSource.class)\n\t@ConditionalOnProperty(name = \"spring.datasource.type\", havingValue = \"com.zaxxer.hikari.HikariDataSource\",\n\t\t\tmatchIfMissing = true)\n\tstatic class Hikari {\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = \"spring.datasource.hikari\")\n\t\tHikariDataSource dataSource(DataSourceProperties properties) {\n\t\t\tHikariDataSource dataSource = createDataSource(properties, HikariDataSource.class);\n\t\t\tif (StringUtils.hasText(properties.getName())) {\n\t\t\t\tdataSource.setPoolName(properties.getName());\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n}\n```\n这样就默认初始化了HikariDataSource。\n让我们再接着看下配置项。除了配置数据库必填的4个之外，常用配置还有另外几个。\n\n```\nspring.datasource.driverClassName=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/mysql\nspring.datasource.username=root\nspring.datasource.password=123456\n#默认true\nspring.datasource.hikari.autoCommit=true\n#等待超时时间，默认30秒\nspring.datasource.hikari.connectionTimeOut=30000\n#最长多久空闲即释放，默认10分钟\nspring.datasource.hikari.idleTimeout=600000\n#连接最长存活时间毫秒，默认30分钟\nspring.datasource.hikari.maxLifetime=1800000\n#最大连接池数量，默认10\nspring.datasource.hikari.maximumPoolSize=10\n#默认和max相同\nspring.datasource.hikari.minimumIdle=10\n#连接池名称，如果多个微服务，建议配置不同名字\nspring.datasource.hikari.poolName=hikari\n#开启JMX\nspring.datasource.hikari.registerMbeans=true\n\n#监控相关\n#spring.datasource.hikari.metricRegistry=\n#健康信息\n#spring.datasource.hikari.healthCheckRegistry=\n```\n#### 配置项注意点\n大部分应用使用默认值即可很好的工作，需要注意的是连接池数量不是越多越好，而是如何尽量少越好。\n我们先验证一下超时时间是否生效，为了方便测试，我们打开JMX以及将minimumIdle和maximumPoolSize改为1，然后执行慢查询，占用唯一的链接，再执行正常查询，等待，看看是否30秒会超时。\n\n``` kotlin\n@RestController\nclass HikariController(@Autowired private val hikariDao: HikariDao) {\n\n    @GetMapping(\"/hikari\")\n    public fun hikari(): String {\n        return hikariDao.useHikari()\n    }\n\n    @GetMapping(\"/slow\")\n    public fun slow(): Int {\n        return hikariDao.slowSql()\n    }\n}\n\ninterface HikariDao {\n    fun useHikari(): String\n    fun useJdbc(): String\n    fun slowSql(): Int\n}\n\n@Service\nclass HikariDaoImpl(\n    @Autowired private val jdbcTemplate: JdbcTemplate,\n    @Value(\"\\${spring.datasource.url}\") private val jdbcUrl: String,\n    @Value(\"\\${spring.datasource.username}\") private val userName: String,\n    @Value(\"\\${spring.datasource.password}\") private val password: String,\n) : HikariDao {\n\n    companion object {\n        private const val TIME = \"time\"\n        private const val COUNT = \"personCount\"\n        private const val SQL = \"select now() as $TIME\"\n        private const val SLOW_SQL = \"select count(id) as $COUNT from hikari_person\"\n    }\n\n    override fun useHikari(): String {\n        return jdbcTemplate.query(SQL, ResultSetExtractor {\n            it.next();\n            return@ResultSetExtractor it.getString(TIME)\n        })!!\n    }\n\n    override fun useJdbc(): String {\n        val connection = DriverManager.getConnection(jdbcUrl, userName, password)\n        connection.use {\n            val statement = connection.createStatement()\n            statement.use {\n                val result = statement.executeQuery(SQL)\n                result.use {\n                    it.next()\n                    return result.getString(TIME)\n                }\n            }\n        }\n    }\n\n    override fun slowSql(): Int {\n        return jdbcTemplate.query(SLOW_SQL, ResultSetExtractor {\n            it.next();\n            return@ResultSetExtractor it.getInt(COUNT)\n        })!!\n    }\n}\n```\n因为连接池是懒加载的，我们先访问一下/slow,验证一下不加表锁的情况下可以正常执行并初始化连接池。\n再通过jconsole看下连接池的情况。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206151609.png)\n可以看到空闲连接1个，现在，我们把hikari_person表加上写锁，来模拟慢查询。\n`LOCK TABLES hikari_person WRITE;`  再访问/slow,直接卡住没有返回。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152032.png)\n可以看到活跃连接1个，已经没有空闲的了，这个时候我们访问/hikari\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152151.png)\n变成了1个活跃，1个等待，并且30秒报了超时异常。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152344.png)\n可以看到，确实配置可以生效，当连接池已满，再有请求就会被阻塞等待，然后超时。\n记得执行`UNLOCK TABLES;`释放表锁。释放完后，原来等待返回的/slow直接返回了结果0。\n### 数据源的初始化\n之前已经看到spring boot启动的时候，会初始化HikariDataSource，关键代码\n\n``` java\n@Bean\n@ConfigurationProperties(prefix = \"spring.datasource.hikari\")\nHikariDataSource dataSource(DataSourceProperties properties) {\n\tHikariDataSource dataSource = createDataSource(properties, HikariDataSource.class);\n\tif (StringUtils.hasText(properties.getName())) {\n\t\tdataSource.setPoolName(properties.getName());\n\t}\n\treturn dataSource;\n}\n```\n再看一下HikariDataSource的类图\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206165729.png)\n\n由于HikariDataSource继承自HikariConfig，并且`@ConfigurationProperties(prefix = \"spring.datasource.hikari\")`所以我们在application.properties里配置的属性，就初始化到了DataSource里。\n### HikariDataSource的获取连接\n``` java\n@Override\npublic Connection getConnection() throws SQLException\n{\n  if (isClosed()) {\n     throw new SQLException(\"HikariDataSource \" + this + \" has been closed.\");\n  }\n\n  if (fastPathPool != null) {\n     return fastPathPool.getConnection();\n  }\n\n  // See http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java\n  HikariPool result = pool;\n  if (result == null) {\n     synchronized (this) {\n        result = pool;\n        if (result == null) {\n           validate();\n           LOGGER.info(\"{} - Starting...\", getPoolName());\n           try {\n              pool = result = new HikariPool(this);\n              this.seal();\n           }\n           catch (PoolInitializationException pie) {\n              if (pie.getCause() instanceof SQLException) {\n                 throw (SQLException) pie.getCause();\n              }\n              else {\n                 throw pie;\n              }\n           }\n           LOGGER.info(\"{} - Start completed.\", getPoolName());\n        }\n     }\n  }\n  return result.getConnection();\n}\n```\nHikariDataSource的getConnection方法，有个额外知识点，就是单例模式，HikariPool是单例的，使用了双重检测锁来完成单例操作。\n获取连接之前，需要先进行连接池的初始化new HikariPool(this)。\n### 连接池的初始化\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/初始化连接池.jpg)\n\nconnectionBag是连接池的并发数据结构，做了并发优化，后面再详细说明。\nhouseKeeper是保持连接池数量的线程池，核心数量为1，使用了ScheduledThreadPoolExecutor，默认30秒运行一次。\n监控后面再单独介绍。\n启用JMX之后，HikariConfigMXBean和HikariPoolMXBean将会展示到Mbean。\n创建物理Connection使用了addConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大线程都为1，使用了抛弃旧线程的策略。\n关闭物理Connection使用了closeConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大也为1，使用了直接在主线程运行的策略。\nleakTaskFactory用于检测是否有连接泄漏，getConnection之后要及时close掉，如果没有及时close则会有泄漏。通过getConnection时延迟执行ProxyLeakTask，延迟最小值2秒，低于此值则默认不进行连接泄漏检测，如果在该时间内没有及时close，则该延迟任务将会执行，而在close方法里，对该任务进行了cancel，及时close就不会触发ProxyLeakTask。默认是0不执行连接泄漏检测，可以通过spring.datasource.hikari.leakDetectionThreshold=3000设置来启用。\n到此连接池就初始化完了。\n### 获取连接\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/获取连接.jpg)\n核心代码\n\n``` java\npublic Connection getConnection(final long hardTimeout) throws SQLException\n   {\n      suspendResumeLock.acquire();\n      final long startTime = currentTime();\n\n      try {\n         long timeout = hardTimeout;\n         do {\n            PoolEntry poolEntry = connectionBag.borrow(timeout, MILLISECONDS);\n            if (poolEntry == null) {\n               break; // We timed out... break and throw exception\n            }\n\n            final long now = currentTime();\n            if (poolEntry.isMarkedEvicted() || (elapsedMillis(poolEntry.lastAccessed, now) > aliveBypassWindowMs && !isConnectionAlive(poolEntry.connection))) {\n               closeConnection(poolEntry, poolEntry.isMarkedEvicted() ? EVICTED_CONNECTION_MESSAGE : DEAD_CONNECTION_MESSAGE);\n               timeout = hardTimeout - elapsedMillis(startTime);\n            }\n            else {\n               metricsTracker.recordBorrowStats(poolEntry, startTime);\n               return poolEntry.createProxyConnection(leakTaskFactory.schedule(poolEntry), now);\n            }\n         } while (timeout > 0L);\n\n         metricsTracker.recordBorrowTimeoutStats(startTime);\n         throw createTimeoutException(startTime);\n      }\n      catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n         throw new SQLException(poolName + \" - Interrupted during connection acquisition\", e);\n      }\n      finally {\n         suspendResumeLock.release();\n      }\n}\n```\n外部spring等访问的getConnection最终是访问了HikariPool的getConnection。\n代码核心就是使用了并发数据结构ConnectionBag,ConnectionBag作用就是类似对象池，存储了数据库连接。\n使用borrow方法，如果有可用的链接，即可获取到包装对象PoolEntry。\n这里还有一个逻辑就是如果获取到的链接已经标记为关闭，或者存活时间超时，或者已经不可用，则\n\n``` java\nvoid closeConnection(final PoolEntry poolEntry, final String closureReason)\n   {\n      if (connectionBag.remove(poolEntry)) {\n         final Connection connection = poolEntry.close();\n         closeConnectionExecutor.execute(() -> {\n            quietlyCloseConnection(connection, closureReason);\n            if (poolState == POOL_NORMAL) {\n               fillPool();\n            }\n         });\n     }\n}\n```\n从ConnectionBag移除，使用closeConnectionExecutor关闭链接，并补充数量。\n所以getConnection里使用了do while来borrow获取一个链接。\n`return poolEntry.createProxyConnection(leakTaskFactory.schedule(poolEntry), now);`\n这块代码就是创建leakTask检测链接泄漏的同时，创建ProxyConnection返回。\n### 归还连接\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112081615450.jpg)\n由于之前获取的连接并不是真正JDBC的Connect驱动实现，而是代理实现，所以调用对应的close方法只是归还连接，而不是真正关闭物理连接，这样就实现了借用连接池的链接，在close的时候归还连接，以便后续使用。\n我们通过打断点，也可以看到对应的对象都是代理过的对象。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211208154917.png)\n### 静态代理\n由于需要对原生JDBC对象进行增强，所以HikariCP采用了代理技术，但是考虑性能问题，其没有使用JDK的动态代理，而是使用了字节码增强的伪动态代理，因为其字节码增强是在编译的时候增强的，使用了javassist来做字节码增强。\n涉及到的类有，ProxyFactory，JavassistProxyFactory以及抽象类：ProxyCallableStatement，ProxyConnection，ProxyDatabaseMetaData，ProxyPreparedStatement，ProxyResultSet，ProxyStatement。\n在JavassistProxyFactory里使用javassist字节码增强实现了HikariProxyConnection，HikariProxyPreparedStatement等具体类，其继承自上述抽象类，对于没有实现的方法，采用了代理调用方式自动生成方法实现。\n既然ProxyConnection等抽象类都已经有具体代理实现方法了，为什么还要字节码增强来生成非抽象子类呢？何况你还是静态生成？\n原因是因为，ProxyConnection等抽象类之所以设计成抽象类，就是因为不想实现自己不关心的接口，举个栗子，光Connection接口就几十个方法，需要代理的也就十几个方法，如果不以抽象类的方式，则需要全部实现这几十个方法，并且自己不关心的实现都只是简单调用驱动实现类的方法，可读性和维护性不高。如果是动态运行时字节码增强，无可厚非，但是编译期增强的话，根本原因，其实还是作者懒，宁愿字节码自动生成也不愿意代码实现，不过javassist本身也不支持动态运行时字节码替换。javassist类库本身很简单，封装了字节码的操作，很容易就上手，感兴趣的可以自己试试写个例子就会用了。\n### 动态代理\n我们来写个动态代理的例子，实现对sql的日志打印，实现动态代理的方法很多，我们今天使用bytekit来实现。bytekit是arthas的底层字节码增强类库，通过注解的方式，很方便进行字节码增强，不止用来实现代理，还可以用于APM，功能很强大。\n我们对Hikari的ProxyStatement的executeQuery方法进行字节码增强，来实现控制台打印其参数SQL的功能。\nProxyStatement的executeQuery实现如下：\n\n``` java\n@Override\npublic ResultSet executeQuery(String sql) throws SQLException\n{\n  connection.markCommitStateDirty();\n  ResultSet resultSet = delegate.executeQuery(sql);\n  return ProxyFactory.getProxyResultSet(connection, this, resultSet);\n}\n```\n我们首先引入bytekit的pom依赖\n\n``` xml\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>bytekit-core</artifactId>\n\t<version>0.0.7</version>\n</dependency>\n<dependency>\n\t<groupId>net.bytebuddy</groupId>\n\t<artifactId>byte-buddy-agent</artifactId>\n\t<version>1.12.3</version>\n</dependency>\n<dependency>\n\t<groupId>org.benf</groupId>\n\t<artifactId>cfr</artifactId>\n\t<version>0.151</version>\n</dependency>\n```\n写一个辅助类\n\n``` kotlin\nclass ProxyUtil {\n    companion object {\n\n        public fun enhanceClass(\n            targetClass: KClass<ProxyStatement>,\n            targetMethodName: String,\n            proxyClass: KClass<SqlLogInterceptor>\n        ) {\n            AgentUtils.install()\n            val interceptorClassParser = DefaultInterceptorClassParser()\n            val parseList = interceptorClassParser.parse(proxyClass.java)\n            val loadClass = AsmUtils.loadClass(targetClass.java)\n            loadClass.methods.filter {\n                return@filter it.name.equals(targetMethodName)\n            }.onEach { methodNode ->\n                val methodProcessor = MethodProcessor(loadClass, methodNode)\n                parseList.onEach { parse ->\n                    parse.process(methodProcessor)\n                }\n            }\n            val bytes = AsmUtils.toBytes(loadClass)\n            println(\"decompile:${Decompiler.decompile(bytes)}\")\n            AgentUtils.reTransform(targetClass.java, bytes)\n        }\n    }\n}\n```\n编写实际增强代码\n\n``` java\npublic class SqlLogInterceptor {\n    @AtEnter(inline = true)\n    public static void atEnter(@Binding.Args Object[] args, @Binding.Field(name = \"isClosed\") boolean isClosed) {\n        System.out.println(\"isClosed = \" + isClosed);\n        System.out.println(\"sql = \" + args[0]);\n    }\n}\n```\nProxyStatement有一个私有属性isClosed，我们都可以拿到并使用。inline代表混入到源字节码里。我们看看反编译后的样子。\n\n``` java\n@Override\npublic ResultSet executeQuery(String string) throws SQLException {\n    void sql;\n    boolean bl = this.isClosed;\n    Object[] objectArray = new Object[]{string};\n    System.out.println(\"isClosed = \" + bl);\n    System.out.println(\"sql = \" + objectArray[0]);\n    this.connection.markCommitStateDirty();\n    ResultSet resultSet = this.delegate.executeQuery((String)sql);\n    return ProxyFactory.getProxyResultSet(this.connection, this, resultSet);\n}\n```\n反编译后虽然不太正常，但是真实增强代码确实已经添加进去了，我们执行一下看看。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091150526.png)\n确实打印了出来。\n### Hikari为什么这么快\n因为Hikari代码比较精简，并且在细节上下了很大功夫，除了使用静态字节码增强来优化性能之前，其在并发性能上也下了功夫，具体就是对并发数据结构的创建和使用。\n#### ConnectionBag\nConnectionBag可以说是hikari的核心，所有连接的创建，获取，归还，释放等等都和其息息相关，先来看下类结构。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091846818.png)\n最核心的几个方法是add,borrow,requite,remove。ConnectionBag内部使用了ThreadLocal和SynchronousQueue，CopyOnWriteArrayList以及waiters:AtomicInteger来保证并发安全以及快速获取连接。\n#### borrow\n\n``` java\npublic T borrow(long timeout, final TimeUnit timeUnit) throws InterruptedException\n{\n   // Try the thread-local list first\n   final List<Object> list = threadList.get();\n   for (int i = list.size() - 1; i >= 0; i--) {\n      final Object entry = list.remove(i);\n      @SuppressWarnings(\"unchecked\")\n      final T bagEntry = weakThreadLocals ? ((WeakReference<T>) entry).get() : (T) entry;\n      if (bagEntry != null && bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n         return bagEntry;\n      }\n   }\n\n   // Otherwise, scan the shared list ... then poll the handoff queue\n   final int waiting = waiters.incrementAndGet();\n   try {\n      for (T bagEntry : sharedList) {\n         if (bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n            // If we may have stolen another waiter's connection, request another bag add.\n            if (waiting > 1) {\n               listener.addBagItem(waiting - 1);\n            }\n            return bagEntry;\n         }\n      }\n\n      listener.addBagItem(waiting);\n\n      timeout = timeUnit.toNanos(timeout);\n      do {\n         final long start = currentTime();\n         final T bagEntry = handoffQueue.poll(timeout, NANOSECONDS);\n         if (bagEntry == null || bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n            return bagEntry;\n         }\n\n         timeout -= elapsedNanos(start);\n      } while (timeout > 10_000);\n\n      return null;\n   }\n   finally {\n      waiters.decrementAndGet();\n   }\n}\n```\n先看下borrow方法，首先在ThreadLocal里获取可用连接，如果没有，则在sharedList里获取，sharedList是CopyOnWriteArrayList并发集合类，如果还没有，就触发添加连接的请求，然后阻塞到handoffQueue: SynchronousQueue上，直到超时。\nThreadLocal默认是一个简化过的List，FastList，其实现去掉了越界检查，只实现了自己用到的方法，并且remove(Object object)方法是倒序查找。\n#### requite\n\n``` java\npublic void requite(final T bagEntry)\n{\n  bagEntry.setState(STATE_NOT_IN_USE);\n\n  for (int i = 0; waiters.get() > 0; i++) {\n     if (bagEntry.getState() != STATE_NOT_IN_USE || handoffQueue.offer(bagEntry)) {\n        return;\n     }\n     else if ((i & 0xff) == 0xff) {\n        parkNanos(MICROSECONDS.toNanos(10));\n     }\n     else {\n        Thread.yield();\n     }\n  }\n\n  final List<Object> threadLocalList = threadList.get();\n  if (threadLocalList.size() < 50) {\n     threadLocalList.add(weakThreadLocals ? new WeakReference<>(bagEntry) : bagEntry);\n  }\n}\n```\n归还方法比较简单，如果有线程等待，则直接归还到handoffQueue上，快速转让，并寄存到threadLocal里，方便下次获取。\n#### add\n\n``` java\npublic void add(final T bagEntry)\n{\n  if (closed) {\n     LOGGER.info(\"ConcurrentBag has been closed, ignoring add()\");\n     throw new IllegalStateException(\"ConcurrentBag has been closed, ignoring add()\");\n  }\n\n  sharedList.add(bagEntry);\n\n  // spin until a thread takes it or none are waiting\n  while (waiters.get() > 0 && bagEntry.getState() == STATE_NOT_IN_USE && !handoffQueue.offer(bagEntry)) {\n     Thread.yield();\n  }\n}\n```\nadd方法不对外暴露，在checkFailFast和fillPool被调用。\n#### remove\n\n``` java\npublic boolean remove(final T bagEntry)\n{\n  if (!bagEntry.compareAndSet(STATE_IN_USE, STATE_REMOVED) && !bagEntry.compareAndSet(STATE_RESERVED, STATE_REMOVED) && !closed) {\n     LOGGER.warn(\"Attempt to remove an object from the bag that was not borrowed or reserved: {}\", bagEntry);\n     return false;\n  }\n\n  final boolean removed = sharedList.remove(bagEntry);\n  if (!removed && !closed) {\n     LOGGER.warn(\"Attempt to remove an object from the bag that does not exist: {}\", bagEntry);\n  }\n\n  threadList.get().remove(bagEntry);\n\n  return removed;\n}\n```\n另外一个比较重要的类就是PoolEntry，封装了Connection以及Connection对应的Statement和对应的使用状态等，这里存储Statement也是使用的FastList。ConcurrentBag里存储的就是PoolEntry对象。\n### 监控\n说实话，hikari的监控做的不是很好，比如说对数据库查询异常日志的记录，对慢查询SQL的记录等等都没有，这也恰恰是其之所以比较快的原因，做好数据库连接池的功能，不把乱七八糟的东西引进来，但是并不是其一点监控数据都没有，可以借助spring的actuator功能，监控一些连接池自身的数据。\n只需要在pom里添加对应的依赖\n\n``` xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n <dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-registry-prometheus</artifactId>\n    <version>1.8.1</version>\n</dependency>\n```\n启动项目，通过http://localhost:8080/actuator/ 访问\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918834.png)\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918768.png)\n通过集成Prometheus以及Grafana则可以收集并图形化展示监控数据，这里就不做过多介绍了。\n### 总结\nhikari虽然代码比较少，但是麻雀虽小五脏俱全，涉及到很多知识点\n1. 单例模式\n2. JMX\n3. 字节码增强，代理模式\n4. 并发数据结构\n5. 监控集成\n\n希望大家能从本文能收获一些东西，再见。\n\n","source":"_posts/深入浅出HikariCP数据库连接池.md","raw":"---\ntitle: 深入浅出HikariCP数据库连接池\nauthor: 王登武\ndate: 2021-12-01 15:16:08\ncategories: Java\ntags: \n - HikariCP\n - 数据库连接池\n---\n\n\n### HikariCP简介\nHikariCP数据库连接池是spring boot的默认数据库连接池，看名字我以为是日本人写的，后来才知道是一个常年居住在东京的美国人写的，spring默认把hikari作为数据库连接池的原因也很简单，因为它足够快，代码量少，稳定，虽然功能不及Druid，但是对于监控也有一定的扩展性，简单，快速，稳定是其胜出的原因。目前支持JDK8的最新版本是4.0.3，在GitHub开源，[项目地址](https://github.com/brettwooldridge/HikariCP)\n\n### 不使用数据库连接池\n现在由于spring的普及，以及spring boot的集成便利性，无论是使用JPA还是MyBatis，底层ORM已经非常成熟，即便是基于学习也很少有人手动建立数据库连接，并执行SQL了，如果不使用数据库连接池，完全手动连接数据库，并执行SQL应该怎么做呢，让我们回到刀耕火种的时代，再怀旧一下。\n\n``` kotlin\nspring.datasource.driverClassName=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/mysql\nspring.datasource.username=root\nspring.datasource.password=123456\n\ninterface HikariDao {\n    fun useHikari(): String\n    fun useJdbc(): String\n}\npackage data.source.hikari.demo.dao\n\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.jdbc.core.JdbcTemplate\nimport org.springframework.jdbc.core.ResultSetExtractor\nimport org.springframework.stereotype.Service\nimport java.sql.DriverManager\n\n@Service\nclass HikariDaoImpl(\n    @Autowired private val jdbcTemplate: JdbcTemplate,\n    @Value(\"\\${spring.datasource.url}\") private val jdbcUrl: String,\n    @Value(\"\\${spring.datasource.username}\") private val userName: String,\n    @Value(\"\\${spring.datasource.password}\") private val password: String,\n) : HikariDao {\n\n    companion object {\n        private const val ALIAS = \"time\"\n        private const val SQL = \"select now() as $ALIAS\"\n    }\n\n    override fun useHikari(): String {\n        return jdbcTemplate.query(SQL, ResultSetExtractor {\n            it.next();\n            return@ResultSetExtractor it.getString(ALIAS)\n        })!!\n    }\n\n    override fun useJdbc(): String {\n        val connection = DriverManager.getConnection(jdbcUrl, userName, password)\n        connection.use {\n            val statement = connection.createStatement()\n            statement.use {\n                val result = statement.executeQuery(SQL)\n                result.use {\n                    it.next()\n                    return result.getString(ALIAS)\n                }\n            }\n        }\n    }\n}\n```\n直接操作jdbc，需要通过DriverManager获取数据库连接，然后通过Statement执行SQL，拿到ResultSet，手动getXXX获取数据并组装成对象，这里使用了kotlin的use来自动close，通过示例可以看到如果手动操作，非常繁琐，需要关心很多和业务无关的操作，而spring jdbc以及ORM框架则把这些繁琐的操作都封装了起来，使我们只需要关注具体的SQL和对象。\n这里还有一个小知识点，就是SPI，在JDBC4.0之前，需要使用`Class.forName(driverClassName)`来加载驱动，而JDBC4.0之后只需要厂商在驱动包里配置一下即可\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211201182322.png)\n原理是通过`val loader = ServiceLoader.load(Driver::class.java)`即可加载到实现。\n\n### 为什么需要数据库连接池\n数据库连接是TCP连接，需要经过TCP的三次握手，如果每次访问数据库都需要建立连接，则会导致每次获取数据都需要等待连接，将会大大降低数据获取的响应时间，而数据库连接池则是将数据库连接缓存起来，保持TCP连接不断，在需要的时候，直接从连接池里获取，不需要等待即可执行SQL获取到数据\n除了降低响应时间之外，数据库连接池还可以设定数据库连接数量，因为数据库连接是宝贵资源，当某一个服务并发比较高，并且SQL执行比较慢的时候，会导致建立大量的数据库连接，这往往会对数据库造成致命的影响，导致数据库连接占满而不可用，其它正常的服务也将不可用。\n另外TCP连接频繁建立断开，由于TCP断开的4次握手，会导致大量的TIME_WAIT状态问题，这也将会影响数据库的性能。\n### 数据库连接池原理\n在系统初始化的时候，在内存中开辟一片空间，将一定数量的数据库连接作为对象存储在对象池里，并对外提供数据库连接的获取和归还方法。用户访问数据库时，并不是建立一个新的连接，而是从数据库连接池中取出一个已有的空闲连接对象；使用完毕归还后的连接也不会马上被关闭，而是由数据库连接池统一管理回收，为下一次借用做好准备。如果由于高并发请求导致数据库连接池中的连接被借用完毕，其他线程就会等待，直到有连接被归还。整个过程中，连接并不会被关闭，而是源源不断地循环使用，有借有还。数据库连接池还可以通过设置其参数来控制连接池中的初始连接数、连接的上下限数，以及每个连接的最大使用次数、最大空闲时间等，也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。\n### 数据库连接池组成\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/数据库连接池.jpg)\n### 配置项\n由于spring boot 2.x开始数据库连接池已经默认是HikariCP了，所以我们只需要进行配置即可，那都有哪些配置项需要配置呢，又有哪些需要注意的地方呢？\n#### 默认是怎么生效的\n我们先来看下，spring boot 2.6.1是怎么默认使用HikariCP为数据库连接池的。\n\n``` xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n```\n只要在pom.xml引入starter-jdbc，则默认就引入了HikariCP数据库连接池，我们看下spring-boot-starter-jdbc的pom.xml\n\n``` xml\n<dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n      <version>2.6.1</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.zaxxer</groupId>\n      <artifactId>HikariCP</artifactId>\n      <version>4.0.3</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>5.3.13</version>\n      <scope>compile</scope>\n    </dependency>\n</dependencies>\n```\t\n可以看到jdbc依赖了HikariCP，并且版本是4.0.3最新版本。了解spring boot starter机制的应该知道，除了pom依赖，还需要有autoconfig\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211202154126.png)\n\n``` java\n@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnMissingBean(DataSource.class)\n\t@ConditionalOnProperty(name = \"spring.datasource.type\", havingValue = \"com.zaxxer.hikari.HikariDataSource\",\n\t\t\tmatchIfMissing = true)\n\tstatic class Hikari {\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = \"spring.datasource.hikari\")\n\t\tHikariDataSource dataSource(DataSourceProperties properties) {\n\t\t\tHikariDataSource dataSource = createDataSource(properties, HikariDataSource.class);\n\t\t\tif (StringUtils.hasText(properties.getName())) {\n\t\t\t\tdataSource.setPoolName(properties.getName());\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n}\n```\n这样就默认初始化了HikariDataSource。\n让我们再接着看下配置项。除了配置数据库必填的4个之外，常用配置还有另外几个。\n\n```\nspring.datasource.driverClassName=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/mysql\nspring.datasource.username=root\nspring.datasource.password=123456\n#默认true\nspring.datasource.hikari.autoCommit=true\n#等待超时时间，默认30秒\nspring.datasource.hikari.connectionTimeOut=30000\n#最长多久空闲即释放，默认10分钟\nspring.datasource.hikari.idleTimeout=600000\n#连接最长存活时间毫秒，默认30分钟\nspring.datasource.hikari.maxLifetime=1800000\n#最大连接池数量，默认10\nspring.datasource.hikari.maximumPoolSize=10\n#默认和max相同\nspring.datasource.hikari.minimumIdle=10\n#连接池名称，如果多个微服务，建议配置不同名字\nspring.datasource.hikari.poolName=hikari\n#开启JMX\nspring.datasource.hikari.registerMbeans=true\n\n#监控相关\n#spring.datasource.hikari.metricRegistry=\n#健康信息\n#spring.datasource.hikari.healthCheckRegistry=\n```\n#### 配置项注意点\n大部分应用使用默认值即可很好的工作，需要注意的是连接池数量不是越多越好，而是如何尽量少越好。\n我们先验证一下超时时间是否生效，为了方便测试，我们打开JMX以及将minimumIdle和maximumPoolSize改为1，然后执行慢查询，占用唯一的链接，再执行正常查询，等待，看看是否30秒会超时。\n\n``` kotlin\n@RestController\nclass HikariController(@Autowired private val hikariDao: HikariDao) {\n\n    @GetMapping(\"/hikari\")\n    public fun hikari(): String {\n        return hikariDao.useHikari()\n    }\n\n    @GetMapping(\"/slow\")\n    public fun slow(): Int {\n        return hikariDao.slowSql()\n    }\n}\n\ninterface HikariDao {\n    fun useHikari(): String\n    fun useJdbc(): String\n    fun slowSql(): Int\n}\n\n@Service\nclass HikariDaoImpl(\n    @Autowired private val jdbcTemplate: JdbcTemplate,\n    @Value(\"\\${spring.datasource.url}\") private val jdbcUrl: String,\n    @Value(\"\\${spring.datasource.username}\") private val userName: String,\n    @Value(\"\\${spring.datasource.password}\") private val password: String,\n) : HikariDao {\n\n    companion object {\n        private const val TIME = \"time\"\n        private const val COUNT = \"personCount\"\n        private const val SQL = \"select now() as $TIME\"\n        private const val SLOW_SQL = \"select count(id) as $COUNT from hikari_person\"\n    }\n\n    override fun useHikari(): String {\n        return jdbcTemplate.query(SQL, ResultSetExtractor {\n            it.next();\n            return@ResultSetExtractor it.getString(TIME)\n        })!!\n    }\n\n    override fun useJdbc(): String {\n        val connection = DriverManager.getConnection(jdbcUrl, userName, password)\n        connection.use {\n            val statement = connection.createStatement()\n            statement.use {\n                val result = statement.executeQuery(SQL)\n                result.use {\n                    it.next()\n                    return result.getString(TIME)\n                }\n            }\n        }\n    }\n\n    override fun slowSql(): Int {\n        return jdbcTemplate.query(SLOW_SQL, ResultSetExtractor {\n            it.next();\n            return@ResultSetExtractor it.getInt(COUNT)\n        })!!\n    }\n}\n```\n因为连接池是懒加载的，我们先访问一下/slow,验证一下不加表锁的情况下可以正常执行并初始化连接池。\n再通过jconsole看下连接池的情况。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206151609.png)\n可以看到空闲连接1个，现在，我们把hikari_person表加上写锁，来模拟慢查询。\n`LOCK TABLES hikari_person WRITE;`  再访问/slow,直接卡住没有返回。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152032.png)\n可以看到活跃连接1个，已经没有空闲的了，这个时候我们访问/hikari\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152151.png)\n变成了1个活跃，1个等待，并且30秒报了超时异常。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152344.png)\n可以看到，确实配置可以生效，当连接池已满，再有请求就会被阻塞等待，然后超时。\n记得执行`UNLOCK TABLES;`释放表锁。释放完后，原来等待返回的/slow直接返回了结果0。\n### 数据源的初始化\n之前已经看到spring boot启动的时候，会初始化HikariDataSource，关键代码\n\n``` java\n@Bean\n@ConfigurationProperties(prefix = \"spring.datasource.hikari\")\nHikariDataSource dataSource(DataSourceProperties properties) {\n\tHikariDataSource dataSource = createDataSource(properties, HikariDataSource.class);\n\tif (StringUtils.hasText(properties.getName())) {\n\t\tdataSource.setPoolName(properties.getName());\n\t}\n\treturn dataSource;\n}\n```\n再看一下HikariDataSource的类图\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206165729.png)\n\n由于HikariDataSource继承自HikariConfig，并且`@ConfigurationProperties(prefix = \"spring.datasource.hikari\")`所以我们在application.properties里配置的属性，就初始化到了DataSource里。\n### HikariDataSource的获取连接\n``` java\n@Override\npublic Connection getConnection() throws SQLException\n{\n  if (isClosed()) {\n     throw new SQLException(\"HikariDataSource \" + this + \" has been closed.\");\n  }\n\n  if (fastPathPool != null) {\n     return fastPathPool.getConnection();\n  }\n\n  // See http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java\n  HikariPool result = pool;\n  if (result == null) {\n     synchronized (this) {\n        result = pool;\n        if (result == null) {\n           validate();\n           LOGGER.info(\"{} - Starting...\", getPoolName());\n           try {\n              pool = result = new HikariPool(this);\n              this.seal();\n           }\n           catch (PoolInitializationException pie) {\n              if (pie.getCause() instanceof SQLException) {\n                 throw (SQLException) pie.getCause();\n              }\n              else {\n                 throw pie;\n              }\n           }\n           LOGGER.info(\"{} - Start completed.\", getPoolName());\n        }\n     }\n  }\n  return result.getConnection();\n}\n```\nHikariDataSource的getConnection方法，有个额外知识点，就是单例模式，HikariPool是单例的，使用了双重检测锁来完成单例操作。\n获取连接之前，需要先进行连接池的初始化new HikariPool(this)。\n### 连接池的初始化\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/初始化连接池.jpg)\n\nconnectionBag是连接池的并发数据结构，做了并发优化，后面再详细说明。\nhouseKeeper是保持连接池数量的线程池，核心数量为1，使用了ScheduledThreadPoolExecutor，默认30秒运行一次。\n监控后面再单独介绍。\n启用JMX之后，HikariConfigMXBean和HikariPoolMXBean将会展示到Mbean。\n创建物理Connection使用了addConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大线程都为1，使用了抛弃旧线程的策略。\n关闭物理Connection使用了closeConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大也为1，使用了直接在主线程运行的策略。\nleakTaskFactory用于检测是否有连接泄漏，getConnection之后要及时close掉，如果没有及时close则会有泄漏。通过getConnection时延迟执行ProxyLeakTask，延迟最小值2秒，低于此值则默认不进行连接泄漏检测，如果在该时间内没有及时close，则该延迟任务将会执行，而在close方法里，对该任务进行了cancel，及时close就不会触发ProxyLeakTask。默认是0不执行连接泄漏检测，可以通过spring.datasource.hikari.leakDetectionThreshold=3000设置来启用。\n到此连接池就初始化完了。\n### 获取连接\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/获取连接.jpg)\n核心代码\n\n``` java\npublic Connection getConnection(final long hardTimeout) throws SQLException\n   {\n      suspendResumeLock.acquire();\n      final long startTime = currentTime();\n\n      try {\n         long timeout = hardTimeout;\n         do {\n            PoolEntry poolEntry = connectionBag.borrow(timeout, MILLISECONDS);\n            if (poolEntry == null) {\n               break; // We timed out... break and throw exception\n            }\n\n            final long now = currentTime();\n            if (poolEntry.isMarkedEvicted() || (elapsedMillis(poolEntry.lastAccessed, now) > aliveBypassWindowMs && !isConnectionAlive(poolEntry.connection))) {\n               closeConnection(poolEntry, poolEntry.isMarkedEvicted() ? EVICTED_CONNECTION_MESSAGE : DEAD_CONNECTION_MESSAGE);\n               timeout = hardTimeout - elapsedMillis(startTime);\n            }\n            else {\n               metricsTracker.recordBorrowStats(poolEntry, startTime);\n               return poolEntry.createProxyConnection(leakTaskFactory.schedule(poolEntry), now);\n            }\n         } while (timeout > 0L);\n\n         metricsTracker.recordBorrowTimeoutStats(startTime);\n         throw createTimeoutException(startTime);\n      }\n      catch (InterruptedException e) {\n         Thread.currentThread().interrupt();\n         throw new SQLException(poolName + \" - Interrupted during connection acquisition\", e);\n      }\n      finally {\n         suspendResumeLock.release();\n      }\n}\n```\n外部spring等访问的getConnection最终是访问了HikariPool的getConnection。\n代码核心就是使用了并发数据结构ConnectionBag,ConnectionBag作用就是类似对象池，存储了数据库连接。\n使用borrow方法，如果有可用的链接，即可获取到包装对象PoolEntry。\n这里还有一个逻辑就是如果获取到的链接已经标记为关闭，或者存活时间超时，或者已经不可用，则\n\n``` java\nvoid closeConnection(final PoolEntry poolEntry, final String closureReason)\n   {\n      if (connectionBag.remove(poolEntry)) {\n         final Connection connection = poolEntry.close();\n         closeConnectionExecutor.execute(() -> {\n            quietlyCloseConnection(connection, closureReason);\n            if (poolState == POOL_NORMAL) {\n               fillPool();\n            }\n         });\n     }\n}\n```\n从ConnectionBag移除，使用closeConnectionExecutor关闭链接，并补充数量。\n所以getConnection里使用了do while来borrow获取一个链接。\n`return poolEntry.createProxyConnection(leakTaskFactory.schedule(poolEntry), now);`\n这块代码就是创建leakTask检测链接泄漏的同时，创建ProxyConnection返回。\n### 归还连接\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112081615450.jpg)\n由于之前获取的连接并不是真正JDBC的Connect驱动实现，而是代理实现，所以调用对应的close方法只是归还连接，而不是真正关闭物理连接，这样就实现了借用连接池的链接，在close的时候归还连接，以便后续使用。\n我们通过打断点，也可以看到对应的对象都是代理过的对象。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211208154917.png)\n### 静态代理\n由于需要对原生JDBC对象进行增强，所以HikariCP采用了代理技术，但是考虑性能问题，其没有使用JDK的动态代理，而是使用了字节码增强的伪动态代理，因为其字节码增强是在编译的时候增强的，使用了javassist来做字节码增强。\n涉及到的类有，ProxyFactory，JavassistProxyFactory以及抽象类：ProxyCallableStatement，ProxyConnection，ProxyDatabaseMetaData，ProxyPreparedStatement，ProxyResultSet，ProxyStatement。\n在JavassistProxyFactory里使用javassist字节码增强实现了HikariProxyConnection，HikariProxyPreparedStatement等具体类，其继承自上述抽象类，对于没有实现的方法，采用了代理调用方式自动生成方法实现。\n既然ProxyConnection等抽象类都已经有具体代理实现方法了，为什么还要字节码增强来生成非抽象子类呢？何况你还是静态生成？\n原因是因为，ProxyConnection等抽象类之所以设计成抽象类，就是因为不想实现自己不关心的接口，举个栗子，光Connection接口就几十个方法，需要代理的也就十几个方法，如果不以抽象类的方式，则需要全部实现这几十个方法，并且自己不关心的实现都只是简单调用驱动实现类的方法，可读性和维护性不高。如果是动态运行时字节码增强，无可厚非，但是编译期增强的话，根本原因，其实还是作者懒，宁愿字节码自动生成也不愿意代码实现，不过javassist本身也不支持动态运行时字节码替换。javassist类库本身很简单，封装了字节码的操作，很容易就上手，感兴趣的可以自己试试写个例子就会用了。\n### 动态代理\n我们来写个动态代理的例子，实现对sql的日志打印，实现动态代理的方法很多，我们今天使用bytekit来实现。bytekit是arthas的底层字节码增强类库，通过注解的方式，很方便进行字节码增强，不止用来实现代理，还可以用于APM，功能很强大。\n我们对Hikari的ProxyStatement的executeQuery方法进行字节码增强，来实现控制台打印其参数SQL的功能。\nProxyStatement的executeQuery实现如下：\n\n``` java\n@Override\npublic ResultSet executeQuery(String sql) throws SQLException\n{\n  connection.markCommitStateDirty();\n  ResultSet resultSet = delegate.executeQuery(sql);\n  return ProxyFactory.getProxyResultSet(connection, this, resultSet);\n}\n```\n我们首先引入bytekit的pom依赖\n\n``` xml\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>bytekit-core</artifactId>\n\t<version>0.0.7</version>\n</dependency>\n<dependency>\n\t<groupId>net.bytebuddy</groupId>\n\t<artifactId>byte-buddy-agent</artifactId>\n\t<version>1.12.3</version>\n</dependency>\n<dependency>\n\t<groupId>org.benf</groupId>\n\t<artifactId>cfr</artifactId>\n\t<version>0.151</version>\n</dependency>\n```\n写一个辅助类\n\n``` kotlin\nclass ProxyUtil {\n    companion object {\n\n        public fun enhanceClass(\n            targetClass: KClass<ProxyStatement>,\n            targetMethodName: String,\n            proxyClass: KClass<SqlLogInterceptor>\n        ) {\n            AgentUtils.install()\n            val interceptorClassParser = DefaultInterceptorClassParser()\n            val parseList = interceptorClassParser.parse(proxyClass.java)\n            val loadClass = AsmUtils.loadClass(targetClass.java)\n            loadClass.methods.filter {\n                return@filter it.name.equals(targetMethodName)\n            }.onEach { methodNode ->\n                val methodProcessor = MethodProcessor(loadClass, methodNode)\n                parseList.onEach { parse ->\n                    parse.process(methodProcessor)\n                }\n            }\n            val bytes = AsmUtils.toBytes(loadClass)\n            println(\"decompile:${Decompiler.decompile(bytes)}\")\n            AgentUtils.reTransform(targetClass.java, bytes)\n        }\n    }\n}\n```\n编写实际增强代码\n\n``` java\npublic class SqlLogInterceptor {\n    @AtEnter(inline = true)\n    public static void atEnter(@Binding.Args Object[] args, @Binding.Field(name = \"isClosed\") boolean isClosed) {\n        System.out.println(\"isClosed = \" + isClosed);\n        System.out.println(\"sql = \" + args[0]);\n    }\n}\n```\nProxyStatement有一个私有属性isClosed，我们都可以拿到并使用。inline代表混入到源字节码里。我们看看反编译后的样子。\n\n``` java\n@Override\npublic ResultSet executeQuery(String string) throws SQLException {\n    void sql;\n    boolean bl = this.isClosed;\n    Object[] objectArray = new Object[]{string};\n    System.out.println(\"isClosed = \" + bl);\n    System.out.println(\"sql = \" + objectArray[0]);\n    this.connection.markCommitStateDirty();\n    ResultSet resultSet = this.delegate.executeQuery((String)sql);\n    return ProxyFactory.getProxyResultSet(this.connection, this, resultSet);\n}\n```\n反编译后虽然不太正常，但是真实增强代码确实已经添加进去了，我们执行一下看看。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091150526.png)\n确实打印了出来。\n### Hikari为什么这么快\n因为Hikari代码比较精简，并且在细节上下了很大功夫，除了使用静态字节码增强来优化性能之前，其在并发性能上也下了功夫，具体就是对并发数据结构的创建和使用。\n#### ConnectionBag\nConnectionBag可以说是hikari的核心，所有连接的创建，获取，归还，释放等等都和其息息相关，先来看下类结构。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091846818.png)\n最核心的几个方法是add,borrow,requite,remove。ConnectionBag内部使用了ThreadLocal和SynchronousQueue，CopyOnWriteArrayList以及waiters:AtomicInteger来保证并发安全以及快速获取连接。\n#### borrow\n\n``` java\npublic T borrow(long timeout, final TimeUnit timeUnit) throws InterruptedException\n{\n   // Try the thread-local list first\n   final List<Object> list = threadList.get();\n   for (int i = list.size() - 1; i >= 0; i--) {\n      final Object entry = list.remove(i);\n      @SuppressWarnings(\"unchecked\")\n      final T bagEntry = weakThreadLocals ? ((WeakReference<T>) entry).get() : (T) entry;\n      if (bagEntry != null && bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n         return bagEntry;\n      }\n   }\n\n   // Otherwise, scan the shared list ... then poll the handoff queue\n   final int waiting = waiters.incrementAndGet();\n   try {\n      for (T bagEntry : sharedList) {\n         if (bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n            // If we may have stolen another waiter's connection, request another bag add.\n            if (waiting > 1) {\n               listener.addBagItem(waiting - 1);\n            }\n            return bagEntry;\n         }\n      }\n\n      listener.addBagItem(waiting);\n\n      timeout = timeUnit.toNanos(timeout);\n      do {\n         final long start = currentTime();\n         final T bagEntry = handoffQueue.poll(timeout, NANOSECONDS);\n         if (bagEntry == null || bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n            return bagEntry;\n         }\n\n         timeout -= elapsedNanos(start);\n      } while (timeout > 10_000);\n\n      return null;\n   }\n   finally {\n      waiters.decrementAndGet();\n   }\n}\n```\n先看下borrow方法，首先在ThreadLocal里获取可用连接，如果没有，则在sharedList里获取，sharedList是CopyOnWriteArrayList并发集合类，如果还没有，就触发添加连接的请求，然后阻塞到handoffQueue: SynchronousQueue上，直到超时。\nThreadLocal默认是一个简化过的List，FastList，其实现去掉了越界检查，只实现了自己用到的方法，并且remove(Object object)方法是倒序查找。\n#### requite\n\n``` java\npublic void requite(final T bagEntry)\n{\n  bagEntry.setState(STATE_NOT_IN_USE);\n\n  for (int i = 0; waiters.get() > 0; i++) {\n     if (bagEntry.getState() != STATE_NOT_IN_USE || handoffQueue.offer(bagEntry)) {\n        return;\n     }\n     else if ((i & 0xff) == 0xff) {\n        parkNanos(MICROSECONDS.toNanos(10));\n     }\n     else {\n        Thread.yield();\n     }\n  }\n\n  final List<Object> threadLocalList = threadList.get();\n  if (threadLocalList.size() < 50) {\n     threadLocalList.add(weakThreadLocals ? new WeakReference<>(bagEntry) : bagEntry);\n  }\n}\n```\n归还方法比较简单，如果有线程等待，则直接归还到handoffQueue上，快速转让，并寄存到threadLocal里，方便下次获取。\n#### add\n\n``` java\npublic void add(final T bagEntry)\n{\n  if (closed) {\n     LOGGER.info(\"ConcurrentBag has been closed, ignoring add()\");\n     throw new IllegalStateException(\"ConcurrentBag has been closed, ignoring add()\");\n  }\n\n  sharedList.add(bagEntry);\n\n  // spin until a thread takes it or none are waiting\n  while (waiters.get() > 0 && bagEntry.getState() == STATE_NOT_IN_USE && !handoffQueue.offer(bagEntry)) {\n     Thread.yield();\n  }\n}\n```\nadd方法不对外暴露，在checkFailFast和fillPool被调用。\n#### remove\n\n``` java\npublic boolean remove(final T bagEntry)\n{\n  if (!bagEntry.compareAndSet(STATE_IN_USE, STATE_REMOVED) && !bagEntry.compareAndSet(STATE_RESERVED, STATE_REMOVED) && !closed) {\n     LOGGER.warn(\"Attempt to remove an object from the bag that was not borrowed or reserved: {}\", bagEntry);\n     return false;\n  }\n\n  final boolean removed = sharedList.remove(bagEntry);\n  if (!removed && !closed) {\n     LOGGER.warn(\"Attempt to remove an object from the bag that does not exist: {}\", bagEntry);\n  }\n\n  threadList.get().remove(bagEntry);\n\n  return removed;\n}\n```\n另外一个比较重要的类就是PoolEntry，封装了Connection以及Connection对应的Statement和对应的使用状态等，这里存储Statement也是使用的FastList。ConcurrentBag里存储的就是PoolEntry对象。\n### 监控\n说实话，hikari的监控做的不是很好，比如说对数据库查询异常日志的记录，对慢查询SQL的记录等等都没有，这也恰恰是其之所以比较快的原因，做好数据库连接池的功能，不把乱七八糟的东西引进来，但是并不是其一点监控数据都没有，可以借助spring的actuator功能，监控一些连接池自身的数据。\n只需要在pom里添加对应的依赖\n\n``` xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n <dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-registry-prometheus</artifactId>\n    <version>1.8.1</version>\n</dependency>\n```\n启动项目，通过http://localhost:8080/actuator/ 访问\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918834.png)\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918768.png)\n通过集成Prometheus以及Grafana则可以收集并图形化展示监控数据，这里就不做过多介绍了。\n### 总结\nhikari虽然代码比较少，但是麻雀虽小五脏俱全，涉及到很多知识点\n1. 单例模式\n2. JMX\n3. 字节码增强，代理模式\n4. 并发数据结构\n5. 监控集成\n\n希望大家能从本文能收获一些东西，再见。\n\n","slug":"深入浅出HikariCP数据库连接池","published":1,"updated":"2021-12-09T11:25:07.573Z","_id":"ckwn76gjh0000qb9gb39hdnpi","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"HikariCP简介\"><a href=\"#HikariCP简介\" class=\"headerlink\" title=\"HikariCP简介\"></a>HikariCP简介</h3><p>HikariCP数据库连接池是spring boot的默认数据库连接池，看名字我以为是日本人写的，后来才知道是一个常年居住在东京的美国人写的，spring默认把hikari作为数据库连接池的原因也很简单，因为它足够快，代码量少，稳定，虽然功能不及Druid，但是对于监控也有一定的扩展性，简单，快速，稳定是其胜出的原因。目前支持JDK8的最新版本是4.0.3，在GitHub开源，<a href=\"https://github.com/brettwooldridge/HikariCP\">项目地址</a></p>\n<h3 id=\"不使用数据库连接池\"><a href=\"#不使用数据库连接池\" class=\"headerlink\" title=\"不使用数据库连接池\"></a>不使用数据库连接池</h3><p>现在由于spring的普及，以及spring boot的集成便利性，无论是使用JPA还是MyBatis，底层ORM已经非常成熟，即便是基于学习也很少有人手动建立数据库连接，并执行SQL了，如果不使用数据库连接池，完全手动连接数据库，并执行SQL应该怎么做呢，让我们回到刀耕火种的时代，再怀旧一下。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>driverClassName<span class=\"token operator\">=</span>com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>Driver\nspring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>url<span class=\"token operator\">=</span>jdbc<span class=\"token operator\">:</span>mysql<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>mysql\nspring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>username<span class=\"token operator\">=</span>root\nspring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span><span class=\"token number\">123456</span>\n\n<span class=\"token keyword\">interface</span> HikariDao <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">useJdbc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">package</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>hikari<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>Autowired\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>Value\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>JdbcTemplate\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>ResultSetExtractor\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span>Service\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span>DriverManager\n\n<span class=\"token annotation builtin\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">HikariDaoImpl</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation builtin\">@Autowired</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jdbcTemplate<span class=\"token operator\">:</span> JdbcTemplate<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>url<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jdbcUrl<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>username<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>password<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> password<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> HikariDao <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> ALIAS <span class=\"token operator\">=</span> <span class=\"token string\">\"time\"</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"select now() as <span class=\"token interpolation variable\">$ALIAS</span>\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">,</span> ResultSetExtractor <span class=\"token punctuation\">&#123;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token label symbol\">@ResultSetExtractor</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>ALIAS<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">useJdbc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> connection <span class=\"token operator\">=</span> DriverManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>jdbcUrl<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">val</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            statement<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">)</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n                    it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>ALIAS<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>直接操作jdbc，需要通过DriverManager获取数据库连接，然后通过Statement执行SQL，拿到ResultSet，手动getXXX获取数据并组装成对象，这里使用了kotlin的use来自动close，通过示例可以看到如果手动操作，非常繁琐，需要关心很多和业务无关的操作，而spring jdbc以及ORM框架则把这些繁琐的操作都封装了起来，使我们只需要关注具体的SQL和对象。<br>这里还有一个小知识点，就是SPI，在JDBC4.0之前，需要使用<code>Class.forName(driverClassName)</code>来加载驱动，而JDBC4.0之后只需要厂商在驱动包里配置一下即可<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211201182322.png\"><br>原理是通过<code>val loader = ServiceLoader.load(Driver::class.java)</code>即可加载到实现。</p>\n<h3 id=\"为什么需要数据库连接池\"><a href=\"#为什么需要数据库连接池\" class=\"headerlink\" title=\"为什么需要数据库连接池\"></a>为什么需要数据库连接池</h3><p>数据库连接是TCP连接，需要经过TCP的三次握手，如果每次访问数据库都需要建立连接，则会导致每次获取数据都需要等待连接，将会大大降低数据获取的响应时间，而数据库连接池则是将数据库连接缓存起来，保持TCP连接不断，在需要的时候，直接从连接池里获取，不需要等待即可执行SQL获取到数据<br>除了降低响应时间之外，数据库连接池还可以设定数据库连接数量，因为数据库连接是宝贵资源，当某一个服务并发比较高，并且SQL执行比较慢的时候，会导致建立大量的数据库连接，这往往会对数据库造成致命的影响，导致数据库连接占满而不可用，其它正常的服务也将不可用。<br>另外TCP连接频繁建立断开，由于TCP断开的4次握手，会导致大量的TIME_WAIT状态问题，这也将会影响数据库的性能。</p>\n<h3 id=\"数据库连接池原理\"><a href=\"#数据库连接池原理\" class=\"headerlink\" title=\"数据库连接池原理\"></a>数据库连接池原理</h3><p>在系统初始化的时候，在内存中开辟一片空间，将一定数量的数据库连接作为对象存储在对象池里，并对外提供数据库连接的获取和归还方法。用户访问数据库时，并不是建立一个新的连接，而是从数据库连接池中取出一个已有的空闲连接对象；使用完毕归还后的连接也不会马上被关闭，而是由数据库连接池统一管理回收，为下一次借用做好准备。如果由于高并发请求导致数据库连接池中的连接被借用完毕，其他线程就会等待，直到有连接被归还。整个过程中，连接并不会被关闭，而是源源不断地循环使用，有借有还。数据库连接池还可以通过设置其参数来控制连接池中的初始连接数、连接的上下限数，以及每个连接的最大使用次数、最大空闲时间等，也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。</p>\n<h3 id=\"数据库连接池组成\"><a href=\"#数据库连接池组成\" class=\"headerlink\" title=\"数据库连接池组成\"></a>数据库连接池组成</h3><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0.jpg\"></p>\n<h3 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h3><p>由于spring boot 2.x开始数据库连接池已经默认是HikariCP了，所以我们只需要进行配置即可，那都有哪些配置项需要配置呢，又有哪些需要注意的地方呢？</p>\n<h4 id=\"默认是怎么生效的\"><a href=\"#默认是怎么生效的\" class=\"headerlink\" title=\"默认是怎么生效的\"></a>默认是怎么生效的</h4><p>我们先来看下，spring boot 2.6.1是怎么默认使用HikariCP为数据库连接池的。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>只要在pom.xml引入starter-jdbc，则默认就引入了HikariCP数据库连接池，我们看下spring-boot-starter-jdbc的pom.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.6.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zaxxer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>HikariCP<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.0.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.13<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到jdbc依赖了HikariCP，并且版本是4.0.3最新版本。了解spring boot starter机制的应该知道，除了pom依赖，还需要有autoconfig<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211202154126.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span><span class=\"token punctuation\">(</span>proxyBeanMethods <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@ConditionalOnClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HikariDataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@ConditionalOnProperty</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.type\"</span><span class=\"token punctuation\">,</span> havingValue <span class=\"token operator\">=</span> <span class=\"token string\">\"com.zaxxer.hikari.HikariDataSource\"</span><span class=\"token punctuation\">,</span>\n\t\t\tmatchIfMissing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hikari</span> <span class=\"token punctuation\">&#123;</span>\n\n\t\t<span class=\"token annotation punctuation\">@Bean</span>\n\t\t<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.hikari\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token class-name\">HikariDataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSourceProperties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">HikariDataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token function\">createDataSource</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HikariDataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPoolName</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样就默认初始化了HikariDataSource。<br>让我们再接着看下配置项。除了配置数据库必填的4个之外，常用配置还有另外几个。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">spring.datasource.driverClassName&#x3D;com.mysql.cj.jdbc.Driver\nspring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mysql\nspring.datasource.username&#x3D;root\nspring.datasource.password&#x3D;123456\n#默认true\nspring.datasource.hikari.autoCommit&#x3D;true\n#等待超时时间，默认30秒\nspring.datasource.hikari.connectionTimeOut&#x3D;30000\n#最长多久空闲即释放，默认10分钟\nspring.datasource.hikari.idleTimeout&#x3D;600000\n#连接最长存活时间毫秒，默认30分钟\nspring.datasource.hikari.maxLifetime&#x3D;1800000\n#最大连接池数量，默认10\nspring.datasource.hikari.maximumPoolSize&#x3D;10\n#默认和max相同\nspring.datasource.hikari.minimumIdle&#x3D;10\n#连接池名称，如果多个微服务，建议配置不同名字\nspring.datasource.hikari.poolName&#x3D;hikari\n#开启JMX\nspring.datasource.hikari.registerMbeans&#x3D;true\n\n#监控相关\n#spring.datasource.hikari.metricRegistry&#x3D;\n#健康信息\n#spring.datasource.hikari.healthCheckRegistry&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置项注意点\"><a href=\"#配置项注意点\" class=\"headerlink\" title=\"配置项注意点\"></a>配置项注意点</h4><p>大部分应用使用默认值即可很好的工作，需要注意的是连接池数量不是越多越好，而是如何尽量少越好。<br>我们先验证一下超时时间是否生效，为了方便测试，我们打开JMX以及将minimumIdle和maximumPoolSize改为1，然后执行慢查询，占用唯一的链接，再执行正常查询，等待，看看是否30秒会超时。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@RestController</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">HikariController</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@Autowired</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> hikariDao<span class=\"token operator\">:</span> HikariDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hikari\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">hikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> hikariDao<span class=\"token punctuation\">.</span><span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/slow\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> hikariDao<span class=\"token punctuation\">.</span><span class=\"token function\">slowSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> HikariDao <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">useJdbc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">slowSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation builtin\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">HikariDaoImpl</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation builtin\">@Autowired</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jdbcTemplate<span class=\"token operator\">:</span> JdbcTemplate<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>url<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jdbcUrl<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>username<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>password<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> password<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> HikariDao <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> TIME <span class=\"token operator\">=</span> <span class=\"token string\">\"time\"</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> COUNT <span class=\"token operator\">=</span> <span class=\"token string\">\"personCount\"</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"select now() as <span class=\"token interpolation variable\">$TIME</span>\"</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SLOW_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"select count(id) as <span class=\"token interpolation variable\">$COUNT</span> from hikari_person\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">,</span> ResultSetExtractor <span class=\"token punctuation\">&#123;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token label symbol\">@ResultSetExtractor</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>TIME<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">useJdbc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> connection <span class=\"token operator\">=</span> DriverManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>jdbcUrl<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">val</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            statement<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">)</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n                    it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>TIME<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">slowSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>SLOW_SQL<span class=\"token punctuation\">,</span> ResultSetExtractor <span class=\"token punctuation\">&#123;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token label symbol\">@ResultSetExtractor</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span>COUNT<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因为连接池是懒加载的，我们先访问一下/slow,验证一下不加表锁的情况下可以正常执行并初始化连接池。<br>再通过jconsole看下连接池的情况。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206151609.png\"><br>可以看到空闲连接1个，现在，我们把hikari_person表加上写锁，来模拟慢查询。<br><code>LOCK TABLES hikari_person WRITE;</code>  再访问/slow,直接卡住没有返回。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152032.png\"><br>可以看到活跃连接1个，已经没有空闲的了，这个时候我们访问/hikari<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152151.png\"><br>变成了1个活跃，1个等待，并且30秒报了超时异常。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152344.png\"><br>可以看到，确实配置可以生效，当连接池已满，再有请求就会被阻塞等待，然后超时。<br>记得执行<code>UNLOCK TABLES;</code>释放表锁。释放完后，原来等待返回的/slow直接返回了结果0。</p>\n<h3 id=\"数据源的初始化\"><a href=\"#数据源的初始化\" class=\"headerlink\" title=\"数据源的初始化\"></a>数据源的初始化</h3><p>之前已经看到spring boot启动的时候，会初始化HikariDataSource，关键代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.hikari\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">HikariDataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSourceProperties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">HikariDataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token function\">createDataSource</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HikariDataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPoolName</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再看一下HikariDataSource的类图<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206165729.png\"></p>\n<p>由于HikariDataSource继承自HikariConfig，并且<code>@ConfigurationProperties(prefix = &quot;spring.datasource.hikari&quot;)</code>所以我们在application.properties里配置的属性，就初始化到了DataSource里。</p>\n<h3 id=\"HikariDataSource的获取连接\"><a href=\"#HikariDataSource的获取连接\" class=\"headerlink\" title=\"HikariDataSource的获取连接\"></a>HikariDataSource的获取连接</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClosed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HikariDataSource \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" has been closed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fastPathPool <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">return</span> fastPathPool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// See http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java</span>\n  <span class=\"token class-name\">HikariPool</span> result <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        result <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; - Starting...\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getPoolName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n              pool <span class=\"token operator\">=</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HikariPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PoolInitializationException</span> pie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pie<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">)</span> pie<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">&#125;</span>\n              <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token keyword\">throw</span> pie<span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; - Start completed.\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getPoolName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>HikariDataSource的getConnection方法，有个额外知识点，就是单例模式，HikariPool是单例的，使用了双重检测锁来完成单例操作。<br>获取连接之前，需要先进行连接池的初始化new HikariPool(this)。</p>\n<h3 id=\"连接池的初始化\"><a href=\"#连接池的初始化\" class=\"headerlink\" title=\"连接池的初始化\"></a>连接池的初始化</h3><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%9E%E6%8E%A5%E6%B1%A0.jpg\"></p>\n<p>connectionBag是连接池的并发数据结构，做了并发优化，后面再详细说明。<br>houseKeeper是保持连接池数量的线程池，核心数量为1，使用了ScheduledThreadPoolExecutor，默认30秒运行一次。<br>监控后面再单独介绍。<br>启用JMX之后，HikariConfigMXBean和HikariPoolMXBean将会展示到Mbean。<br>创建物理Connection使用了addConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大线程都为1，使用了抛弃旧线程的策略。<br>关闭物理Connection使用了closeConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大也为1，使用了直接在主线程运行的策略。<br>leakTaskFactory用于检测是否有连接泄漏，getConnection之后要及时close掉，如果没有及时close则会有泄漏。通过getConnection时延迟执行ProxyLeakTask，延迟最小值2秒，低于此值则默认不进行连接泄漏检测，如果在该时间内没有及时close，则该延迟任务将会执行，而在close方法里，对该任务进行了cancel，及时close就不会触发ProxyLeakTask。默认是0不执行连接泄漏检测，可以通过spring.datasource.hikari.leakDetectionThreshold=3000设置来启用。<br>到此连接池就初始化完了。</p>\n<h3 id=\"获取连接\"><a href=\"#获取连接\" class=\"headerlink\" title=\"获取连接\"></a>获取连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5.jpg\"><br>核心代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> hardTimeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span>\n   <span class=\"token punctuation\">&#123;</span>\n      suspendResumeLock<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token function\">currentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">long</span> timeout <span class=\"token operator\">=</span> hardTimeout<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">PoolEntry</span> poolEntry <span class=\"token operator\">=</span> connectionBag<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">,</span> MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>poolEntry <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// We timed out... break and throw exception</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> now <span class=\"token operator\">=</span> <span class=\"token function\">currentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">.</span><span class=\"token function\">isMarkedEvicted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token function\">elapsedMillis</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">.</span>lastAccessed<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> aliveBypassWindowMs <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isConnectionAlive</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token function\">closeConnection</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">,</span> poolEntry<span class=\"token punctuation\">.</span><span class=\"token function\">isMarkedEvicted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> EVICTED_CONNECTION_MESSAGE <span class=\"token operator\">:</span> DEAD_CONNECTION_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               timeout <span class=\"token operator\">=</span> hardTimeout <span class=\"token operator\">-</span> <span class=\"token function\">elapsedMillis</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n               metricsTracker<span class=\"token punctuation\">.</span><span class=\"token function\">recordBorrowStats</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">return</span> poolEntry<span class=\"token punctuation\">.</span><span class=\"token function\">createProxyConnection</span><span class=\"token punctuation\">(</span>leakTaskFactory<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">></span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         metricsTracker<span class=\"token punctuation\">.</span><span class=\"token function\">recordBorrowTimeoutStats</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">throw</span> <span class=\"token function\">createTimeoutException</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">(</span>poolName <span class=\"token operator\">+</span> <span class=\"token string\">\" - Interrupted during connection acquisition\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n         suspendResumeLock<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>外部spring等访问的getConnection最终是访问了HikariPool的getConnection。<br>代码核心就是使用了并发数据结构ConnectionBag,ConnectionBag作用就是类似对象池，存储了数据库连接。<br>使用borrow方法，如果有可用的链接，即可获取到包装对象PoolEntry。<br>这里还有一个逻辑就是如果获取到的链接已经标记为关闭，或者存活时间超时，或者已经不可用，则</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">closeConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">PoolEntry</span> poolEntry<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> closureReason<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connectionBag<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">final</span> <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> poolEntry<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         closeConnectionExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">quietlyCloseConnection</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> closureReason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>poolState <span class=\"token operator\">==</span> POOL_NORMAL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token function\">fillPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从ConnectionBag移除，使用closeConnectionExecutor关闭链接，并补充数量。<br>所以getConnection里使用了do while来borrow获取一个链接。<br><code>return poolEntry.createProxyConnection(leakTaskFactory.schedule(poolEntry), now);</code><br>这块代码就是创建leakTask检测链接泄漏的同时，创建ProxyConnection返回。</p>\n<h3 id=\"归还连接\"><a href=\"#归还连接\" class=\"headerlink\" title=\"归还连接\"></a>归还连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112081615450.jpg\"><br>由于之前获取的连接并不是真正JDBC的Connect驱动实现，而是代理实现，所以调用对应的close方法只是归还连接，而不是真正关闭物理连接，这样就实现了借用连接池的链接，在close的时候归还连接，以便后续使用。<br>我们通过打断点，也可以看到对应的对象都是代理过的对象。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211208154917.png\"></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>由于需要对原生JDBC对象进行增强，所以HikariCP采用了代理技术，但是考虑性能问题，其没有使用JDK的动态代理，而是使用了字节码增强的伪动态代理，因为其字节码增强是在编译的时候增强的，使用了javassist来做字节码增强。<br>涉及到的类有，ProxyFactory，JavassistProxyFactory以及抽象类：ProxyCallableStatement，ProxyConnection，ProxyDatabaseMetaData，ProxyPreparedStatement，ProxyResultSet，ProxyStatement。<br>在JavassistProxyFactory里使用javassist字节码增强实现了HikariProxyConnection，HikariProxyPreparedStatement等具体类，其继承自上述抽象类，对于没有实现的方法，采用了代理调用方式自动生成方法实现。<br>既然ProxyConnection等抽象类都已经有具体代理实现方法了，为什么还要字节码增强来生成非抽象子类呢？何况你还是静态生成？<br>原因是因为，ProxyConnection等抽象类之所以设计成抽象类，就是因为不想实现自己不关心的接口，举个栗子，光Connection接口就几十个方法，需要代理的也就十几个方法，如果不以抽象类的方式，则需要全部实现这几十个方法，并且自己不关心的实现都只是简单调用驱动实现类的方法，可读性和维护性不高。如果是动态运行时字节码增强，无可厚非，但是编译期增强的话，根本原因，其实还是作者懒，宁愿字节码自动生成也不愿意代码实现，不过javassist本身也不支持动态运行时字节码替换。javassist类库本身很简单，封装了字节码的操作，很容易就上手，感兴趣的可以自己试试写个例子就会用了。</p>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>我们来写个动态代理的例子，实现对sql的日志打印，实现动态代理的方法很多，我们今天使用bytekit来实现。bytekit是arthas的底层字节码增强类库，通过注解的方式，很方便进行字节码增强，不止用来实现代理，还可以用于APM，功能很强大。<br>我们对Hikari的ProxyStatement的executeQuery方法进行字节码增强，来实现控制台打印其参数SQL的功能。<br>ProxyStatement的executeQuery实现如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSet</span> <span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span>\n<span class=\"token punctuation\">&#123;</span>\n  connection<span class=\"token punctuation\">.</span><span class=\"token function\">markCommitStateDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> delegate<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">ProxyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProxyResultSet</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们首先引入bytekit的pom依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>bytekit-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>net.bytebuddy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>byte-buddy-agent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.12.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.benf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cfr<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.151<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>写一个辅助类</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> ProxyUtil <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">enhanceClass</span><span class=\"token punctuation\">(</span>\n            targetClass<span class=\"token operator\">:</span> KClass<span class=\"token operator\">&lt;</span>ProxyStatement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n            targetMethodName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n            proxyClass<span class=\"token operator\">:</span> KClass<span class=\"token operator\">&lt;</span>SqlLogInterceptor<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            AgentUtils<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> interceptorClassParser <span class=\"token operator\">=</span> <span class=\"token function\">DefaultInterceptorClassParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> parseList <span class=\"token operator\">=</span> interceptorClassParser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>proxyClass<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> loadClass <span class=\"token operator\">=</span> AsmUtils<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>targetClass<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n            loadClass<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token label symbol\">@filter</span> it<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>targetMethodName<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">onEach</span> <span class=\"token punctuation\">&#123;</span> methodNode <span class=\"token operator\">-></span>\n                <span class=\"token keyword\">val</span> methodProcessor <span class=\"token operator\">=</span> <span class=\"token function\">MethodProcessor</span><span class=\"token punctuation\">(</span>loadClass<span class=\"token punctuation\">,</span> methodNode<span class=\"token punctuation\">)</span>\n                parseList<span class=\"token punctuation\">.</span><span class=\"token function\">onEach</span> <span class=\"token punctuation\">&#123;</span> parse <span class=\"token operator\">-></span>\n                    parse<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>methodProcessor<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">val</span> bytes <span class=\"token operator\">=</span> AsmUtils<span class=\"token punctuation\">.</span><span class=\"token function\">toBytes</span><span class=\"token punctuation\">(</span>loadClass<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decompile:<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>Decompiler<span class=\"token punctuation\">.</span><span class=\"token function\">decompile</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span>\n            AgentUtils<span class=\"token punctuation\">.</span><span class=\"token function\">reTransform</span><span class=\"token punctuation\">(</span>targetClass<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>编写实际增强代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SqlLogInterceptor</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@AtEnter</span><span class=\"token punctuation\">(</span>inline <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">atEnter</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Binding.Args</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Binding.Field</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"isClosed\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">boolean</span> isClosed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isClosed = \"</span> <span class=\"token operator\">+</span> isClosed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sql = \"</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ProxyStatement有一个私有属性isClosed，我们都可以拿到并使用。inline代表混入到源字节码里。我们看看反编译后的样子。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSet</span> <span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> sql<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> bl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isClosed<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objectArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>string<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isClosed = \"</span> <span class=\"token operator\">+</span> bl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sql = \"</span> <span class=\"token operator\">+</span> objectArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">markCommitStateDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>delegate<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ProxyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProxyResultSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>反编译后虽然不太正常，但是真实增强代码确实已经添加进去了，我们执行一下看看。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091150526.png\"><br>确实打印了出来。</p>\n<h3 id=\"Hikari为什么这么快\"><a href=\"#Hikari为什么这么快\" class=\"headerlink\" title=\"Hikari为什么这么快\"></a>Hikari为什么这么快</h3><p>因为Hikari代码比较精简，并且在细节上下了很大功夫，除了使用静态字节码增强来优化性能之前，其在并发性能上也下了功夫，具体就是对并发数据结构的创建和使用。</p>\n<h4 id=\"ConnectionBag\"><a href=\"#ConnectionBag\" class=\"headerlink\" title=\"ConnectionBag\"></a>ConnectionBag</h4><p>ConnectionBag可以说是hikari的核心，所有连接的创建，获取，归还，释放等等都和其息息相关，先来看下类结构。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091846818.png\"><br>最核心的几个方法是add,borrow,requite,remove。ConnectionBag内部使用了ThreadLocal和SynchronousQueue，CopyOnWriteArrayList以及waiters:AtomicInteger来保证并发安全以及快速获取连接。</p>\n<h4 id=\"borrow\"><a href=\"#borrow\" class=\"headerlink\" title=\"borrow\"></a>borrow</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TimeUnit</span> timeUnit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// Try the thread-local list first</span>\n   <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> threadList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> entry <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry <span class=\"token operator\">=</span> weakThreadLocals <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bagEntry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_NOT_IN_USE<span class=\"token punctuation\">,</span> STATE_IN_USE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span> bagEntry<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// Otherwise, scan the shared list ... then poll the handoff queue</span>\n   <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> waiting <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> bagEntry <span class=\"token operator\">:</span> sharedList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_NOT_IN_USE<span class=\"token punctuation\">,</span> STATE_IN_USE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// If we may have stolen another waiter's connection, request another bag add.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>waiting <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               listener<span class=\"token punctuation\">.</span><span class=\"token function\">addBagItem</span><span class=\"token punctuation\">(</span>waiting <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> bagEntry<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      listener<span class=\"token punctuation\">.</span><span class=\"token function\">addBagItem</span><span class=\"token punctuation\">(</span>waiting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      timeout <span class=\"token operator\">=</span> timeUnit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token function\">currentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry <span class=\"token operator\">=</span> handoffQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">,</span> NANOSECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bagEntry <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_NOT_IN_USE<span class=\"token punctuation\">,</span> STATE_IN_USE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> bagEntry<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n\n         timeout <span class=\"token operator\">-=</span> <span class=\"token function\">elapsedNanos</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">></span> <span class=\"token number\">10_000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n      waiters<span class=\"token punctuation\">.</span><span class=\"token function\">decrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>先看下borrow方法，首先在ThreadLocal里获取可用连接，如果没有，则在sharedList里获取，sharedList是CopyOnWriteArrayList并发集合类，如果还没有，就触发添加连接的请求，然后阻塞到handoffQueue: SynchronousQueue上，直到超时。<br>ThreadLocal默认是一个简化过的List，FastList，其实现去掉了越界检查，只实现了自己用到的方法，并且remove(Object object)方法是倒序查找。</p>\n<h4 id=\"requite\"><a href=\"#requite\" class=\"headerlink\" title=\"requite\"></a>requite</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>STATE_NOT_IN_USE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> waiters<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> STATE_NOT_IN_USE <span class=\"token operator\">||</span> handoffQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">parkNanos</span><span class=\"token punctuation\">(</span>MICROSECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> threadLocalList <span class=\"token operator\">=</span> threadList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocalList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     threadLocalList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>weakThreadLocals <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>归还方法比较简单，如果有线程等待，则直接归还到handoffQueue上，快速转让，并寄存到threadLocal里，方便下次获取。</p>\n<h4 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>closed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConcurrentBag has been closed, ignoring add()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConcurrentBag has been closed, ignoring add()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  sharedList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// spin until a thread takes it or none are waiting</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> STATE_NOT_IN_USE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>handoffQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>add方法不对外暴露，在checkFailFast和fillPool被调用。</p>\n<h4 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_IN_USE<span class=\"token punctuation\">,</span> STATE_REMOVED<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_RESERVED<span class=\"token punctuation\">,</span> STATE_REMOVED<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>closed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Attempt to remove an object from the bag that was not borrowed or reserved: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> removed <span class=\"token operator\">=</span> sharedList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>removed <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>closed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Attempt to remove an object from the bag that does not exist: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  threadList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另外一个比较重要的类就是PoolEntry，封装了Connection以及Connection对应的Statement和对应的使用状态等，这里存储Statement也是使用的FastList。ConcurrentBag里存储的就是PoolEntry对象。</p>\n<h3 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h3><p>说实话，hikari的监控做的不是很好，比如说对数据库查询异常日志的记录，对慢查询SQL的记录等等都没有，这也恰恰是其之所以比较快的原因，做好数据库连接池的功能，不把乱七八糟的东西引进来，但是并不是其一点监控数据都没有，可以借助spring的actuator功能，监控一些连接池自身的数据。<br>只需要在pom里添加对应的依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.micrometer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>micrometer-registry-prometheus<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.8.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>启动项目，通过<a href=\"http://localhost:8080/actuator/\">http://localhost:8080/actuator/</a> 访问<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918834.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918768.png\"><br>通过集成Prometheus以及Grafana则可以收集并图形化展示监控数据，这里就不做过多介绍了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>hikari虽然代码比较少，但是麻雀虽小五脏俱全，涉及到很多知识点</p>\n<ol>\n<li>单例模式</li>\n<li>JMX</li>\n<li>字节码增强，代理模式</li>\n<li>并发数据结构</li>\n<li>监控集成</li>\n</ol>\n<p>希望大家能从本文能收获一些东西，再见。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"HikariCP简介\"><a href=\"#HikariCP简介\" class=\"headerlink\" title=\"HikariCP简介\"></a>HikariCP简介</h3><p>HikariCP数据库连接池是spring boot的默认数据库连接池，看名字我以为是日本人写的，后来才知道是一个常年居住在东京的美国人写的，spring默认把hikari作为数据库连接池的原因也很简单，因为它足够快，代码量少，稳定，虽然功能不及Druid，但是对于监控也有一定的扩展性，简单，快速，稳定是其胜出的原因。目前支持JDK8的最新版本是4.0.3，在GitHub开源，<a href=\"https://github.com/brettwooldridge/HikariCP\">项目地址</a></p>\n<h3 id=\"不使用数据库连接池\"><a href=\"#不使用数据库连接池\" class=\"headerlink\" title=\"不使用数据库连接池\"></a>不使用数据库连接池</h3><p>现在由于spring的普及，以及spring boot的集成便利性，无论是使用JPA还是MyBatis，底层ORM已经非常成熟，即便是基于学习也很少有人手动建立数据库连接，并执行SQL了，如果不使用数据库连接池，完全手动连接数据库，并执行SQL应该怎么做呢，让我们回到刀耕火种的时代，再怀旧一下。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\">spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>driverClassName<span class=\"token operator\">=</span>com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>cj<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>Driver\nspring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>url<span class=\"token operator\">=</span>jdbc<span class=\"token operator\">:</span>mysql<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>mysql\nspring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>username<span class=\"token operator\">=</span>root\nspring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span><span class=\"token number\">123456</span>\n\n<span class=\"token keyword\">interface</span> HikariDao <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">useJdbc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">package</span> <span class=\"token keyword\">data</span><span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>hikari<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>Autowired\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>Value\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>JdbcTemplate\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>ResultSetExtractor\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span>Service\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span>DriverManager\n\n<span class=\"token annotation builtin\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">HikariDaoImpl</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation builtin\">@Autowired</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jdbcTemplate<span class=\"token operator\">:</span> JdbcTemplate<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>url<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jdbcUrl<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>username<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>password<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> password<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> HikariDao <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> ALIAS <span class=\"token operator\">=</span> <span class=\"token string\">\"time\"</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"select now() as <span class=\"token interpolation variable\">$ALIAS</span>\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">,</span> ResultSetExtractor <span class=\"token punctuation\">&#123;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token label symbol\">@ResultSetExtractor</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>ALIAS<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">useJdbc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> connection <span class=\"token operator\">=</span> DriverManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>jdbcUrl<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">val</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            statement<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">)</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n                    it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>ALIAS<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>直接操作jdbc，需要通过DriverManager获取数据库连接，然后通过Statement执行SQL，拿到ResultSet，手动getXXX获取数据并组装成对象，这里使用了kotlin的use来自动close，通过示例可以看到如果手动操作，非常繁琐，需要关心很多和业务无关的操作，而spring jdbc以及ORM框架则把这些繁琐的操作都封装了起来，使我们只需要关注具体的SQL和对象。<br>这里还有一个小知识点，就是SPI，在JDBC4.0之前，需要使用<code>Class.forName(driverClassName)</code>来加载驱动，而JDBC4.0之后只需要厂商在驱动包里配置一下即可<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211201182322.png\"><br>原理是通过<code>val loader = ServiceLoader.load(Driver::class.java)</code>即可加载到实现。</p>\n<h3 id=\"为什么需要数据库连接池\"><a href=\"#为什么需要数据库连接池\" class=\"headerlink\" title=\"为什么需要数据库连接池\"></a>为什么需要数据库连接池</h3><p>数据库连接是TCP连接，需要经过TCP的三次握手，如果每次访问数据库都需要建立连接，则会导致每次获取数据都需要等待连接，将会大大降低数据获取的响应时间，而数据库连接池则是将数据库连接缓存起来，保持TCP连接不断，在需要的时候，直接从连接池里获取，不需要等待即可执行SQL获取到数据<br>除了降低响应时间之外，数据库连接池还可以设定数据库连接数量，因为数据库连接是宝贵资源，当某一个服务并发比较高，并且SQL执行比较慢的时候，会导致建立大量的数据库连接，这往往会对数据库造成致命的影响，导致数据库连接占满而不可用，其它正常的服务也将不可用。<br>另外TCP连接频繁建立断开，由于TCP断开的4次握手，会导致大量的TIME_WAIT状态问题，这也将会影响数据库的性能。</p>\n<h3 id=\"数据库连接池原理\"><a href=\"#数据库连接池原理\" class=\"headerlink\" title=\"数据库连接池原理\"></a>数据库连接池原理</h3><p>在系统初始化的时候，在内存中开辟一片空间，将一定数量的数据库连接作为对象存储在对象池里，并对外提供数据库连接的获取和归还方法。用户访问数据库时，并不是建立一个新的连接，而是从数据库连接池中取出一个已有的空闲连接对象；使用完毕归还后的连接也不会马上被关闭，而是由数据库连接池统一管理回收，为下一次借用做好准备。如果由于高并发请求导致数据库连接池中的连接被借用完毕，其他线程就会等待，直到有连接被归还。整个过程中，连接并不会被关闭，而是源源不断地循环使用，有借有还。数据库连接池还可以通过设置其参数来控制连接池中的初始连接数、连接的上下限数，以及每个连接的最大使用次数、最大空闲时间等，也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。</p>\n<h3 id=\"数据库连接池组成\"><a href=\"#数据库连接池组成\" class=\"headerlink\" title=\"数据库连接池组成\"></a>数据库连接池组成</h3><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0.jpg\"></p>\n<h3 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h3><p>由于spring boot 2.x开始数据库连接池已经默认是HikariCP了，所以我们只需要进行配置即可，那都有哪些配置项需要配置呢，又有哪些需要注意的地方呢？</p>\n<h4 id=\"默认是怎么生效的\"><a href=\"#默认是怎么生效的\" class=\"headerlink\" title=\"默认是怎么生效的\"></a>默认是怎么生效的</h4><p>我们先来看下，spring boot 2.6.1是怎么默认使用HikariCP为数据库连接池的。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>只要在pom.xml引入starter-jdbc，则默认就引入了HikariCP数据库连接池，我们看下spring-boot-starter-jdbc的pom.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.6.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.zaxxer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>HikariCP<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.0.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.13<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到jdbc依赖了HikariCP，并且版本是4.0.3最新版本。了解spring boot starter机制的应该知道，除了pom依赖，还需要有autoconfig<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211202154126.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span><span class=\"token punctuation\">(</span>proxyBeanMethods <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@ConditionalOnClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HikariDataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@ConditionalOnProperty</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.type\"</span><span class=\"token punctuation\">,</span> havingValue <span class=\"token operator\">=</span> <span class=\"token string\">\"com.zaxxer.hikari.HikariDataSource\"</span><span class=\"token punctuation\">,</span>\n\t\t\tmatchIfMissing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hikari</span> <span class=\"token punctuation\">&#123;</span>\n\n\t\t<span class=\"token annotation punctuation\">@Bean</span>\n\t\t<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.hikari\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token class-name\">HikariDataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSourceProperties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">HikariDataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token function\">createDataSource</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HikariDataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tdataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPoolName</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这样就默认初始化了HikariDataSource。<br>让我们再接着看下配置项。除了配置数据库必填的4个之外，常用配置还有另外几个。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">spring.datasource.driverClassName&#x3D;com.mysql.cj.jdbc.Driver\nspring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mysql\nspring.datasource.username&#x3D;root\nspring.datasource.password&#x3D;123456\n#默认true\nspring.datasource.hikari.autoCommit&#x3D;true\n#等待超时时间，默认30秒\nspring.datasource.hikari.connectionTimeOut&#x3D;30000\n#最长多久空闲即释放，默认10分钟\nspring.datasource.hikari.idleTimeout&#x3D;600000\n#连接最长存活时间毫秒，默认30分钟\nspring.datasource.hikari.maxLifetime&#x3D;1800000\n#最大连接池数量，默认10\nspring.datasource.hikari.maximumPoolSize&#x3D;10\n#默认和max相同\nspring.datasource.hikari.minimumIdle&#x3D;10\n#连接池名称，如果多个微服务，建议配置不同名字\nspring.datasource.hikari.poolName&#x3D;hikari\n#开启JMX\nspring.datasource.hikari.registerMbeans&#x3D;true\n\n#监控相关\n#spring.datasource.hikari.metricRegistry&#x3D;\n#健康信息\n#spring.datasource.hikari.healthCheckRegistry&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"配置项注意点\"><a href=\"#配置项注意点\" class=\"headerlink\" title=\"配置项注意点\"></a>配置项注意点</h4><p>大部分应用使用默认值即可很好的工作，需要注意的是连接池数量不是越多越好，而是如何尽量少越好。<br>我们先验证一下超时时间是否生效，为了方便测试，我们打开JMX以及将minimumIdle和maximumPoolSize改为1，然后执行慢查询，占用唯一的链接，再执行正常查询，等待，看看是否30秒会超时。</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@RestController</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">HikariController</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@Autowired</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> hikariDao<span class=\"token operator\">:</span> HikariDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hikari\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">hikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> hikariDao<span class=\"token punctuation\">.</span><span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation builtin\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/slow\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">slow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> hikariDao<span class=\"token punctuation\">.</span><span class=\"token function\">slowSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> HikariDao <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">useJdbc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">slowSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation builtin\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">HikariDaoImpl</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation builtin\">@Autowired</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jdbcTemplate<span class=\"token operator\">:</span> JdbcTemplate<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>url<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> jdbcUrl<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>username<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>password<span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> password<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> HikariDao <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> TIME <span class=\"token operator\">=</span> <span class=\"token string\">\"time\"</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> COUNT <span class=\"token operator\">=</span> <span class=\"token string\">\"personCount\"</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"select now() as <span class=\"token interpolation variable\">$TIME</span>\"</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">val</span> SLOW_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"select count(id) as <span class=\"token interpolation variable\">$COUNT</span> from hikari_person\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">useHikari</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">,</span> ResultSetExtractor <span class=\"token punctuation\">&#123;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token label symbol\">@ResultSetExtractor</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>TIME<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">useJdbc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">val</span> connection <span class=\"token operator\">=</span> DriverManager<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>jdbcUrl<span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">val</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            statement<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">)</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">&#123;</span>\n                    it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>TIME<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">slowSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>SLOW_SQL<span class=\"token punctuation\">,</span> ResultSetExtractor <span class=\"token punctuation\">&#123;</span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token label symbol\">@ResultSetExtractor</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span>COUNT<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因为连接池是懒加载的，我们先访问一下/slow,验证一下不加表锁的情况下可以正常执行并初始化连接池。<br>再通过jconsole看下连接池的情况。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206151609.png\"><br>可以看到空闲连接1个，现在，我们把hikari_person表加上写锁，来模拟慢查询。<br><code>LOCK TABLES hikari_person WRITE;</code>  再访问/slow,直接卡住没有返回。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152032.png\"><br>可以看到活跃连接1个，已经没有空闲的了，这个时候我们访问/hikari<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152151.png\"><br>变成了1个活跃，1个等待，并且30秒报了超时异常。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206152344.png\"><br>可以看到，确实配置可以生效，当连接池已满，再有请求就会被阻塞等待，然后超时。<br>记得执行<code>UNLOCK TABLES;</code>释放表锁。释放完后，原来等待返回的/slow直接返回了结果0。</p>\n<h3 id=\"数据源的初始化\"><a href=\"#数据源的初始化\" class=\"headerlink\" title=\"数据源的初始化\"></a>数据源的初始化</h3><p>之前已经看到spring boot启动的时候，会初始化HikariDataSource，关键代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.datasource.hikari\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">HikariDataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSourceProperties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">HikariDataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token function\">createDataSource</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HikariDataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPoolName</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>再看一下HikariDataSource的类图<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211206165729.png\"></p>\n<p>由于HikariDataSource继承自HikariConfig，并且<code>@ConfigurationProperties(prefix = &quot;spring.datasource.hikari&quot;)</code>所以我们在application.properties里配置的属性，就初始化到了DataSource里。</p>\n<h3 id=\"HikariDataSource的获取连接\"><a href=\"#HikariDataSource的获取连接\" class=\"headerlink\" title=\"HikariDataSource的获取连接\"></a>HikariDataSource的获取连接</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClosed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HikariDataSource \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" has been closed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fastPathPool <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">return</span> fastPathPool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// See http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java</span>\n  <span class=\"token class-name\">HikariPool</span> result <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        result <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; - Starting...\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getPoolName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n              pool <span class=\"token operator\">=</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HikariPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PoolInitializationException</span> pie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pie<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">)</span> pie<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">&#125;</span>\n              <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token keyword\">throw</span> pie<span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">&#125;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; - Start completed.\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getPoolName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>HikariDataSource的getConnection方法，有个额外知识点，就是单例模式，HikariPool是单例的，使用了双重检测锁来完成单例操作。<br>获取连接之前，需要先进行连接池的初始化new HikariPool(this)。</p>\n<h3 id=\"连接池的初始化\"><a href=\"#连接池的初始化\" class=\"headerlink\" title=\"连接池的初始化\"></a>连接池的初始化</h3><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%9E%E6%8E%A5%E6%B1%A0.jpg\"></p>\n<p>connectionBag是连接池的并发数据结构，做了并发优化，后面再详细说明。<br>houseKeeper是保持连接池数量的线程池，核心数量为1，使用了ScheduledThreadPoolExecutor，默认30秒运行一次。<br>监控后面再单独介绍。<br>启用JMX之后，HikariConfigMXBean和HikariPoolMXBean将会展示到Mbean。<br>创建物理Connection使用了addConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大线程都为1，使用了抛弃旧线程的策略。<br>关闭物理Connection使用了closeConnectionExecutor，使用LinkedBlockingQueue，队列数量为配置的最大连接数，核心和最大也为1，使用了直接在主线程运行的策略。<br>leakTaskFactory用于检测是否有连接泄漏，getConnection之后要及时close掉，如果没有及时close则会有泄漏。通过getConnection时延迟执行ProxyLeakTask，延迟最小值2秒，低于此值则默认不进行连接泄漏检测，如果在该时间内没有及时close，则该延迟任务将会执行，而在close方法里，对该任务进行了cancel，及时close就不会触发ProxyLeakTask。默认是0不执行连接泄漏检测，可以通过spring.datasource.hikari.leakDetectionThreshold=3000设置来启用。<br>到此连接池就初始化完了。</p>\n<h3 id=\"获取连接\"><a href=\"#获取连接\" class=\"headerlink\" title=\"获取连接\"></a>获取连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5.jpg\"><br>核心代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> hardTimeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span>\n   <span class=\"token punctuation\">&#123;</span>\n      suspendResumeLock<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token function\">currentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">long</span> timeout <span class=\"token operator\">=</span> hardTimeout<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">PoolEntry</span> poolEntry <span class=\"token operator\">=</span> connectionBag<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">,</span> MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>poolEntry <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// We timed out... break and throw exception</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> now <span class=\"token operator\">=</span> <span class=\"token function\">currentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">.</span><span class=\"token function\">isMarkedEvicted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token function\">elapsedMillis</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">.</span>lastAccessed<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> aliveBypassWindowMs <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isConnectionAlive</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token function\">closeConnection</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">,</span> poolEntry<span class=\"token punctuation\">.</span><span class=\"token function\">isMarkedEvicted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> EVICTED_CONNECTION_MESSAGE <span class=\"token operator\">:</span> DEAD_CONNECTION_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               timeout <span class=\"token operator\">=</span> hardTimeout <span class=\"token operator\">-</span> <span class=\"token function\">elapsedMillis</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n               metricsTracker<span class=\"token punctuation\">.</span><span class=\"token function\">recordBorrowStats</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">,</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token keyword\">return</span> poolEntry<span class=\"token punctuation\">.</span><span class=\"token function\">createProxyConnection</span><span class=\"token punctuation\">(</span>leakTaskFactory<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">></span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         metricsTracker<span class=\"token punctuation\">.</span><span class=\"token function\">recordBorrowTimeoutStats</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">throw</span> <span class=\"token function\">createTimeoutException</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">(</span>poolName <span class=\"token operator\">+</span> <span class=\"token string\">\" - Interrupted during connection acquisition\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n         suspendResumeLock<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>外部spring等访问的getConnection最终是访问了HikariPool的getConnection。<br>代码核心就是使用了并发数据结构ConnectionBag,ConnectionBag作用就是类似对象池，存储了数据库连接。<br>使用borrow方法，如果有可用的链接，即可获取到包装对象PoolEntry。<br>这里还有一个逻辑就是如果获取到的链接已经标记为关闭，或者存活时间超时，或者已经不可用，则</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">closeConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">PoolEntry</span> poolEntry<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> closureReason<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connectionBag<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>poolEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">final</span> <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> poolEntry<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         closeConnectionExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">quietlyCloseConnection</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> closureReason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>poolState <span class=\"token operator\">==</span> POOL_NORMAL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token function\">fillPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从ConnectionBag移除，使用closeConnectionExecutor关闭链接，并补充数量。<br>所以getConnection里使用了do while来borrow获取一个链接。<br><code>return poolEntry.createProxyConnection(leakTaskFactory.schedule(poolEntry), now);</code><br>这块代码就是创建leakTask检测链接泄漏的同时，创建ProxyConnection返回。</p>\n<h3 id=\"归还连接\"><a href=\"#归还连接\" class=\"headerlink\" title=\"归还连接\"></a>归还连接</h3><p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112081615450.jpg\"><br>由于之前获取的连接并不是真正JDBC的Connect驱动实现，而是代理实现，所以调用对应的close方法只是归还连接，而不是真正关闭物理连接，这样就实现了借用连接池的链接，在close的时候归还连接，以便后续使用。<br>我们通过打断点，也可以看到对应的对象都是代理过的对象。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/20211208154917.png\"></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>由于需要对原生JDBC对象进行增强，所以HikariCP采用了代理技术，但是考虑性能问题，其没有使用JDK的动态代理，而是使用了字节码增强的伪动态代理，因为其字节码增强是在编译的时候增强的，使用了javassist来做字节码增强。<br>涉及到的类有，ProxyFactory，JavassistProxyFactory以及抽象类：ProxyCallableStatement，ProxyConnection，ProxyDatabaseMetaData，ProxyPreparedStatement，ProxyResultSet，ProxyStatement。<br>在JavassistProxyFactory里使用javassist字节码增强实现了HikariProxyConnection，HikariProxyPreparedStatement等具体类，其继承自上述抽象类，对于没有实现的方法，采用了代理调用方式自动生成方法实现。<br>既然ProxyConnection等抽象类都已经有具体代理实现方法了，为什么还要字节码增强来生成非抽象子类呢？何况你还是静态生成？<br>原因是因为，ProxyConnection等抽象类之所以设计成抽象类，就是因为不想实现自己不关心的接口，举个栗子，光Connection接口就几十个方法，需要代理的也就十几个方法，如果不以抽象类的方式，则需要全部实现这几十个方法，并且自己不关心的实现都只是简单调用驱动实现类的方法，可读性和维护性不高。如果是动态运行时字节码增强，无可厚非，但是编译期增强的话，根本原因，其实还是作者懒，宁愿字节码自动生成也不愿意代码实现，不过javassist本身也不支持动态运行时字节码替换。javassist类库本身很简单，封装了字节码的操作，很容易就上手，感兴趣的可以自己试试写个例子就会用了。</p>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>我们来写个动态代理的例子，实现对sql的日志打印，实现动态代理的方法很多，我们今天使用bytekit来实现。bytekit是arthas的底层字节码增强类库，通过注解的方式，很方便进行字节码增强，不止用来实现代理，还可以用于APM，功能很强大。<br>我们对Hikari的ProxyStatement的executeQuery方法进行字节码增强，来实现控制台打印其参数SQL的功能。<br>ProxyStatement的executeQuery实现如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSet</span> <span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span>\n<span class=\"token punctuation\">&#123;</span>\n  connection<span class=\"token punctuation\">.</span><span class=\"token function\">markCommitStateDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> delegate<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">ProxyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProxyResultSet</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们首先引入bytekit的pom依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>bytekit-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>net.bytebuddy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>byte-buddy-agent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.12.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.benf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cfr<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.151<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>写一个辅助类</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> ProxyUtil <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">enhanceClass</span><span class=\"token punctuation\">(</span>\n            targetClass<span class=\"token operator\">:</span> KClass<span class=\"token operator\">&lt;</span>ProxyStatement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n            targetMethodName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n            proxyClass<span class=\"token operator\">:</span> KClass<span class=\"token operator\">&lt;</span>SqlLogInterceptor<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            AgentUtils<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> interceptorClassParser <span class=\"token operator\">=</span> <span class=\"token function\">DefaultInterceptorClassParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> parseList <span class=\"token operator\">=</span> interceptorClassParser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>proxyClass<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> loadClass <span class=\"token operator\">=</span> AsmUtils<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>targetClass<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n            loadClass<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token label symbol\">@filter</span> it<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>targetMethodName<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">onEach</span> <span class=\"token punctuation\">&#123;</span> methodNode <span class=\"token operator\">-></span>\n                <span class=\"token keyword\">val</span> methodProcessor <span class=\"token operator\">=</span> <span class=\"token function\">MethodProcessor</span><span class=\"token punctuation\">(</span>loadClass<span class=\"token punctuation\">,</span> methodNode<span class=\"token punctuation\">)</span>\n                parseList<span class=\"token punctuation\">.</span><span class=\"token function\">onEach</span> <span class=\"token punctuation\">&#123;</span> parse <span class=\"token operator\">-></span>\n                    parse<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>methodProcessor<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">val</span> bytes <span class=\"token operator\">=</span> AsmUtils<span class=\"token punctuation\">.</span><span class=\"token function\">toBytes</span><span class=\"token punctuation\">(</span>loadClass<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decompile:<span class=\"token interpolation\"><span class=\"token delimiter variable\">$&#123;</span>Decompiler<span class=\"token punctuation\">.</span><span class=\"token function\">decompile</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span>\n            AgentUtils<span class=\"token punctuation\">.</span><span class=\"token function\">reTransform</span><span class=\"token punctuation\">(</span>targetClass<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>编写实际增强代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SqlLogInterceptor</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@AtEnter</span><span class=\"token punctuation\">(</span>inline <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">atEnter</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Binding.Args</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Binding.Field</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"isClosed\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">boolean</span> isClosed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isClosed = \"</span> <span class=\"token operator\">+</span> isClosed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sql = \"</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ProxyStatement有一个私有属性isClosed，我们都可以拿到并使用。inline代表混入到源字节码里。我们看看反编译后的样子。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSet</span> <span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> sql<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> bl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isClosed<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> objectArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>string<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isClosed = \"</span> <span class=\"token operator\">+</span> bl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sql = \"</span> <span class=\"token operator\">+</span> objectArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">markCommitStateDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>delegate<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ProxyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProxyResultSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>反编译后虽然不太正常，但是真实增强代码确实已经添加进去了，我们执行一下看看。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091150526.png\"><br>确实打印了出来。</p>\n<h3 id=\"Hikari为什么这么快\"><a href=\"#Hikari为什么这么快\" class=\"headerlink\" title=\"Hikari为什么这么快\"></a>Hikari为什么这么快</h3><p>因为Hikari代码比较精简，并且在细节上下了很大功夫，除了使用静态字节码增强来优化性能之前，其在并发性能上也下了功夫，具体就是对并发数据结构的创建和使用。</p>\n<h4 id=\"ConnectionBag\"><a href=\"#ConnectionBag\" class=\"headerlink\" title=\"ConnectionBag\"></a>ConnectionBag</h4><p>ConnectionBag可以说是hikari的核心，所有连接的创建，获取，归还，释放等等都和其息息相关，先来看下类结构。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091846818.png\"><br>最核心的几个方法是add,borrow,requite,remove。ConnectionBag内部使用了ThreadLocal和SynchronousQueue，CopyOnWriteArrayList以及waiters:AtomicInteger来保证并发安全以及快速获取连接。</p>\n<h4 id=\"borrow\"><a href=\"#borrow\" class=\"headerlink\" title=\"borrow\"></a>borrow</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TimeUnit</span> timeUnit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// Try the thread-local list first</span>\n   <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> threadList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> entry <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry <span class=\"token operator\">=</span> weakThreadLocals <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bagEntry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_NOT_IN_USE<span class=\"token punctuation\">,</span> STATE_IN_USE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span> bagEntry<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token comment\">// Otherwise, scan the shared list ... then poll the handoff queue</span>\n   <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> waiting <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> bagEntry <span class=\"token operator\">:</span> sharedList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_NOT_IN_USE<span class=\"token punctuation\">,</span> STATE_IN_USE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// If we may have stolen another waiter's connection, request another bag add.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>waiting <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               listener<span class=\"token punctuation\">.</span><span class=\"token function\">addBagItem</span><span class=\"token punctuation\">(</span>waiting <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> bagEntry<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      listener<span class=\"token punctuation\">.</span><span class=\"token function\">addBagItem</span><span class=\"token punctuation\">(</span>waiting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      timeout <span class=\"token operator\">=</span> timeUnit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token function\">currentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry <span class=\"token operator\">=</span> handoffQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">,</span> NANOSECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bagEntry <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_NOT_IN_USE<span class=\"token punctuation\">,</span> STATE_IN_USE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> bagEntry<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n\n         timeout <span class=\"token operator\">-=</span> <span class=\"token function\">elapsedNanos</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">></span> <span class=\"token number\">10_000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n      waiters<span class=\"token punctuation\">.</span><span class=\"token function\">decrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>先看下borrow方法，首先在ThreadLocal里获取可用连接，如果没有，则在sharedList里获取，sharedList是CopyOnWriteArrayList并发集合类，如果还没有，就触发添加连接的请求，然后阻塞到handoffQueue: SynchronousQueue上，直到超时。<br>ThreadLocal默认是一个简化过的List，FastList，其实现去掉了越界检查，只实现了自己用到的方法，并且remove(Object object)方法是倒序查找。</p>\n<h4 id=\"requite\"><a href=\"#requite\" class=\"headerlink\" title=\"requite\"></a>requite</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>STATE_NOT_IN_USE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> waiters<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> STATE_NOT_IN_USE <span class=\"token operator\">||</span> handoffQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">parkNanos</span><span class=\"token punctuation\">(</span>MICROSECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> threadLocalList <span class=\"token operator\">=</span> threadList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocalList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     threadLocalList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>weakThreadLocals <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>归还方法比较简单，如果有线程等待，则直接归还到handoffQueue上，快速转让，并寄存到threadLocal里，方便下次获取。</p>\n<h4 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>closed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConcurrentBag has been closed, ignoring add()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConcurrentBag has been closed, ignoring add()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  sharedList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// spin until a thread takes it or none are waiting</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>waiters<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> STATE_NOT_IN_USE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>handoffQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>add方法不对外暴露，在checkFailFast和fillPool被调用。</p>\n<h4 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> bagEntry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_IN_USE<span class=\"token punctuation\">,</span> STATE_REMOVED<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>bagEntry<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>STATE_RESERVED<span class=\"token punctuation\">,</span> STATE_REMOVED<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>closed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Attempt to remove an object from the bag that was not borrowed or reserved: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> removed <span class=\"token operator\">=</span> sharedList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>removed <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>closed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     LOGGER<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Attempt to remove an object from the bag that does not exist: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  threadList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>bagEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> removed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另外一个比较重要的类就是PoolEntry，封装了Connection以及Connection对应的Statement和对应的使用状态等，这里存储Statement也是使用的FastList。ConcurrentBag里存储的就是PoolEntry对象。</p>\n<h3 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h3><p>说实话，hikari的监控做的不是很好，比如说对数据库查询异常日志的记录，对慢查询SQL的记录等等都没有，这也恰恰是其之所以比较快的原因，做好数据库连接池的功能，不把乱七八糟的东西引进来，但是并不是其一点监控数据都没有，可以借助spring的actuator功能，监控一些连接池自身的数据。<br>只需要在pom里添加对应的依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.micrometer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>micrometer-registry-prometheus<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.8.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>启动项目，通过<a href=\"http://localhost:8080/actuator/\">http://localhost:8080/actuator/</a> 访问<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918834.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202112091918768.png\"><br>通过集成Prometheus以及Grafana则可以收集并图形化展示监控数据，这里就不做过多介绍了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>hikari虽然代码比较少，但是麻雀虽小五脏俱全，涉及到很多知识点</p>\n<ol>\n<li>单例模式</li>\n<li>JMX</li>\n<li>字节码增强，代理模式</li>\n<li>并发数据结构</li>\n<li>监控集成</li>\n</ol>\n<p>希望大家能从本文能收获一些东西，再见。</p>\n"},{"title":"Java ThreadLocal探秘","author":"王登武","date":"2022-03-10T06:03:53.000Z","_content":"### 一个ThreadLocal的问题\n昨天面试，有被问到ThreadLocal如何跨线程传递数据，被问到知识盲区了，很是尴尬，自己确实没仔细看过ThreadLocal的代码，回来后赶紧抱起源码读了起来，读完之后，对ThreadLocal是即爱又怕，爱它能传递数据，并避免多线程安全问题，怕的是内存泄漏。\n### ThreadLocal例子1\n这个例子主要是演示，子线程内是获取不到主线程里设置的数据，代码如下：\n\n``` java\n@Test\npublic void testThreadLocal() {\n    ThreadLocal<String> threadLocal = new ThreadLocal<>();\n    threadLocal.set(\"Parent\");\n    new Thread(() -> {\n        String s = threadLocal.get();\n        assertNull(\"get from ThreadLocal in child thread should be null\", s);\n    }).start();\n}   \n```\n这个单元测试很简单，就是测一下主线程里设置一个值，子线程里取肯定是null，也就是取不到。这反而是TheadLocal的主要作用，就是隔离线程。\n### TheadLocal例子2\n这个例子就是演示如何跨线程获取数据，也就是我被问到的那个问题如何实现\n\n``` java\n@Test\npublic void testInheritableThreadLocal() {\n\tThreadLocal<String> threadLocal = new InheritableThreadLocal<>();\n\tthreadLocal.set(\"Parent\");\n\tnew Thread(() -> {\n\t    String s = threadLocal.get();\n\t    Assert.assertEquals(\"get from InheritableThreadLocal in child thread should be equals\", \"Parent\", s);\n\t}).start();\n}\n```\n代码一样很简单，只需要使用InheritableThreadLocal的实现类即可。\n那原理是什么呢？那就要深入浅出源码了。\n### 源码解读\n先看下ThreadLocal的set方法\n\n``` java\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\nThreadLocalMap getMap(Thread t) {\n        return t.threadLocals;\n}\nvoid createMap(Thread t, T firstValue) {\n        t.threadLocals = new ThreadLocalMap(this, firstValue);\n}\nprivate static final int INITIAL_CAPACITY = 16;\nThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) {\n    table = new Entry[INITIAL_CAPACITY];\n    int i = firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);\n    table[i] = new Entry(firstKey, firstValue);\n    size = 1;\n    setThreshold(INITIAL_CAPACITY);\n}\nprivate final int threadLocalHashCode = nextHashCode();\nprivate static final int HASH_INCREMENT = 0x61c88647;\nprivate static AtomicInteger nextHashCode =\n        new AtomicInteger();\nprivate static int nextHashCode() {\n    return nextHashCode.getAndAdd(HASH_INCREMENT);\n}\n```\n有2个关键信息\n\n1. 第一次set的时候是直接new ThreadLocalMap初始化放进去的\n2. 我们的value是放到ThreadLocalMap里的，而ThreadLocalMap是当前线程的一个属性threadLocals\n那关键点就在ThreadLocalMap类上了，看下它的set方法，注意`map.set(this, value);`,这个this是ThreadLocal\n\n``` java\nprivate void set(ThreadLocal<?> key, Object value) {\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n\n    for (Entry e = tab[i];\n         e != null;\n         e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n\n        if (k == null) {\n            replaceStaleEntry(key, value, i);\n            return;\n        }\n    }\n\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n```\n我去掉了注释，代码略微有点复杂了，但是我们现在只关注主线，就是value到底存到哪了？\n首先和table属性有关，它是一个Entry数组，默认初始化的时候是16大小，然后遍历这个数组,找到Entry的key和当前ThreadLocal一致的元素，然后把value放进去，如果没找到就直接new一个放到table数组的i位置。\n而i的取值又和ThreadLocal的threadLocalHashCode有关，并且每实例化一个ThreadLocal都会递增。\n注意Entry是一个弱引用类型\n\n``` java\nstatic class Entry extends WeakReference<ThreadLocal<?>> {\n    /** The value associated with this ThreadLocal. */\n    Object value;\n\n    Entry(ThreadLocal<?> k, Object v) {\n        super(k);\n        value = v;\n    }\n}\n```\n这也就解释了普通TheadLocal为什么跨线程获取不到数据，因为数据是在每个线程实例里的，而key又和每个ThreadLocal有关，因为我们可能使用多个ThreadLocal保存多个对象。\n###  如何实现父子之间传递\n我们看下Thread的init方法\n\n``` java\nprivate void init(ThreadGroup g, Runnable target, String name, long stackSize) {\n  init(g, target, name, stackSize, null, true);\n}\n```\n不得不吐槽Java不支持参数命名这个机制，kotlin就很好的支持了这个特性，在调用的时候很清楚的表达了传递的参数是什么含义。\n看下例子\n\n``` kotlin\nclass NameParam {\n    fun namedParams(name: String, sex: String, age: Int = 0) {//可以有默认值\n\n    }\n}\n\nfun main() {\n    NameParam().namedParams(\"我\", \"男\")//不使用命名参数，按顺序赋值，默认年龄0，可以不传值\n    NameParam().namedParams(sex = \"male\", name = \"me\", age = 18);//使用命名参数，清晰明了\n}\n```\n嗯，kotlin就是那种，一旦你使用过，就爱上的那种。毕竟是我jetbrains出品,被Google认作亲儿子的语言\n好了，回到Java。。。。。。。，我得上图\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101617305.png)\n重点代码我都标了，也就是如果想父子线程传递，就需要使用inheritableThreadLocals而不是threadLocals\n那我们再看下InheritableThreadLocal类的代码\n\n``` java\npublic class InheritableThreadLocal<T> extends ThreadLocal<T> {\n    protected T childValue(T parentValue) {\n        return parentValue;\n    }\n    \n    ThreadLocalMap getMap(Thread t) {\n       return t.inheritableThreadLocals;\n    }\n\n    void createMap(Thread t, T firstValue) {\n        t.inheritableThreadLocals = new ThreadLocalMap(this, firstValue);\n    }\n}\n```\n嗯，重写了关键方法createMap和getMap，这下串起来了吧，所以使用InheritableThreadLocal就使用了inheritableThreadLocals，而线程初始化的时候，又会根据inheritableThreadLocals判断是否复制当前线程的inheritableThreadLocals\n### 可能的内存泄漏\n我们直接上代码\n\n``` java\npublic class MemoryLeakBean {\n    private int index;\n\n    public MemoryLeakBean(int index) {\n        this.index = index;\n    }\n\n    @Override\n    public String toString() {\n        return \"MemoryLeakBean\" + index;\n    }\n}\n\npublic static final String THREAD = \"Thread\";\n\n@Test\n@Ignore\npublic void testMemoryLeakWithThreadLocal() throws InterruptedException {\n    WeakReference<ThreadLocal> threadLocal = new WeakReference<>(new ThreadLocal<MemoryLeakBean>());\n    ExecutorService executorService = Executors.newFixedThreadPool(16);\n    // now we start 16 thread without remove thread local\n    for (int i = 0; i < 16; i++) {\n        final int index = i;\n        executorService.execute(() -> {\n            Thread.currentThread().setName(THREAD + index);\n            if (threadLocal.get() != null) {\n                threadLocal.get().set(new MemoryLeakBean(index));\n            }\n            while (true) {\n                reflect(threadLocal);\n            }\n        });\n    }\n    Executors.newSingleThreadScheduledExecutor().schedule(() -> {\n        Runtime.getRuntime().gc();\n    }, 5, TimeUnit.SECONDS);\n    executorService.awaitTermination(10, TimeUnit.MINUTES);\n}\n\nprivate void reflect(WeakReference<ThreadLocal> threadLocal) {\n    Field threadLocalsField = null;\n    try {\n        threadLocalsField = Thread.class.getDeclaredField(\"threadLocals\");\n        threadLocalsField.setAccessible(true);\n        Object threadLocals = threadLocalsField.get(Thread.currentThread());\n        if (threadLocals == null) {\n            return;\n        }\n        Field table = threadLocals.getClass().getDeclaredField(\"table\");\n        table.setAccessible(true);\n        Object[] entries = (Object[]) table.get(threadLocals);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (Object entry : entries) {\n            if (entry == null) {\n                continue;\n            }\n            Field value = entry.getClass().getDeclaredField(\"value\");\n            value.setAccessible(true);\n            stringBuilder.append(value.get(entry));\n        }\n        System.out.println(Thread.currentThread().getName() + \"'s entries values is \" + stringBuilder.toString());\n        Thread.sleep(new Random().nextInt(10) * 1000);\n        if (threadLocal.get() == null) {\n            //我们只需要挑一个线程打印一次就行\n            if ((THREAD + 1).equals(Thread.currentThread().getName())) {\n                System.out.println(\"after gc threadLocal is null\");\n            }\n        }\n    } catch (NoSuchFieldException | InterruptedException | IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}\n```\n解释一下，首先使用弱引用创建ThreadLocal，然后使用线程池启动16个线程，分别设置MemoryLeakBean，使用自定义的MemoryLeakBean是因为我们需要看下jvm内存的对象个数，而使用String,Long不容易看清楚。\n等待5秒开始gc，这样弱引用就会被释放，也就是ThreadLocal对象就没有了，然后我们线程里循环反射获取MemoryLeakBean对象。这个时候如果线程不释放，则MemoryLeakBean对象就一直存在，而线程池是一直存在的。我们看下执行结果\n\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101643315.png)\n可以看到ThreadLocal已经没有了，但是还是能获取到MemoryLeakBean\n我们使用jmap看下\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101645895.png)\n可以看到确实是有16个MemoryLeakBean对象还在。\n### 总结\nThreadLocal虽好，可不要贪杯哦。最后还是要安利一下kotlin","source":"_posts/Java-ThreadLocal探秘.md","raw":"---\ntitle: Java ThreadLocal探秘\nauthor: 王登武\ndate: 2022-03-10 14:03:53\ncategories:\n - Java\ntags:\n - ThreadLocal\n---\n### 一个ThreadLocal的问题\n昨天面试，有被问到ThreadLocal如何跨线程传递数据，被问到知识盲区了，很是尴尬，自己确实没仔细看过ThreadLocal的代码，回来后赶紧抱起源码读了起来，读完之后，对ThreadLocal是即爱又怕，爱它能传递数据，并避免多线程安全问题，怕的是内存泄漏。\n### ThreadLocal例子1\n这个例子主要是演示，子线程内是获取不到主线程里设置的数据，代码如下：\n\n``` java\n@Test\npublic void testThreadLocal() {\n    ThreadLocal<String> threadLocal = new ThreadLocal<>();\n    threadLocal.set(\"Parent\");\n    new Thread(() -> {\n        String s = threadLocal.get();\n        assertNull(\"get from ThreadLocal in child thread should be null\", s);\n    }).start();\n}   \n```\n这个单元测试很简单，就是测一下主线程里设置一个值，子线程里取肯定是null，也就是取不到。这反而是TheadLocal的主要作用，就是隔离线程。\n### TheadLocal例子2\n这个例子就是演示如何跨线程获取数据，也就是我被问到的那个问题如何实现\n\n``` java\n@Test\npublic void testInheritableThreadLocal() {\n\tThreadLocal<String> threadLocal = new InheritableThreadLocal<>();\n\tthreadLocal.set(\"Parent\");\n\tnew Thread(() -> {\n\t    String s = threadLocal.get();\n\t    Assert.assertEquals(\"get from InheritableThreadLocal in child thread should be equals\", \"Parent\", s);\n\t}).start();\n}\n```\n代码一样很简单，只需要使用InheritableThreadLocal的实现类即可。\n那原理是什么呢？那就要深入浅出源码了。\n### 源码解读\n先看下ThreadLocal的set方法\n\n``` java\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\nThreadLocalMap getMap(Thread t) {\n        return t.threadLocals;\n}\nvoid createMap(Thread t, T firstValue) {\n        t.threadLocals = new ThreadLocalMap(this, firstValue);\n}\nprivate static final int INITIAL_CAPACITY = 16;\nThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) {\n    table = new Entry[INITIAL_CAPACITY];\n    int i = firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);\n    table[i] = new Entry(firstKey, firstValue);\n    size = 1;\n    setThreshold(INITIAL_CAPACITY);\n}\nprivate final int threadLocalHashCode = nextHashCode();\nprivate static final int HASH_INCREMENT = 0x61c88647;\nprivate static AtomicInteger nextHashCode =\n        new AtomicInteger();\nprivate static int nextHashCode() {\n    return nextHashCode.getAndAdd(HASH_INCREMENT);\n}\n```\n有2个关键信息\n\n1. 第一次set的时候是直接new ThreadLocalMap初始化放进去的\n2. 我们的value是放到ThreadLocalMap里的，而ThreadLocalMap是当前线程的一个属性threadLocals\n那关键点就在ThreadLocalMap类上了，看下它的set方法，注意`map.set(this, value);`,这个this是ThreadLocal\n\n``` java\nprivate void set(ThreadLocal<?> key, Object value) {\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n\n    for (Entry e = tab[i];\n         e != null;\n         e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n\n        if (k == null) {\n            replaceStaleEntry(key, value, i);\n            return;\n        }\n    }\n\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n```\n我去掉了注释，代码略微有点复杂了，但是我们现在只关注主线，就是value到底存到哪了？\n首先和table属性有关，它是一个Entry数组，默认初始化的时候是16大小，然后遍历这个数组,找到Entry的key和当前ThreadLocal一致的元素，然后把value放进去，如果没找到就直接new一个放到table数组的i位置。\n而i的取值又和ThreadLocal的threadLocalHashCode有关，并且每实例化一个ThreadLocal都会递增。\n注意Entry是一个弱引用类型\n\n``` java\nstatic class Entry extends WeakReference<ThreadLocal<?>> {\n    /** The value associated with this ThreadLocal. */\n    Object value;\n\n    Entry(ThreadLocal<?> k, Object v) {\n        super(k);\n        value = v;\n    }\n}\n```\n这也就解释了普通TheadLocal为什么跨线程获取不到数据，因为数据是在每个线程实例里的，而key又和每个ThreadLocal有关，因为我们可能使用多个ThreadLocal保存多个对象。\n###  如何实现父子之间传递\n我们看下Thread的init方法\n\n``` java\nprivate void init(ThreadGroup g, Runnable target, String name, long stackSize) {\n  init(g, target, name, stackSize, null, true);\n}\n```\n不得不吐槽Java不支持参数命名这个机制，kotlin就很好的支持了这个特性，在调用的时候很清楚的表达了传递的参数是什么含义。\n看下例子\n\n``` kotlin\nclass NameParam {\n    fun namedParams(name: String, sex: String, age: Int = 0) {//可以有默认值\n\n    }\n}\n\nfun main() {\n    NameParam().namedParams(\"我\", \"男\")//不使用命名参数，按顺序赋值，默认年龄0，可以不传值\n    NameParam().namedParams(sex = \"male\", name = \"me\", age = 18);//使用命名参数，清晰明了\n}\n```\n嗯，kotlin就是那种，一旦你使用过，就爱上的那种。毕竟是我jetbrains出品,被Google认作亲儿子的语言\n好了，回到Java。。。。。。。，我得上图\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101617305.png)\n重点代码我都标了，也就是如果想父子线程传递，就需要使用inheritableThreadLocals而不是threadLocals\n那我们再看下InheritableThreadLocal类的代码\n\n``` java\npublic class InheritableThreadLocal<T> extends ThreadLocal<T> {\n    protected T childValue(T parentValue) {\n        return parentValue;\n    }\n    \n    ThreadLocalMap getMap(Thread t) {\n       return t.inheritableThreadLocals;\n    }\n\n    void createMap(Thread t, T firstValue) {\n        t.inheritableThreadLocals = new ThreadLocalMap(this, firstValue);\n    }\n}\n```\n嗯，重写了关键方法createMap和getMap，这下串起来了吧，所以使用InheritableThreadLocal就使用了inheritableThreadLocals，而线程初始化的时候，又会根据inheritableThreadLocals判断是否复制当前线程的inheritableThreadLocals\n### 可能的内存泄漏\n我们直接上代码\n\n``` java\npublic class MemoryLeakBean {\n    private int index;\n\n    public MemoryLeakBean(int index) {\n        this.index = index;\n    }\n\n    @Override\n    public String toString() {\n        return \"MemoryLeakBean\" + index;\n    }\n}\n\npublic static final String THREAD = \"Thread\";\n\n@Test\n@Ignore\npublic void testMemoryLeakWithThreadLocal() throws InterruptedException {\n    WeakReference<ThreadLocal> threadLocal = new WeakReference<>(new ThreadLocal<MemoryLeakBean>());\n    ExecutorService executorService = Executors.newFixedThreadPool(16);\n    // now we start 16 thread without remove thread local\n    for (int i = 0; i < 16; i++) {\n        final int index = i;\n        executorService.execute(() -> {\n            Thread.currentThread().setName(THREAD + index);\n            if (threadLocal.get() != null) {\n                threadLocal.get().set(new MemoryLeakBean(index));\n            }\n            while (true) {\n                reflect(threadLocal);\n            }\n        });\n    }\n    Executors.newSingleThreadScheduledExecutor().schedule(() -> {\n        Runtime.getRuntime().gc();\n    }, 5, TimeUnit.SECONDS);\n    executorService.awaitTermination(10, TimeUnit.MINUTES);\n}\n\nprivate void reflect(WeakReference<ThreadLocal> threadLocal) {\n    Field threadLocalsField = null;\n    try {\n        threadLocalsField = Thread.class.getDeclaredField(\"threadLocals\");\n        threadLocalsField.setAccessible(true);\n        Object threadLocals = threadLocalsField.get(Thread.currentThread());\n        if (threadLocals == null) {\n            return;\n        }\n        Field table = threadLocals.getClass().getDeclaredField(\"table\");\n        table.setAccessible(true);\n        Object[] entries = (Object[]) table.get(threadLocals);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (Object entry : entries) {\n            if (entry == null) {\n                continue;\n            }\n            Field value = entry.getClass().getDeclaredField(\"value\");\n            value.setAccessible(true);\n            stringBuilder.append(value.get(entry));\n        }\n        System.out.println(Thread.currentThread().getName() + \"'s entries values is \" + stringBuilder.toString());\n        Thread.sleep(new Random().nextInt(10) * 1000);\n        if (threadLocal.get() == null) {\n            //我们只需要挑一个线程打印一次就行\n            if ((THREAD + 1).equals(Thread.currentThread().getName())) {\n                System.out.println(\"after gc threadLocal is null\");\n            }\n        }\n    } catch (NoSuchFieldException | InterruptedException | IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}\n```\n解释一下，首先使用弱引用创建ThreadLocal，然后使用线程池启动16个线程，分别设置MemoryLeakBean，使用自定义的MemoryLeakBean是因为我们需要看下jvm内存的对象个数，而使用String,Long不容易看清楚。\n等待5秒开始gc，这样弱引用就会被释放，也就是ThreadLocal对象就没有了，然后我们线程里循环反射获取MemoryLeakBean对象。这个时候如果线程不释放，则MemoryLeakBean对象就一直存在，而线程池是一直存在的。我们看下执行结果\n\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101643315.png)\n可以看到ThreadLocal已经没有了，但是还是能获取到MemoryLeakBean\n我们使用jmap看下\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101645895.png)\n可以看到确实是有16个MemoryLeakBean对象还在。\n### 总结\nThreadLocal虽好，可不要贪杯哦。最后还是要安利一下kotlin","slug":"Java-ThreadLocal探秘","published":1,"updated":"2022-03-10T08:47:11.899Z","_id":"cl0koly5j00003s9gey21830b","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一个ThreadLocal的问题\"><a href=\"#一个ThreadLocal的问题\" class=\"headerlink\" title=\"一个ThreadLocal的问题\"></a>一个ThreadLocal的问题</h3><p>昨天面试，有被问到ThreadLocal如何跨线程传递数据，被问到知识盲区了，很是尴尬，自己确实没仔细看过ThreadLocal的代码，回来后赶紧抱起源码读了起来，读完之后，对ThreadLocal是即爱又怕，爱它能传递数据，并避免多线程安全问题，怕的是内存泄漏。</p>\n<h3 id=\"ThreadLocal例子1\"><a href=\"#ThreadLocal例子1\" class=\"headerlink\" title=\"ThreadLocal例子1\"></a>ThreadLocal例子1</h3><p>这个例子主要是演示，子线程内是获取不到主线程里设置的数据，代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get from ThreadLocal in child thread should be null\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个单元测试很简单，就是测一下主线程里设置一个值，子线程里取肯定是null，也就是取不到。这反而是TheadLocal的主要作用，就是隔离线程。</p>\n<h3 id=\"TheadLocal例子2\"><a href=\"#TheadLocal例子2\" class=\"headerlink\" title=\"TheadLocal例子2\"></a>TheadLocal例子2</h3><p>这个例子就是演示如何跨线程获取数据，也就是我被问到的那个问题如何实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testInheritableThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InheritableThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthreadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get from InheritableThreadLocal in child thread should be equals\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码一样很简单，只需要使用InheritableThreadLocal的实现类即可。<br>那原理是什么呢？那就要深入浅出源码了。</p>\n<h3 id=\"源码解读\"><a href=\"#源码解读\" class=\"headerlink\" title=\"源码解读\"></a>源码解读</h3><p>先看下ThreadLocal的set方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">ThreadLocalMap</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>threadLocals<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        t<span class=\"token punctuation\">.</span>threadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> firstKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span>INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> firstKey<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>INITIAL_CAPACITY <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>firstKey<span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setThreshold</span><span class=\"token punctuation\">(</span>INITIAL_CAPACITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> threadLocalHashCode <span class=\"token operator\">=</span> <span class=\"token function\">nextHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> HASH_INCREMENT <span class=\"token operator\">=</span> <span class=\"token number\">0x61c88647</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicInteger</span> nextHashCode <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> nextHashCode<span class=\"token punctuation\">.</span><span class=\"token function\">getAndAdd</span><span class=\"token punctuation\">(</span>HASH_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有2个关键信息</p>\n<ol>\n<li>第一次set的时候是直接new ThreadLocalMap初始化放进去的</li>\n<li>我们的value是放到ThreadLocalMap里的，而ThreadLocalMap是当前线程的一个属性threadLocals<br>那关键点就在ThreadLocalMap类上了，看下它的set方法，注意<code>map.set(this, value);</code>,这个this是ThreadLocal</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n         e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n         e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token function\">nextIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">replaceStaleEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">cleanSomeSlots</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> sz <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我去掉了注释，代码略微有点复杂了，但是我们现在只关注主线，就是value到底存到哪了？<br>首先和table属性有关，它是一个Entry数组，默认初始化的时候是16大小，然后遍历这个数组,找到Entry的key和当前ThreadLocal一致的元素，然后把value放进去，如果没找到就直接new一个放到table数组的i位置。<br>而i的取值又和ThreadLocal的threadLocalHashCode有关，并且每实例化一个ThreadLocal都会递增。<br>注意Entry是一个弱引用类型</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/** The value associated with this ThreadLocal. */</span>\n    <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这也就解释了普通TheadLocal为什么跨线程获取不到数据，因为数据是在每个线程实例里的，而key又和每个ThreadLocal有关，因为我们可能使用多个ThreadLocal保存多个对象。</p>\n<h3 id=\"如何实现父子之间传递\"><a href=\"#如何实现父子之间传递\" class=\"headerlink\" title=\"如何实现父子之间传递\"></a>如何实现父子之间传递</h3><p>我们看下Thread的init方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadGroup</span> g<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Runnable</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> stackSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> stackSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>不得不吐槽Java不支持参数命名这个机制，kotlin就很好的支持了这个特性，在调用的时候很清楚的表达了传递的参数是什么含义。<br>看下例子</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> NameParam <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">namedParams</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> sex<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//可以有默认值</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">NameParam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">namedParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//不使用命名参数，按顺序赋值，默认年龄0，可以不传值</span>\n    <span class=\"token function\">NameParam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">namedParams</span><span class=\"token punctuation\">(</span>sex <span class=\"token operator\">=</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"me\"</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用命名参数，清晰明了</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>嗯，kotlin就是那种，一旦你使用过，就爱上的那种。毕竟是我jetbrains出品,被Google认作亲儿子的语言<br>好了，回到Java。。。。。。。，我得上图<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101617305.png\"><br>重点代码我都标了，也就是如果想父子线程传递，就需要使用inheritableThreadLocals而不是threadLocals<br>那我们再看下InheritableThreadLocal类的代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InheritableThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">T</span> <span class=\"token function\">childValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> parentValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> parentValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token class-name\">ThreadLocalMap</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>inheritableThreadLocals<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        t<span class=\"token punctuation\">.</span>inheritableThreadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>嗯，重写了关键方法createMap和getMap，这下串起来了吧，所以使用InheritableThreadLocal就使用了inheritableThreadLocals，而线程初始化的时候，又会根据inheritableThreadLocals判断是否复制当前线程的inheritableThreadLocals</p>\n<h3 id=\"可能的内存泄漏\"><a href=\"#可能的内存泄漏\" class=\"headerlink\" title=\"可能的内存泄漏\"></a>可能的内存泄漏</h3><p>我们直接上代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemoryLeakBean</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemoryLeakBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"MemoryLeakBean\"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> THREAD <span class=\"token operator\">=</span> <span class=\"token string\">\"Thread\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token annotation punctuation\">@Ignore</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMemoryLeakWithThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemoryLeakBean</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// now we start 16 thread without remove thread local</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>THREAD <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryLeakBean</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">reflect</span><span class=\"token punctuation\">(</span>threadLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reflect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">></span></span> threadLocal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Field</span> threadLocalsField <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        threadLocalsField <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadLocals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        threadLocalsField<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> threadLocals <span class=\"token operator\">=</span> threadLocalsField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocals <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Field</span> table <span class=\"token operator\">=</span> threadLocals<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        table<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> entries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>threadLocals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> entry <span class=\"token operator\">:</span> entries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">Field</span> value <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            value<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"'s entries values is \"</span> <span class=\"token operator\">+</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//我们只需要挑一个线程打印一次就行</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>THREAD <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after gc threadLocal is null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解释一下，首先使用弱引用创建ThreadLocal，然后使用线程池启动16个线程，分别设置MemoryLeakBean，使用自定义的MemoryLeakBean是因为我们需要看下jvm内存的对象个数，而使用String,Long不容易看清楚。<br>等待5秒开始gc，这样弱引用就会被释放，也就是ThreadLocal对象就没有了，然后我们线程里循环反射获取MemoryLeakBean对象。这个时候如果线程不释放，则MemoryLeakBean对象就一直存在，而线程池是一直存在的。我们看下执行结果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101643315.png\"><br>可以看到ThreadLocal已经没有了，但是还是能获取到MemoryLeakBean<br>我们使用jmap看下<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101645895.png\"><br>可以看到确实是有16个MemoryLeakBean对象还在。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>ThreadLocal虽好，可不要贪杯哦。最后还是要安利一下kotlin</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一个ThreadLocal的问题\"><a href=\"#一个ThreadLocal的问题\" class=\"headerlink\" title=\"一个ThreadLocal的问题\"></a>一个ThreadLocal的问题</h3><p>昨天面试，有被问到ThreadLocal如何跨线程传递数据，被问到知识盲区了，很是尴尬，自己确实没仔细看过ThreadLocal的代码，回来后赶紧抱起源码读了起来，读完之后，对ThreadLocal是即爱又怕，爱它能传递数据，并避免多线程安全问题，怕的是内存泄漏。</p>\n<h3 id=\"ThreadLocal例子1\"><a href=\"#ThreadLocal例子1\" class=\"headerlink\" title=\"ThreadLocal例子1\"></a>ThreadLocal例子1</h3><p>这个例子主要是演示，子线程内是获取不到主线程里设置的数据，代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get from ThreadLocal in child thread should be null\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个单元测试很简单，就是测一下主线程里设置一个值，子线程里取肯定是null，也就是取不到。这反而是TheadLocal的主要作用，就是隔离线程。</p>\n<h3 id=\"TheadLocal例子2\"><a href=\"#TheadLocal例子2\" class=\"headerlink\" title=\"TheadLocal例子2\"></a>TheadLocal例子2</h3><p>这个例子就是演示如何跨线程获取数据，也就是我被问到的那个问题如何实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testInheritableThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InheritableThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthreadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get from InheritableThreadLocal in child thread should be equals\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码一样很简单，只需要使用InheritableThreadLocal的实现类即可。<br>那原理是什么呢？那就要深入浅出源码了。</p>\n<h3 id=\"源码解读\"><a href=\"#源码解读\" class=\"headerlink\" title=\"源码解读\"></a>源码解读</h3><p>先看下ThreadLocal的set方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">ThreadLocalMap</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>threadLocals<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        t<span class=\"token punctuation\">.</span>threadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> firstKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span>INITIAL_CAPACITY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> firstKey<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>INITIAL_CAPACITY <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>firstKey<span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setThreshold</span><span class=\"token punctuation\">(</span>INITIAL_CAPACITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> threadLocalHashCode <span class=\"token operator\">=</span> <span class=\"token function\">nextHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> HASH_INCREMENT <span class=\"token operator\">=</span> <span class=\"token number\">0x61c88647</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicInteger</span> nextHashCode <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextHashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> nextHashCode<span class=\"token punctuation\">.</span><span class=\"token function\">getAndAdd</span><span class=\"token punctuation\">(</span>HASH_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有2个关键信息</p>\n<ol>\n<li>第一次set的时候是直接new ThreadLocalMap初始化放进去的</li>\n<li>我们的value是放到ThreadLocalMap里的，而ThreadLocalMap是当前线程的一个属性threadLocals<br>那关键点就在ThreadLocalMap类上了，看下它的set方法，注意<code>map.set(this, value);</code>,这个this是ThreadLocal</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n         e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n         e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token function\">nextIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">replaceStaleEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">cleanSomeSlots</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> sz <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我去掉了注释，代码略微有点复杂了，但是我们现在只关注主线，就是value到底存到哪了？<br>首先和table属性有关，它是一个Entry数组，默认初始化的时候是16大小，然后遍历这个数组,找到Entry的key和当前ThreadLocal一致的元素，然后把value放进去，如果没找到就直接new一个放到table数组的i位置。<br>而i的取值又和ThreadLocal的threadLocalHashCode有关，并且每实例化一个ThreadLocal都会递增。<br>注意Entry是一个弱引用类型</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/** The value associated with this ThreadLocal. */</span>\n    <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这也就解释了普通TheadLocal为什么跨线程获取不到数据，因为数据是在每个线程实例里的，而key又和每个ThreadLocal有关，因为我们可能使用多个ThreadLocal保存多个对象。</p>\n<h3 id=\"如何实现父子之间传递\"><a href=\"#如何实现父子之间传递\" class=\"headerlink\" title=\"如何实现父子之间传递\"></a>如何实现父子之间传递</h3><p>我们看下Thread的init方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadGroup</span> g<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Runnable</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> stackSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> stackSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>不得不吐槽Java不支持参数命名这个机制，kotlin就很好的支持了这个特性，在调用的时候很清楚的表达了传递的参数是什么含义。<br>看下例子</p>\n<pre class=\"line-numbers language-kotlin\" data-language=\"kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> NameParam <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">namedParams</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> sex<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//可以有默认值</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">NameParam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">namedParams</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//不使用命名参数，按顺序赋值，默认年龄0，可以不传值</span>\n    <span class=\"token function\">NameParam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">namedParams</span><span class=\"token punctuation\">(</span>sex <span class=\"token operator\">=</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"me\"</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用命名参数，清晰明了</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>嗯，kotlin就是那种，一旦你使用过，就爱上的那种。毕竟是我jetbrains出品,被Google认作亲儿子的语言<br>好了，回到Java。。。。。。。，我得上图<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101617305.png\"><br>重点代码我都标了，也就是如果想父子线程传递，就需要使用inheritableThreadLocals而不是threadLocals<br>那我们再看下InheritableThreadLocal类的代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InheritableThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">T</span> <span class=\"token function\">childValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> parentValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> parentValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token class-name\">ThreadLocalMap</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span>inheritableThreadLocals<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        t<span class=\"token punctuation\">.</span>inheritableThreadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>嗯，重写了关键方法createMap和getMap，这下串起来了吧，所以使用InheritableThreadLocal就使用了inheritableThreadLocals，而线程初始化的时候，又会根据inheritableThreadLocals判断是否复制当前线程的inheritableThreadLocals</p>\n<h3 id=\"可能的内存泄漏\"><a href=\"#可能的内存泄漏\" class=\"headerlink\" title=\"可能的内存泄漏\"></a>可能的内存泄漏</h3><p>我们直接上代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemoryLeakBean</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MemoryLeakBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"MemoryLeakBean\"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> THREAD <span class=\"token operator\">=</span> <span class=\"token string\">\"Thread\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token annotation punctuation\">@Ignore</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMemoryLeakWithThreadLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemoryLeakBean</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// now we start 16 thread without remove thread local</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>THREAD <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryLeakBean</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">reflect</span><span class=\"token punctuation\">(</span>threadLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reflect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">></span></span> threadLocal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Field</span> threadLocalsField <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        threadLocalsField <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadLocals\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        threadLocalsField<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> threadLocals <span class=\"token operator\">=</span> threadLocalsField<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocals <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Field</span> table <span class=\"token operator\">=</span> threadLocals<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        table<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> entries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>threadLocals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> entry <span class=\"token operator\">:</span> entries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">Field</span> value <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            value<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"'s entries values is \"</span> <span class=\"token operator\">+</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//我们只需要挑一个线程打印一次就行</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>THREAD <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after gc threadLocal is null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解释一下，首先使用弱引用创建ThreadLocal，然后使用线程池启动16个线程，分别设置MemoryLeakBean，使用自定义的MemoryLeakBean是因为我们需要看下jvm内存的对象个数，而使用String,Long不容易看清楚。<br>等待5秒开始gc，这样弱引用就会被释放，也就是ThreadLocal对象就没有了，然后我们线程里循环反射获取MemoryLeakBean对象。这个时候如果线程不释放，则MemoryLeakBean对象就一直存在，而线程池是一直存在的。我们看下执行结果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101643315.png\"><br>可以看到ThreadLocal已经没有了，但是还是能获取到MemoryLeakBean<br>我们使用jmap看下<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203101645895.png\"><br>可以看到确实是有16个MemoryLeakBean对象还在。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>ThreadLocal虽好，可不要贪杯哦。最后还是要安利一下kotlin</p>\n"},{"title":"死磕Redis之数据类型","author":"王登武","date":"2022-03-15T03:36:56.000Z","_content":"### Redis数据类型\nRedis之所以很流行，除了作为集中式缓存之外，还因为其提供了丰富的数据类型，我们看下都有哪些数据类型。\n对外的API数据类型主要有以下几种：\n\n* String\n* List\n* Hash\n* Set\n* Sorted Set\n\n而对应的底层数据结构则有\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181617189.png)\n### Redis的Key-Value存储结构\n我们知道Redis是通过Key来操作Value的，那Key-Value的对应关系又是怎么样的呢，如何快速通过key找到对应的value呢\n![图片来源-极客时间-Redis核心技术与实践](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151254812.png)\n既然是使用哈希表的方式，当KEY比较多的时候，必然会出现哈希冲突的情况，那如果有哈希冲突，redis是如何处理的呢。\n![图片来源-极客时间-Redis核心技术与实践](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151518362.png)\n首先使用链式哈希解决哈希冲突，但是如果链式长度过长，也会导致性能下降，则Redis会进行一次渐进式rehash操作。\n![图片来源-极客时间-Redis核心技术与实践](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181217176.png)\n其实不止因为哈希冲突会扩充全局哈希表，随着Key的增多，容量不够时一样会进行扩充全局哈希表，我们来看下日志。\n首先修改日志级别为verbose和设置日志文件\n\n``` \nloglevel verbose\nlogfile \"/usr/local/etc/redis/redis.log\"\n```\n执行Set命令后可以看到日志如下：\n```\n1:C 17 Mar 2022 15:26:59.612 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n1:C 17 Mar 2022 15:26:59.612 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started\n1:C 17 Mar 2022 15:26:59.612 # Configuration loaded\n1:M 17 Mar 2022 15:26:59.613 * monotonic clock: POSIX clock_gettime\n1:M 17 Mar 2022 15:26:59.613 * Running mode=standalone, port=6379.\n1:M 17 Mar 2022 15:26:59.613 # Server initialized\n1:M 17 Mar 2022 15:26:59.613 * Ready to accept connections\n1:M 17 Mar 2022 15:28:52.452 - Accepted 127.0.0.1:49086\n1:M 17 Mar 2022 15:29:24.969 - DB 0: 1 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:29.980 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:34.993 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:40.005 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:45.018 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:50.030 - DB 0: 3 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:55.042 - DB 0: 3 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:00.053 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:05.066 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:10.079 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:15.091 - DB 0: 5 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:30:20.104 - DB 0: 6 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:32:55.475 - DB 0: 7 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:33:00.488 - DB 0: 9 keys (0 volatile) in 16 slots HT.\n1:M 17 Mar 2022 15:33:05.498 - DB 0: 10 keys (0 volatile) in 16 slots HT.\n```\n有些重复的日志我删掉了，可以看到初始化是4个slots，后续扩容都会翻倍。\n### dictEntry\n全局哈希表里存储的具体对象是dictEntry，具体结构是什么样的呢？\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181350496.png)\n以Set hello world指令举例，属性key即设置的hello，指向sds（Simple Dynamic String）类型\n属性val指向redisObject类型,而next即哈希冲突的拉链，指向下一个entry\n### redisObject\n\nRedis中的每个对象底层的数据结构都是redisObject结构体\n* type\t:记录redis的对象类型\n* encoding:记录底层编码，即使用哪种数据结构保存数据\n* lru:和缓存淘汰相关\n* refcount:对象被引用的次数\n* ptr:指向底层数据结构的指针\ntype记录值的类型，即string,list,set,hash,zset,包括后续新增的stream,geo,bitmap等新的类型\n\n```\n127.0.0.1:6379> SET hello world\nOK\n127.0.0.1:6379> type hello\nstring\n127.0.0.1:6379> LPUSH list 1\n(integer) 1\n127.0.0.1:6379> type list\nlist\n127.0.0.1:6379> SADD set 1\n(integer) 1\n127.0.0.1:6379> type set\nset\n127.0.0.1:6379> HSET hash hello world\n(integer) 1\n127.0.0.1:6379> type hash\nhash\n127.0.0.1:6379> ZADD zset 1 hello\n(integer) 1\n127.0.0.1:6379> type zset\nzset\n```\nencoding即底层存储数据结构，可以使用object encoding key来确定encoding的类型\n\n```\n127.0.0.1:6379> object encoding hello\n\"embstr\"\n127.0.0.1:6379> object encoding 1\n\"int\"\n127.0.0.1:6379> object encoding list\n\"quicklist\"\n127.0.0.1:6379> object encoding set\n\"intset\"\n127.0.0.1:6379> object encoding hash\n\"ziplist\"\n127.0.0.1:6379> object encoding zset\n\"ziplist\"\n```\n具体每个type对应的encoding如下：\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181516759.png)\n\n### 字符串类型\nRedis没有使用c语言的字符串，而是自己写了一个，并且做了优化，会根据字符串的长度的不同使用不同的类型以减小内存占用。\n每个类型大体上都有以下属性：\n* len:字符串长度\n* alloc:分配的空间长度\n* flags:标识类型\n* buf[]:字符数组\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181424818.png)\n在sdshdr5中将类型放到了flags的前3个字节中（3个字节能保存6种类型，所以3个字节足够了），后5个字节用来保存字符的长度。因为sdshdr5取消了alloc字段，因此也不会进行空间预分配\n当存储的val为数字类型时，则直接使用整数来保存这个字符串，也就是redisObject里的属性val，直接存数字，这也是type是int的由来。\n当字符串的长度小于等于44字节时，redisObject和sds一起分配内存。当字符串大于44字节时，才对redisObject分配一次内存，对sds分配一次内存\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181527532.png)\n\n##### 为什么以44字节为界限？\n\nredisObject：16个字节  \nSDS：sdshdr8（3个字节）+ SDS 字符数组（N字节 + \\0结束符 1个字节）\nRedis规定嵌入式字符串最大以64字节存储，所以N=64-16-3-1=44 \n\n##### 为什么嵌入式字符串最大以64字节存储？\n因为在x86体系下，一般的缓存行大小是63字节，redis能一次加载完成\n\n```\n127.0.0.1:6379> SET hello world\nOK\n127.0.0.1:6379> object encoding hello\n\"embstr\"\n127.0.0.1:6379> SET hello 01234567890123456789012345678901234567890123\nOK\n127.0.0.1:6379> object encoding hello\n\"embstr\"\n127.0.0.1:6379> SET hello 012345678901234567890123456789012345678901234\nOK\n127.0.0.1:6379> object encoding hello\n\"raw\"\n```\n\n### ziplist数据结构\n由于ziplist数据结构几乎在所有集合都用到了，需要先介绍一下ziplist\n压缩列表实际上类似于一个数组，数组中的每一个元素都对应保存一个数据。和数组不同的是，压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181539390.png)\n\n### List类型\nlist类型现在是直接使用quicklist实现的\nquicklist是一个双向链表，链表中每个节点是一个ziplist\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181541836.png)\n\n### Hash类型\n元素比较少时用ziplist来存储，当元素比较多时用hash来存储\n元素比较少时\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545270.png)\n元素比较多时\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545806.png)\n\n```\n127.0.0.1:6379> HSET hash hello world\n(integer) 0\n127.0.0.1:6379> object encoding hash\n\"ziplist\"\n127.0.0.1:6379> HSET hash hello worldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworld\n(integer) 0\n127.0.0.1:6379> object encoding hash\n\"hashtable\"\n```\n### Set类型\n当元素不多，且元素都为整数时，set的底层实现为intset，否则为dict\nintset\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181551344.png)\nhashtable\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181552477.png)\n```\n127.0.0.1:6379> object encoding set\n\"intset\"\n127.0.0.1:6379> SADD set hello\n(integer) 1\n127.0.0.1:6379> object encoding set\n\"hashtable\"\n```\n### zset类型\nzset当元素较少时会使用ziplist来存储\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181557617.png)\nzset当元素较多时使用dict+skiplist来存储\ndict保存了数据到分数的映射关系，skiplist用来根据分数查询数据\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181559381.png)\n\n### 总结\n\n* Redis对存储整数友好，可以压缩内存使用且存取效率高\n* String不超过44长度性能最优，否则会使用raw带来额外存取操作，使用数字类型效率最高。\n* 设置maxmemory，防止rdb时子进程写快照时的内存暴涨，即便停用rdb，使用slave时也会有一次rdb同步，导致内存暴涨，建议一个master不要超过2个slave。\n* 设置内存淘汰策略，防止内存不够导致的异常\n* 避免大KEY，hashtable结构遍历很耗时，尽量使用scan获取大量数据，而不是getall\n","source":"_posts/死磕Redis之数据类型.md","raw":"---\ntitle: 死磕Redis之数据类型\nauthor: 王登武\ndate: 2022-03-15 11:36:56\ncategories:\n- 死磕Redis\ntags:\n- redis\n- 分布式缓存\n---\n### Redis数据类型\nRedis之所以很流行，除了作为集中式缓存之外，还因为其提供了丰富的数据类型，我们看下都有哪些数据类型。\n对外的API数据类型主要有以下几种：\n\n* String\n* List\n* Hash\n* Set\n* Sorted Set\n\n而对应的底层数据结构则有\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181617189.png)\n### Redis的Key-Value存储结构\n我们知道Redis是通过Key来操作Value的，那Key-Value的对应关系又是怎么样的呢，如何快速通过key找到对应的value呢\n![图片来源-极客时间-Redis核心技术与实践](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151254812.png)\n既然是使用哈希表的方式，当KEY比较多的时候，必然会出现哈希冲突的情况，那如果有哈希冲突，redis是如何处理的呢。\n![图片来源-极客时间-Redis核心技术与实践](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151518362.png)\n首先使用链式哈希解决哈希冲突，但是如果链式长度过长，也会导致性能下降，则Redis会进行一次渐进式rehash操作。\n![图片来源-极客时间-Redis核心技术与实践](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181217176.png)\n其实不止因为哈希冲突会扩充全局哈希表，随着Key的增多，容量不够时一样会进行扩充全局哈希表，我们来看下日志。\n首先修改日志级别为verbose和设置日志文件\n\n``` \nloglevel verbose\nlogfile \"/usr/local/etc/redis/redis.log\"\n```\n执行Set命令后可以看到日志如下：\n```\n1:C 17 Mar 2022 15:26:59.612 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n1:C 17 Mar 2022 15:26:59.612 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started\n1:C 17 Mar 2022 15:26:59.612 # Configuration loaded\n1:M 17 Mar 2022 15:26:59.613 * monotonic clock: POSIX clock_gettime\n1:M 17 Mar 2022 15:26:59.613 * Running mode=standalone, port=6379.\n1:M 17 Mar 2022 15:26:59.613 # Server initialized\n1:M 17 Mar 2022 15:26:59.613 * Ready to accept connections\n1:M 17 Mar 2022 15:28:52.452 - Accepted 127.0.0.1:49086\n1:M 17 Mar 2022 15:29:24.969 - DB 0: 1 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:29.980 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:34.993 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:40.005 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:45.018 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:50.030 - DB 0: 3 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:55.042 - DB 0: 3 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:00.053 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:05.066 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:10.079 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:15.091 - DB 0: 5 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:30:20.104 - DB 0: 6 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:32:55.475 - DB 0: 7 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:33:00.488 - DB 0: 9 keys (0 volatile) in 16 slots HT.\n1:M 17 Mar 2022 15:33:05.498 - DB 0: 10 keys (0 volatile) in 16 slots HT.\n```\n有些重复的日志我删掉了，可以看到初始化是4个slots，后续扩容都会翻倍。\n### dictEntry\n全局哈希表里存储的具体对象是dictEntry，具体结构是什么样的呢？\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181350496.png)\n以Set hello world指令举例，属性key即设置的hello，指向sds（Simple Dynamic String）类型\n属性val指向redisObject类型,而next即哈希冲突的拉链，指向下一个entry\n### redisObject\n\nRedis中的每个对象底层的数据结构都是redisObject结构体\n* type\t:记录redis的对象类型\n* encoding:记录底层编码，即使用哪种数据结构保存数据\n* lru:和缓存淘汰相关\n* refcount:对象被引用的次数\n* ptr:指向底层数据结构的指针\ntype记录值的类型，即string,list,set,hash,zset,包括后续新增的stream,geo,bitmap等新的类型\n\n```\n127.0.0.1:6379> SET hello world\nOK\n127.0.0.1:6379> type hello\nstring\n127.0.0.1:6379> LPUSH list 1\n(integer) 1\n127.0.0.1:6379> type list\nlist\n127.0.0.1:6379> SADD set 1\n(integer) 1\n127.0.0.1:6379> type set\nset\n127.0.0.1:6379> HSET hash hello world\n(integer) 1\n127.0.0.1:6379> type hash\nhash\n127.0.0.1:6379> ZADD zset 1 hello\n(integer) 1\n127.0.0.1:6379> type zset\nzset\n```\nencoding即底层存储数据结构，可以使用object encoding key来确定encoding的类型\n\n```\n127.0.0.1:6379> object encoding hello\n\"embstr\"\n127.0.0.1:6379> object encoding 1\n\"int\"\n127.0.0.1:6379> object encoding list\n\"quicklist\"\n127.0.0.1:6379> object encoding set\n\"intset\"\n127.0.0.1:6379> object encoding hash\n\"ziplist\"\n127.0.0.1:6379> object encoding zset\n\"ziplist\"\n```\n具体每个type对应的encoding如下：\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181516759.png)\n\n### 字符串类型\nRedis没有使用c语言的字符串，而是自己写了一个，并且做了优化，会根据字符串的长度的不同使用不同的类型以减小内存占用。\n每个类型大体上都有以下属性：\n* len:字符串长度\n* alloc:分配的空间长度\n* flags:标识类型\n* buf[]:字符数组\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181424818.png)\n在sdshdr5中将类型放到了flags的前3个字节中（3个字节能保存6种类型，所以3个字节足够了），后5个字节用来保存字符的长度。因为sdshdr5取消了alloc字段，因此也不会进行空间预分配\n当存储的val为数字类型时，则直接使用整数来保存这个字符串，也就是redisObject里的属性val，直接存数字，这也是type是int的由来。\n当字符串的长度小于等于44字节时，redisObject和sds一起分配内存。当字符串大于44字节时，才对redisObject分配一次内存，对sds分配一次内存\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181527532.png)\n\n##### 为什么以44字节为界限？\n\nredisObject：16个字节  \nSDS：sdshdr8（3个字节）+ SDS 字符数组（N字节 + \\0结束符 1个字节）\nRedis规定嵌入式字符串最大以64字节存储，所以N=64-16-3-1=44 \n\n##### 为什么嵌入式字符串最大以64字节存储？\n因为在x86体系下，一般的缓存行大小是63字节，redis能一次加载完成\n\n```\n127.0.0.1:6379> SET hello world\nOK\n127.0.0.1:6379> object encoding hello\n\"embstr\"\n127.0.0.1:6379> SET hello 01234567890123456789012345678901234567890123\nOK\n127.0.0.1:6379> object encoding hello\n\"embstr\"\n127.0.0.1:6379> SET hello 012345678901234567890123456789012345678901234\nOK\n127.0.0.1:6379> object encoding hello\n\"raw\"\n```\n\n### ziplist数据结构\n由于ziplist数据结构几乎在所有集合都用到了，需要先介绍一下ziplist\n压缩列表实际上类似于一个数组，数组中的每一个元素都对应保存一个数据。和数组不同的是，压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181539390.png)\n\n### List类型\nlist类型现在是直接使用quicklist实现的\nquicklist是一个双向链表，链表中每个节点是一个ziplist\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181541836.png)\n\n### Hash类型\n元素比较少时用ziplist来存储，当元素比较多时用hash来存储\n元素比较少时\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545270.png)\n元素比较多时\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545806.png)\n\n```\n127.0.0.1:6379> HSET hash hello world\n(integer) 0\n127.0.0.1:6379> object encoding hash\n\"ziplist\"\n127.0.0.1:6379> HSET hash hello worldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworld\n(integer) 0\n127.0.0.1:6379> object encoding hash\n\"hashtable\"\n```\n### Set类型\n当元素不多，且元素都为整数时，set的底层实现为intset，否则为dict\nintset\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181551344.png)\nhashtable\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181552477.png)\n```\n127.0.0.1:6379> object encoding set\n\"intset\"\n127.0.0.1:6379> SADD set hello\n(integer) 1\n127.0.0.1:6379> object encoding set\n\"hashtable\"\n```\n### zset类型\nzset当元素较少时会使用ziplist来存储\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181557617.png)\nzset当元素较多时使用dict+skiplist来存储\ndict保存了数据到分数的映射关系，skiplist用来根据分数查询数据\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181559381.png)\n\n### 总结\n\n* Redis对存储整数友好，可以压缩内存使用且存取效率高\n* String不超过44长度性能最优，否则会使用raw带来额外存取操作，使用数字类型效率最高。\n* 设置maxmemory，防止rdb时子进程写快照时的内存暴涨，即便停用rdb，使用slave时也会有一次rdb同步，导致内存暴涨，建议一个master不要超过2个slave。\n* 设置内存淘汰策略，防止内存不够导致的异常\n* 避免大KEY，hashtable结构遍历很耗时，尽量使用scan获取大量数据，而不是getall\n","slug":"死磕Redis之数据类型","published":1,"updated":"2022-04-15T01:33:42.033Z","_id":"cl0t9egek0000cv9gh539g8kr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Redis数据类型\"><a href=\"#Redis数据类型\" class=\"headerlink\" title=\"Redis数据类型\"></a>Redis数据类型</h3><p>Redis之所以很流行，除了作为集中式缓存之外，还因为其提供了丰富的数据类型，我们看下都有哪些数据类型。<br>对外的API数据类型主要有以下几种：</p>\n<ul>\n<li>String</li>\n<li>List</li>\n<li>Hash</li>\n<li>Set</li>\n<li>Sorted Set</li>\n</ul>\n<p>而对应的底层数据结构则有<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181617189.png\"></p>\n<h3 id=\"Redis的Key-Value存储结构\"><a href=\"#Redis的Key-Value存储结构\" class=\"headerlink\" title=\"Redis的Key-Value存储结构\"></a>Redis的Key-Value存储结构</h3><p>我们知道Redis是通过Key来操作Value的，那Key-Value的对应关系又是怎么样的呢，如何快速通过key找到对应的value呢<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151254812.png\" alt=\"图片来源-极客时间-Redis核心技术与实践\"><br>既然是使用哈希表的方式，当KEY比较多的时候，必然会出现哈希冲突的情况，那如果有哈希冲突，redis是如何处理的呢。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151518362.png\" alt=\"图片来源-极客时间-Redis核心技术与实践\"><br>首先使用链式哈希解决哈希冲突，但是如果链式长度过长，也会导致性能下降，则Redis会进行一次渐进式rehash操作。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181217176.png\" alt=\"图片来源-极客时间-Redis核心技术与实践\"><br>其实不止因为哈希冲突会扩充全局哈希表，随着Key的增多，容量不够时一样会进行扩充全局哈希表，我们来看下日志。<br>首先修改日志级别为verbose和设置日志文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">loglevel verbose\nlogfile &quot;&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.log&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>执行Set命令后可以看到日志如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1:C 17 Mar 2022 15:26:59.612 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n1:C 17 Mar 2022 15:26:59.612 # Redis version&#x3D;6.2.6, bits&#x3D;64, commit&#x3D;00000000, modified&#x3D;0, pid&#x3D;1, just started\n1:C 17 Mar 2022 15:26:59.612 # Configuration loaded\n1:M 17 Mar 2022 15:26:59.613 * monotonic clock: POSIX clock_gettime\n1:M 17 Mar 2022 15:26:59.613 * Running mode&#x3D;standalone, port&#x3D;6379.\n1:M 17 Mar 2022 15:26:59.613 # Server initialized\n1:M 17 Mar 2022 15:26:59.613 * Ready to accept connections\n1:M 17 Mar 2022 15:28:52.452 - Accepted 127.0.0.1:49086\n1:M 17 Mar 2022 15:29:24.969 - DB 0: 1 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:29.980 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:34.993 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:40.005 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:45.018 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:50.030 - DB 0: 3 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:55.042 - DB 0: 3 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:00.053 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:05.066 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:10.079 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:15.091 - DB 0: 5 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:30:20.104 - DB 0: 6 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:32:55.475 - DB 0: 7 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:33:00.488 - DB 0: 9 keys (0 volatile) in 16 slots HT.\n1:M 17 Mar 2022 15:33:05.498 - DB 0: 10 keys (0 volatile) in 16 slots HT.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有些重复的日志我删掉了，可以看到初始化是4个slots，后续扩容都会翻倍。</p>\n<h3 id=\"dictEntry\"><a href=\"#dictEntry\" class=\"headerlink\" title=\"dictEntry\"></a>dictEntry</h3><p>全局哈希表里存储的具体对象是dictEntry，具体结构是什么样的呢？<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181350496.png\"><br>以Set hello world指令举例，属性key即设置的hello，指向sds（Simple Dynamic String）类型<br>属性val指向redisObject类型,而next即哈希冲突的拉链，指向下一个entry</p>\n<h3 id=\"redisObject\"><a href=\"#redisObject\" class=\"headerlink\" title=\"redisObject\"></a>redisObject</h3><p>Redis中的每个对象底层的数据结构都是redisObject结构体</p>\n<ul>\n<li>type    :记录redis的对象类型</li>\n<li>encoding:记录底层编码，即使用哪种数据结构保存数据</li>\n<li>lru:和缓存淘汰相关</li>\n<li>refcount:对象被引用的次数</li>\n<li>ptr:指向底层数据结构的指针<br>type记录值的类型，即string,list,set,hash,zset,包括后续新增的stream,geo,bitmap等新的类型</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; SET hello world\nOK\n127.0.0.1:6379&gt; type hello\nstring\n127.0.0.1:6379&gt; LPUSH list 1\n(integer) 1\n127.0.0.1:6379&gt; type list\nlist\n127.0.0.1:6379&gt; SADD set 1\n(integer) 1\n127.0.0.1:6379&gt; type set\nset\n127.0.0.1:6379&gt; HSET hash hello world\n(integer) 1\n127.0.0.1:6379&gt; type hash\nhash\n127.0.0.1:6379&gt; ZADD zset 1 hello\n(integer) 1\n127.0.0.1:6379&gt; type zset\nzset<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>encoding即底层存储数据结构，可以使用object encoding key来确定encoding的类型</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; object encoding hello\n&quot;embstr&quot;\n127.0.0.1:6379&gt; object encoding 1\n&quot;int&quot;\n127.0.0.1:6379&gt; object encoding list\n&quot;quicklist&quot;\n127.0.0.1:6379&gt; object encoding set\n&quot;intset&quot;\n127.0.0.1:6379&gt; object encoding hash\n&quot;ziplist&quot;\n127.0.0.1:6379&gt; object encoding zset\n&quot;ziplist&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>具体每个type对应的encoding如下：<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181516759.png\"></p>\n<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><p>Redis没有使用c语言的字符串，而是自己写了一个，并且做了优化，会根据字符串的长度的不同使用不同的类型以减小内存占用。<br>每个类型大体上都有以下属性：</p>\n<ul>\n<li>len:字符串长度</li>\n<li>alloc:分配的空间长度</li>\n<li>flags:标识类型</li>\n<li>buf[]:字符数组<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181424818.png\"><br>在sdshdr5中将类型放到了flags的前3个字节中（3个字节能保存6种类型，所以3个字节足够了），后5个字节用来保存字符的长度。因为sdshdr5取消了alloc字段，因此也不会进行空间预分配<br>当存储的val为数字类型时，则直接使用整数来保存这个字符串，也就是redisObject里的属性val，直接存数字，这也是type是int的由来。<br>当字符串的长度小于等于44字节时，redisObject和sds一起分配内存。当字符串大于44字节时，才对redisObject分配一次内存，对sds分配一次内存<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181527532.png\"></li>\n</ul>\n<h5 id=\"为什么以44字节为界限？\"><a href=\"#为什么以44字节为界限？\" class=\"headerlink\" title=\"为什么以44字节为界限？\"></a>为什么以44字节为界限？</h5><p>redisObject：16个字节<br>SDS：sdshdr8（3个字节）+ SDS 字符数组（N字节 + \\0结束符 1个字节）<br>Redis规定嵌入式字符串最大以64字节存储，所以N=64-16-3-1=44 </p>\n<h5 id=\"为什么嵌入式字符串最大以64字节存储？\"><a href=\"#为什么嵌入式字符串最大以64字节存储？\" class=\"headerlink\" title=\"为什么嵌入式字符串最大以64字节存储？\"></a>为什么嵌入式字符串最大以64字节存储？</h5><p>因为在x86体系下，一般的缓存行大小是63字节，redis能一次加载完成</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; SET hello world\nOK\n127.0.0.1:6379&gt; object encoding hello\n&quot;embstr&quot;\n127.0.0.1:6379&gt; SET hello 01234567890123456789012345678901234567890123\nOK\n127.0.0.1:6379&gt; object encoding hello\n&quot;embstr&quot;\n127.0.0.1:6379&gt; SET hello 012345678901234567890123456789012345678901234\nOK\n127.0.0.1:6379&gt; object encoding hello\n&quot;raw&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ziplist数据结构\"><a href=\"#ziplist数据结构\" class=\"headerlink\" title=\"ziplist数据结构\"></a>ziplist数据结构</h3><p>由于ziplist数据结构几乎在所有集合都用到了，需要先介绍一下ziplist<br>压缩列表实际上类似于一个数组，数组中的每一个元素都对应保存一个数据。和数组不同的是，压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181539390.png\"></p>\n<h3 id=\"List类型\"><a href=\"#List类型\" class=\"headerlink\" title=\"List类型\"></a>List类型</h3><p>list类型现在是直接使用quicklist实现的<br>quicklist是一个双向链表，链表中每个节点是一个ziplist<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181541836.png\"></p>\n<h3 id=\"Hash类型\"><a href=\"#Hash类型\" class=\"headerlink\" title=\"Hash类型\"></a>Hash类型</h3><p>元素比较少时用ziplist来存储，当元素比较多时用hash来存储<br>元素比较少时<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545270.png\"><br>元素比较多时<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545806.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; HSET hash hello world\n(integer) 0\n127.0.0.1:6379&gt; object encoding hash\n&quot;ziplist&quot;\n127.0.0.1:6379&gt; HSET hash hello worldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworld\n(integer) 0\n127.0.0.1:6379&gt; object encoding hash\n&quot;hashtable&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Set类型\"><a href=\"#Set类型\" class=\"headerlink\" title=\"Set类型\"></a>Set类型</h3><p>当元素不多，且元素都为整数时，set的底层实现为intset，否则为dict<br>intset<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181551344.png\"><br>hashtable<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181552477.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; object encoding set\n&quot;intset&quot;\n127.0.0.1:6379&gt; SADD set hello\n(integer) 1\n127.0.0.1:6379&gt; object encoding set\n&quot;hashtable&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"zset类型\"><a href=\"#zset类型\" class=\"headerlink\" title=\"zset类型\"></a>zset类型</h3><p>zset当元素较少时会使用ziplist来存储<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181557617.png\"><br>zset当元素较多时使用dict+skiplist来存储<br>dict保存了数据到分数的映射关系，skiplist用来根据分数查询数据<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181559381.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Redis对存储整数友好，可以压缩内存使用且存取效率高</li>\n<li>String不超过44长度性能最优，否则会使用raw带来额外存取操作，使用数字类型效率最高。</li>\n<li>设置maxmemory，防止rdb时子进程写快照时的内存暴涨，即便停用rdb，使用slave时也会有一次rdb同步，导致内存暴涨，建议一个master不要超过2个slave。</li>\n<li>设置内存淘汰策略，防止内存不够导致的异常</li>\n<li>避免大KEY，hashtable结构遍历很耗时，尽量使用scan获取大量数据，而不是getall</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Redis数据类型\"><a href=\"#Redis数据类型\" class=\"headerlink\" title=\"Redis数据类型\"></a>Redis数据类型</h3><p>Redis之所以很流行，除了作为集中式缓存之外，还因为其提供了丰富的数据类型，我们看下都有哪些数据类型。<br>对外的API数据类型主要有以下几种：</p>\n<ul>\n<li>String</li>\n<li>List</li>\n<li>Hash</li>\n<li>Set</li>\n<li>Sorted Set</li>\n</ul>\n<p>而对应的底层数据结构则有<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181617189.png\"></p>\n<h3 id=\"Redis的Key-Value存储结构\"><a href=\"#Redis的Key-Value存储结构\" class=\"headerlink\" title=\"Redis的Key-Value存储结构\"></a>Redis的Key-Value存储结构</h3><p>我们知道Redis是通过Key来操作Value的，那Key-Value的对应关系又是怎么样的呢，如何快速通过key找到对应的value呢<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151254812.png\" alt=\"图片来源-极客时间-Redis核心技术与实践\"><br>既然是使用哈希表的方式，当KEY比较多的时候，必然会出现哈希冲突的情况，那如果有哈希冲突，redis是如何处理的呢。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203151518362.png\" alt=\"图片来源-极客时间-Redis核心技术与实践\"><br>首先使用链式哈希解决哈希冲突，但是如果链式长度过长，也会导致性能下降，则Redis会进行一次渐进式rehash操作。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181217176.png\" alt=\"图片来源-极客时间-Redis核心技术与实践\"><br>其实不止因为哈希冲突会扩充全局哈希表，随着Key的增多，容量不够时一样会进行扩充全局哈希表，我们来看下日志。<br>首先修改日志级别为verbose和设置日志文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">loglevel verbose\nlogfile &quot;&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.log&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>执行Set命令后可以看到日志如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1:C 17 Mar 2022 15:26:59.612 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n1:C 17 Mar 2022 15:26:59.612 # Redis version&#x3D;6.2.6, bits&#x3D;64, commit&#x3D;00000000, modified&#x3D;0, pid&#x3D;1, just started\n1:C 17 Mar 2022 15:26:59.612 # Configuration loaded\n1:M 17 Mar 2022 15:26:59.613 * monotonic clock: POSIX clock_gettime\n1:M 17 Mar 2022 15:26:59.613 * Running mode&#x3D;standalone, port&#x3D;6379.\n1:M 17 Mar 2022 15:26:59.613 # Server initialized\n1:M 17 Mar 2022 15:26:59.613 * Ready to accept connections\n1:M 17 Mar 2022 15:28:52.452 - Accepted 127.0.0.1:49086\n1:M 17 Mar 2022 15:29:24.969 - DB 0: 1 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:29.980 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:34.993 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:40.005 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:45.018 - DB 0: 2 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:50.030 - DB 0: 3 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:29:55.042 - DB 0: 3 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:00.053 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:05.066 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:10.079 - DB 0: 4 keys (0 volatile) in 4 slots HT.\n1:M 17 Mar 2022 15:30:15.091 - DB 0: 5 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:30:20.104 - DB 0: 6 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:32:55.475 - DB 0: 7 keys (0 volatile) in 8 slots HT.\n1:M 17 Mar 2022 15:33:00.488 - DB 0: 9 keys (0 volatile) in 16 slots HT.\n1:M 17 Mar 2022 15:33:05.498 - DB 0: 10 keys (0 volatile) in 16 slots HT.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有些重复的日志我删掉了，可以看到初始化是4个slots，后续扩容都会翻倍。</p>\n<h3 id=\"dictEntry\"><a href=\"#dictEntry\" class=\"headerlink\" title=\"dictEntry\"></a>dictEntry</h3><p>全局哈希表里存储的具体对象是dictEntry，具体结构是什么样的呢？<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181350496.png\"><br>以Set hello world指令举例，属性key即设置的hello，指向sds（Simple Dynamic String）类型<br>属性val指向redisObject类型,而next即哈希冲突的拉链，指向下一个entry</p>\n<h3 id=\"redisObject\"><a href=\"#redisObject\" class=\"headerlink\" title=\"redisObject\"></a>redisObject</h3><p>Redis中的每个对象底层的数据结构都是redisObject结构体</p>\n<ul>\n<li>type    :记录redis的对象类型</li>\n<li>encoding:记录底层编码，即使用哪种数据结构保存数据</li>\n<li>lru:和缓存淘汰相关</li>\n<li>refcount:对象被引用的次数</li>\n<li>ptr:指向底层数据结构的指针<br>type记录值的类型，即string,list,set,hash,zset,包括后续新增的stream,geo,bitmap等新的类型</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; SET hello world\nOK\n127.0.0.1:6379&gt; type hello\nstring\n127.0.0.1:6379&gt; LPUSH list 1\n(integer) 1\n127.0.0.1:6379&gt; type list\nlist\n127.0.0.1:6379&gt; SADD set 1\n(integer) 1\n127.0.0.1:6379&gt; type set\nset\n127.0.0.1:6379&gt; HSET hash hello world\n(integer) 1\n127.0.0.1:6379&gt; type hash\nhash\n127.0.0.1:6379&gt; ZADD zset 1 hello\n(integer) 1\n127.0.0.1:6379&gt; type zset\nzset<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>encoding即底层存储数据结构，可以使用object encoding key来确定encoding的类型</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; object encoding hello\n&quot;embstr&quot;\n127.0.0.1:6379&gt; object encoding 1\n&quot;int&quot;\n127.0.0.1:6379&gt; object encoding list\n&quot;quicklist&quot;\n127.0.0.1:6379&gt; object encoding set\n&quot;intset&quot;\n127.0.0.1:6379&gt; object encoding hash\n&quot;ziplist&quot;\n127.0.0.1:6379&gt; object encoding zset\n&quot;ziplist&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>具体每个type对应的encoding如下：<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181516759.png\"></p>\n<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><p>Redis没有使用c语言的字符串，而是自己写了一个，并且做了优化，会根据字符串的长度的不同使用不同的类型以减小内存占用。<br>每个类型大体上都有以下属性：</p>\n<ul>\n<li>len:字符串长度</li>\n<li>alloc:分配的空间长度</li>\n<li>flags:标识类型</li>\n<li>buf[]:字符数组<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181424818.png\"><br>在sdshdr5中将类型放到了flags的前3个字节中（3个字节能保存6种类型，所以3个字节足够了），后5个字节用来保存字符的长度。因为sdshdr5取消了alloc字段，因此也不会进行空间预分配<br>当存储的val为数字类型时，则直接使用整数来保存这个字符串，也就是redisObject里的属性val，直接存数字，这也是type是int的由来。<br>当字符串的长度小于等于44字节时，redisObject和sds一起分配内存。当字符串大于44字节时，才对redisObject分配一次内存，对sds分配一次内存<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181527532.png\"></li>\n</ul>\n<h5 id=\"为什么以44字节为界限？\"><a href=\"#为什么以44字节为界限？\" class=\"headerlink\" title=\"为什么以44字节为界限？\"></a>为什么以44字节为界限？</h5><p>redisObject：16个字节<br>SDS：sdshdr8（3个字节）+ SDS 字符数组（N字节 + \\0结束符 1个字节）<br>Redis规定嵌入式字符串最大以64字节存储，所以N=64-16-3-1=44 </p>\n<h5 id=\"为什么嵌入式字符串最大以64字节存储？\"><a href=\"#为什么嵌入式字符串最大以64字节存储？\" class=\"headerlink\" title=\"为什么嵌入式字符串最大以64字节存储？\"></a>为什么嵌入式字符串最大以64字节存储？</h5><p>因为在x86体系下，一般的缓存行大小是63字节，redis能一次加载完成</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; SET hello world\nOK\n127.0.0.1:6379&gt; object encoding hello\n&quot;embstr&quot;\n127.0.0.1:6379&gt; SET hello 01234567890123456789012345678901234567890123\nOK\n127.0.0.1:6379&gt; object encoding hello\n&quot;embstr&quot;\n127.0.0.1:6379&gt; SET hello 012345678901234567890123456789012345678901234\nOK\n127.0.0.1:6379&gt; object encoding hello\n&quot;raw&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ziplist数据结构\"><a href=\"#ziplist数据结构\" class=\"headerlink\" title=\"ziplist数据结构\"></a>ziplist数据结构</h3><p>由于ziplist数据结构几乎在所有集合都用到了，需要先介绍一下ziplist<br>压缩列表实际上类似于一个数组，数组中的每一个元素都对应保存一个数据。和数组不同的是，压缩列表在表头有三个字段 zlbytes、zltail 和 zllen，分别表示列表长度、列表尾的偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181539390.png\"></p>\n<h3 id=\"List类型\"><a href=\"#List类型\" class=\"headerlink\" title=\"List类型\"></a>List类型</h3><p>list类型现在是直接使用quicklist实现的<br>quicklist是一个双向链表，链表中每个节点是一个ziplist<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181541836.png\"></p>\n<h3 id=\"Hash类型\"><a href=\"#Hash类型\" class=\"headerlink\" title=\"Hash类型\"></a>Hash类型</h3><p>元素比较少时用ziplist来存储，当元素比较多时用hash来存储<br>元素比较少时<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545270.png\"><br>元素比较多时<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181545806.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; HSET hash hello world\n(integer) 0\n127.0.0.1:6379&gt; object encoding hash\n&quot;ziplist&quot;\n127.0.0.1:6379&gt; HSET hash hello worldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworldworld\n(integer) 0\n127.0.0.1:6379&gt; object encoding hash\n&quot;hashtable&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Set类型\"><a href=\"#Set类型\" class=\"headerlink\" title=\"Set类型\"></a>Set类型</h3><p>当元素不多，且元素都为整数时，set的底层实现为intset，否则为dict<br>intset<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181551344.png\"><br>hashtable<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181552477.png\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1:6379&gt; object encoding set\n&quot;intset&quot;\n127.0.0.1:6379&gt; SADD set hello\n(integer) 1\n127.0.0.1:6379&gt; object encoding set\n&quot;hashtable&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"zset类型\"><a href=\"#zset类型\" class=\"headerlink\" title=\"zset类型\"></a>zset类型</h3><p>zset当元素较少时会使用ziplist来存储<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181557617.png\"><br>zset当元素较多时使用dict+skiplist来存储<br>dict保存了数据到分数的映射关系，skiplist用来根据分数查询数据<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203181559381.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Redis对存储整数友好，可以压缩内存使用且存取效率高</li>\n<li>String不超过44长度性能最优，否则会使用raw带来额外存取操作，使用数字类型效率最高。</li>\n<li>设置maxmemory，防止rdb时子进程写快照时的内存暴涨，即便停用rdb，使用slave时也会有一次rdb同步，导致内存暴涨，建议一个master不要超过2个slave。</li>\n<li>设置内存淘汰策略，防止内存不够导致的异常</li>\n<li>避免大KEY，hashtable结构遍历很耗时，尽量使用scan获取大量数据，而不是getall</li>\n</ul>\n"},{"title":"死磕Redis之持久化","author":"王登武","date":"2022-03-21T05:37:10.000Z","_content":"### Redis持久化\nRedis实现持久化有2种方式，全量快照RDB和追加日志AOF。\n#### RDB\nRDB真的懒得介绍，因为很不实用，如果只使用RDB，恢复时会导致分钟级别以上的数据缺失。\n可以通过配置save \"\"来禁用。\nRDB的原理就是把内存全量数据写到文件里，采用压缩数据的方式，所以快照文件大小会比较小。\n可以使用save阻塞主线程的方式，也可以使用bgsave命令异步执行。\n也可以自动执行保存快照，通过配置save 300 100来自动执行，300代表300秒，100代表100次改动，任何一个达到就会触发。\n另外RDB不适合频繁写入，尤其是内存数据比较多的情况下，会导致磁盘IO压力比较大，可能这次还没全量写完，下次就又触发了，这也是不推荐使用RDB的原因，同时子进程虽然异步写，但是由于WOC（write on copy）的机制，也会导致内存暴涨，容易在内存吃紧的时候，导致不可用。\n#### AOF\nAOF采用追加指令的方式写日志，采用的是写后日志，即先写内存，再写日志，和（Write Ahead Log）WAL相反。\n为什么采用后写呢？因为可以避免指令检查，先写内存成功则代表指令是合法的，而且也不会阻塞当前的「写」指令执行。\n#### 写回策略\nAOF可以配置写回策略，即频率和是否阻塞，通过配置appendfsync，一共有3个选项：always，everysec，no\n\n* always：同步写回，写指令执行完毕立马将 aof_buf缓冲区中的内容刷写到 AOF 文件。\n* everysec：每秒写回，写指令执行完，日志只会写到 AOF 文件缓冲区，每隔一秒就把缓冲区内容同步到磁盘。\n* no： 操作系统控制，写执行执行完毕，把日志写到 AOF 文件内存缓冲区，由操作系统决定何时刷写到磁盘。\n\n推荐使用everysec\n#### AOF日志过大怎么办？\n既然是追加，那难免日志会越来越大，日志过大会导致写性能越来越差，甚至导致磁盘不足等风险。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211549622.png)\nAOF采用重写机制来优化日志，rewrite即将日志内容合并，因为可能同一个key在一段时间内反复被设置数据，其实只需要保持最新的数据指令即可，这样就可以使日志文件大大减少，但是即便是可以减少，恢复时如果一条一条执行指令，也是会比较慢的，虽然RDB会丢数据，但是恢复的时候却很快，那能不能结合2个的优点呢？\n4.0之后Redis对AOF进行了优化，重写时会先进行一次RDB，后续再追加指令。\n默认AOF文件是appendonly.aof，通过配置appendonly yes来启用，默认是no\nAOF内容如下：\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211553164.png)\n*3代表有3个指令组成，每个指令通过$n标识，n就是指令长度，如Set是$3\n\n### 总结\n不建议使用RDB，会存在分钟级数据丢失\n建议使用AOF，4.0以后还进行了优化，策略使用默认everysec即可。","source":"_posts/死磕Redis之持久化.md","raw":"---\ntitle: 死磕Redis之持久化\nauthor: 王登武\ndate: 2022-03-21 13:37:10\ncategories:\n- 死磕Redis\ntags:\n- redis\n- 分布式缓存\n---\n### Redis持久化\nRedis实现持久化有2种方式，全量快照RDB和追加日志AOF。\n#### RDB\nRDB真的懒得介绍，因为很不实用，如果只使用RDB，恢复时会导致分钟级别以上的数据缺失。\n可以通过配置save \"\"来禁用。\nRDB的原理就是把内存全量数据写到文件里，采用压缩数据的方式，所以快照文件大小会比较小。\n可以使用save阻塞主线程的方式，也可以使用bgsave命令异步执行。\n也可以自动执行保存快照，通过配置save 300 100来自动执行，300代表300秒，100代表100次改动，任何一个达到就会触发。\n另外RDB不适合频繁写入，尤其是内存数据比较多的情况下，会导致磁盘IO压力比较大，可能这次还没全量写完，下次就又触发了，这也是不推荐使用RDB的原因，同时子进程虽然异步写，但是由于WOC（write on copy）的机制，也会导致内存暴涨，容易在内存吃紧的时候，导致不可用。\n#### AOF\nAOF采用追加指令的方式写日志，采用的是写后日志，即先写内存，再写日志，和（Write Ahead Log）WAL相反。\n为什么采用后写呢？因为可以避免指令检查，先写内存成功则代表指令是合法的，而且也不会阻塞当前的「写」指令执行。\n#### 写回策略\nAOF可以配置写回策略，即频率和是否阻塞，通过配置appendfsync，一共有3个选项：always，everysec，no\n\n* always：同步写回，写指令执行完毕立马将 aof_buf缓冲区中的内容刷写到 AOF 文件。\n* everysec：每秒写回，写指令执行完，日志只会写到 AOF 文件缓冲区，每隔一秒就把缓冲区内容同步到磁盘。\n* no： 操作系统控制，写执行执行完毕，把日志写到 AOF 文件内存缓冲区，由操作系统决定何时刷写到磁盘。\n\n推荐使用everysec\n#### AOF日志过大怎么办？\n既然是追加，那难免日志会越来越大，日志过大会导致写性能越来越差，甚至导致磁盘不足等风险。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211549622.png)\nAOF采用重写机制来优化日志，rewrite即将日志内容合并，因为可能同一个key在一段时间内反复被设置数据，其实只需要保持最新的数据指令即可，这样就可以使日志文件大大减少，但是即便是可以减少，恢复时如果一条一条执行指令，也是会比较慢的，虽然RDB会丢数据，但是恢复的时候却很快，那能不能结合2个的优点呢？\n4.0之后Redis对AOF进行了优化，重写时会先进行一次RDB，后续再追加指令。\n默认AOF文件是appendonly.aof，通过配置appendonly yes来启用，默认是no\nAOF内容如下：\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211553164.png)\n*3代表有3个指令组成，每个指令通过$n标识，n就是指令长度，如Set是$3\n\n### 总结\n不建议使用RDB，会存在分钟级数据丢失\n建议使用AOF，4.0以后还进行了优化，策略使用默认everysec即可。","slug":"死磕Redis之持久化","published":1,"updated":"2022-03-21T08:01:39.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10f6g4a00005o9ghumic4lx","content":"<h3 id=\"Redis持久化\"><a href=\"#Redis持久化\" class=\"headerlink\" title=\"Redis持久化\"></a>Redis持久化</h3><p>Redis实现持久化有2种方式，全量快照RDB和追加日志AOF。</p>\n<h4 id=\"RDB\"><a href=\"#RDB\" class=\"headerlink\" title=\"RDB\"></a>RDB</h4><p>RDB真的懒得介绍，因为很不实用，如果只使用RDB，恢复时会导致分钟级别以上的数据缺失。<br>可以通过配置save “”来禁用。<br>RDB的原理就是把内存全量数据写到文件里，采用压缩数据的方式，所以快照文件大小会比较小。<br>可以使用save阻塞主线程的方式，也可以使用bgsave命令异步执行。<br>也可以自动执行保存快照，通过配置save 300 100来自动执行，300代表300秒，100代表100次改动，任何一个达到就会触发。<br>另外RDB不适合频繁写入，尤其是内存数据比较多的情况下，会导致磁盘IO压力比较大，可能这次还没全量写完，下次就又触发了，这也是不推荐使用RDB的原因，同时子进程虽然异步写，但是由于WOC（write on copy）的机制，也会导致内存暴涨，容易在内存吃紧的时候，导致不可用。</p>\n<h4 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h4><p>AOF采用追加指令的方式写日志，采用的是写后日志，即先写内存，再写日志，和（Write Ahead Log）WAL相反。<br>为什么采用后写呢？因为可以避免指令检查，先写内存成功则代表指令是合法的，而且也不会阻塞当前的「写」指令执行。</p>\n<h4 id=\"写回策略\"><a href=\"#写回策略\" class=\"headerlink\" title=\"写回策略\"></a>写回策略</h4><p>AOF可以配置写回策略，即频率和是否阻塞，通过配置appendfsync，一共有3个选项：always，everysec，no</p>\n<ul>\n<li>always：同步写回，写指令执行完毕立马将 aof_buf缓冲区中的内容刷写到 AOF 文件。</li>\n<li>everysec：每秒写回，写指令执行完，日志只会写到 AOF 文件缓冲区，每隔一秒就把缓冲区内容同步到磁盘。</li>\n<li>no： 操作系统控制，写执行执行完毕，把日志写到 AOF 文件内存缓冲区，由操作系统决定何时刷写到磁盘。</li>\n</ul>\n<p>推荐使用everysec</p>\n<h4 id=\"AOF日志过大怎么办？\"><a href=\"#AOF日志过大怎么办？\" class=\"headerlink\" title=\"AOF日志过大怎么办？\"></a>AOF日志过大怎么办？</h4><p>既然是追加，那难免日志会越来越大，日志过大会导致写性能越来越差，甚至导致磁盘不足等风险。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211549622.png\"><br>AOF采用重写机制来优化日志，rewrite即将日志内容合并，因为可能同一个key在一段时间内反复被设置数据，其实只需要保持最新的数据指令即可，这样就可以使日志文件大大减少，但是即便是可以减少，恢复时如果一条一条执行指令，也是会比较慢的，虽然RDB会丢数据，但是恢复的时候却很快，那能不能结合2个的优点呢？<br>4.0之后Redis对AOF进行了优化，重写时会先进行一次RDB，后续再追加指令。<br>默认AOF文件是appendonly.aof，通过配置appendonly yes来启用，默认是no<br>AOF内容如下：<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211553164.png\"><br>*3代表有3个指令组成，每个指令通过$n标识，n就是指令长度，如Set是$3</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不建议使用RDB，会存在分钟级数据丢失<br>建议使用AOF，4.0以后还进行了优化，策略使用默认everysec即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Redis持久化\"><a href=\"#Redis持久化\" class=\"headerlink\" title=\"Redis持久化\"></a>Redis持久化</h3><p>Redis实现持久化有2种方式，全量快照RDB和追加日志AOF。</p>\n<h4 id=\"RDB\"><a href=\"#RDB\" class=\"headerlink\" title=\"RDB\"></a>RDB</h4><p>RDB真的懒得介绍，因为很不实用，如果只使用RDB，恢复时会导致分钟级别以上的数据缺失。<br>可以通过配置save “”来禁用。<br>RDB的原理就是把内存全量数据写到文件里，采用压缩数据的方式，所以快照文件大小会比较小。<br>可以使用save阻塞主线程的方式，也可以使用bgsave命令异步执行。<br>也可以自动执行保存快照，通过配置save 300 100来自动执行，300代表300秒，100代表100次改动，任何一个达到就会触发。<br>另外RDB不适合频繁写入，尤其是内存数据比较多的情况下，会导致磁盘IO压力比较大，可能这次还没全量写完，下次就又触发了，这也是不推荐使用RDB的原因，同时子进程虽然异步写，但是由于WOC（write on copy）的机制，也会导致内存暴涨，容易在内存吃紧的时候，导致不可用。</p>\n<h4 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h4><p>AOF采用追加指令的方式写日志，采用的是写后日志，即先写内存，再写日志，和（Write Ahead Log）WAL相反。<br>为什么采用后写呢？因为可以避免指令检查，先写内存成功则代表指令是合法的，而且也不会阻塞当前的「写」指令执行。</p>\n<h4 id=\"写回策略\"><a href=\"#写回策略\" class=\"headerlink\" title=\"写回策略\"></a>写回策略</h4><p>AOF可以配置写回策略，即频率和是否阻塞，通过配置appendfsync，一共有3个选项：always，everysec，no</p>\n<ul>\n<li>always：同步写回，写指令执行完毕立马将 aof_buf缓冲区中的内容刷写到 AOF 文件。</li>\n<li>everysec：每秒写回，写指令执行完，日志只会写到 AOF 文件缓冲区，每隔一秒就把缓冲区内容同步到磁盘。</li>\n<li>no： 操作系统控制，写执行执行完毕，把日志写到 AOF 文件内存缓冲区，由操作系统决定何时刷写到磁盘。</li>\n</ul>\n<p>推荐使用everysec</p>\n<h4 id=\"AOF日志过大怎么办？\"><a href=\"#AOF日志过大怎么办？\" class=\"headerlink\" title=\"AOF日志过大怎么办？\"></a>AOF日志过大怎么办？</h4><p>既然是追加，那难免日志会越来越大，日志过大会导致写性能越来越差，甚至导致磁盘不足等风险。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211549622.png\"><br>AOF采用重写机制来优化日志，rewrite即将日志内容合并，因为可能同一个key在一段时间内反复被设置数据，其实只需要保持最新的数据指令即可，这样就可以使日志文件大大减少，但是即便是可以减少，恢复时如果一条一条执行指令，也是会比较慢的，虽然RDB会丢数据，但是恢复的时候却很快，那能不能结合2个的优点呢？<br>4.0之后Redis对AOF进行了优化，重写时会先进行一次RDB，后续再追加指令。<br>默认AOF文件是appendonly.aof，通过配置appendonly yes来启用，默认是no<br>AOF内容如下：<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203211553164.png\"><br>*3代表有3个指令组成，每个指令通过$n标识，n就是指令长度，如Set是$3</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不建议使用RDB，会存在分钟级数据丢失<br>建议使用AOF，4.0以后还进行了优化，策略使用默认everysec即可。</p>\n"},{"title":"死磕Redis之起手式","author":"王登武","date":"2022-03-11T09:09:53.000Z","_content":"### 死磕Redis系列\nRedis作为集中式缓存（也支持分布式架构），不管是单体应用还是分布式微服务都离不开，所以对Redis进行深入了解则显得额外重要，所以打算做一个死磕Redis系列，从浅到深的系统介绍一下Redis，当然这也是很好的对知识的梳理和再学习的机会，因为最好的学习方式就是能清晰的讲给别人听。\n我个人认为学习一项知识或者技术，大致分为三个阶段，\n\n1. 熟练使用\n2. 原理架构\n3. 深入源码\n\n\n首先需要先动手，先用起来，写写demo，做做项目，有一个大概的认知。\n随着可以掌握大部分功能，就可以深入其原理和架构，了解其设计和思想是什么样的，这个时候就对其整体有了认知。\n当有了全局和思想的掌握后，就可以深入细节，阅读源码则更能由表入里，完全掌握这项技术或中间件。\n当然这三个部分是互相循环的，互为助推，随着熟练使用，就接触到一部分原理和架构，然后可能也会看一部分源码， 继而更有助于熟练使用，也能更理解原理和架构。就像下面这张图一样。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111725715.jpg)\n### 死磕Redis系列大纲\n大概计划了一个大纲\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111728829.png)\n如果能写完死磕Redis系列，效果还不错的话，可能还会有《死磕Netty》《死磕Kotlin》《死磕Java并发》等等系列吧。\n### 死磕Redis之起手式\n那么我们就正式进入死磕Redis系列的起手式。\n不要小看起手式，陈氏太极拳里的起手式可以起到静气凝神，是为后续宜柔宜刚打下基础，也起了一个基调。\n### 本地单机Redis\n开始死磕Redis之前，我们首先需要有个Redis，那如何快速获取一个Redis呢？有2种方式，自己本地装一个，或者使用docker启动一个。\n我推荐使用docker，因为简单方便，使用之后清理也方便，最重要的是不会污染你本地环境和端口。\n首先我们先装一个[docker desktop](https://www.docker.com/get-started)，具体点击链接按照指引即可安装成功。\n然后我们去DockerHub搜一下[Redis](https://hub.docker.com/_/redis?tab=tags)的镜像，点击链接即可跳转过去，Redis的版本很多，我们暂时选最新稳定版6.2.6。\n启动Redis实例`docker run --name redis -p 127.0.0.1:6379:6379 -d redis:6.2.6`，运行`docker ps`就可以看到运行中的redis实例了。\n如果本地没有安装redis，没有redis-cli工具，则可以使用`docker exec -it redis redis-cli`连到容器的redis，执行info命令就可以看到redis服务的信息了。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112301578.png)\n### spring boot连接Redis\n我们首先可以使用https://start.spring.io/创建一个骨架程序\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112315606.png)\n点击生成下载到本地后，使用IntelliJ打开\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112352611.png)\n如果你按照上述步骤来动手实践的话，我希望你在demo文件夹下使用git init来初始化代码仓库，以方便对代码进行版本管理。\n### HelloRedis\n我们需要添加一些代码，设置Redis相关的配置，来执行HelloRedis的操作。\n首先我们先在application.properties添加Redis连接信息\n\n``` properties\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\n```\n然后创建一个HelloRedisController来响应http，并对Redis进行操作\n\n``` java\npackage learn.redis.demo.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author wangdengwu\n */\n@RestController\n@RequestMapping(\"/redis\")\npublic class HelloRedisController {\n\n    public static final String HELLO = \"hello\";\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    @GetMapping(\"/hello\")\n    public String helloRedis(@RequestParam(required = false) String name) {\n        if (name == null || name.isEmpty()) {\n            String result = stringRedisTemplate.opsForValue().get(HELLO);\n            return HELLO + \" \" + result;\n        } else {\n            stringRedisTemplate.opsForValue().set(HELLO, name);\n        }\n        return HELLO + \" \" + name;\n    }\n}\n```\n使用mvn spring-boot:run或者在IDE里启动DemoApplication\n然后在浏览器里输入http://127.0.0.1:8080/redis/hello?name=redis\n这样就将redis字符串存到了redis里，再执行http://127.0.0.1:8080/redis/hello，就可以看到hello redis了\n也可以使用命令`docker exec -it redis redis-cli`连接到redis，执行`keys *`以及`get hello`和`type hello`可以看到redis内存储的数据信息\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203120044575.png)\n### 结尾\n虽然这个起手式真的很简单，但是它打通了我们连接redis的第一步，后续我们将持续增加功能来对redis进行操作","source":"_posts/死磕Redis之起手式.md","raw":"---\ntitle: 死磕Redis之起手式\nauthor: 王登武\ndate: 2022-03-11 17:09:53\ncategories:\n- 死磕Redis\ntags:\n- redis\n- 分布式缓存\n---\n### 死磕Redis系列\nRedis作为集中式缓存（也支持分布式架构），不管是单体应用还是分布式微服务都离不开，所以对Redis进行深入了解则显得额外重要，所以打算做一个死磕Redis系列，从浅到深的系统介绍一下Redis，当然这也是很好的对知识的梳理和再学习的机会，因为最好的学习方式就是能清晰的讲给别人听。\n我个人认为学习一项知识或者技术，大致分为三个阶段，\n\n1. 熟练使用\n2. 原理架构\n3. 深入源码\n\n\n首先需要先动手，先用起来，写写demo，做做项目，有一个大概的认知。\n随着可以掌握大部分功能，就可以深入其原理和架构，了解其设计和思想是什么样的，这个时候就对其整体有了认知。\n当有了全局和思想的掌握后，就可以深入细节，阅读源码则更能由表入里，完全掌握这项技术或中间件。\n当然这三个部分是互相循环的，互为助推，随着熟练使用，就接触到一部分原理和架构，然后可能也会看一部分源码， 继而更有助于熟练使用，也能更理解原理和架构。就像下面这张图一样。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111725715.jpg)\n### 死磕Redis系列大纲\n大概计划了一个大纲\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111728829.png)\n如果能写完死磕Redis系列，效果还不错的话，可能还会有《死磕Netty》《死磕Kotlin》《死磕Java并发》等等系列吧。\n### 死磕Redis之起手式\n那么我们就正式进入死磕Redis系列的起手式。\n不要小看起手式，陈氏太极拳里的起手式可以起到静气凝神，是为后续宜柔宜刚打下基础，也起了一个基调。\n### 本地单机Redis\n开始死磕Redis之前，我们首先需要有个Redis，那如何快速获取一个Redis呢？有2种方式，自己本地装一个，或者使用docker启动一个。\n我推荐使用docker，因为简单方便，使用之后清理也方便，最重要的是不会污染你本地环境和端口。\n首先我们先装一个[docker desktop](https://www.docker.com/get-started)，具体点击链接按照指引即可安装成功。\n然后我们去DockerHub搜一下[Redis](https://hub.docker.com/_/redis?tab=tags)的镜像，点击链接即可跳转过去，Redis的版本很多，我们暂时选最新稳定版6.2.6。\n启动Redis实例`docker run --name redis -p 127.0.0.1:6379:6379 -d redis:6.2.6`，运行`docker ps`就可以看到运行中的redis实例了。\n如果本地没有安装redis，没有redis-cli工具，则可以使用`docker exec -it redis redis-cli`连到容器的redis，执行info命令就可以看到redis服务的信息了。\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112301578.png)\n### spring boot连接Redis\n我们首先可以使用https://start.spring.io/创建一个骨架程序\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112315606.png)\n点击生成下载到本地后，使用IntelliJ打开\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112352611.png)\n如果你按照上述步骤来动手实践的话，我希望你在demo文件夹下使用git init来初始化代码仓库，以方便对代码进行版本管理。\n### HelloRedis\n我们需要添加一些代码，设置Redis相关的配置，来执行HelloRedis的操作。\n首先我们先在application.properties添加Redis连接信息\n\n``` properties\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\n```\n然后创建一个HelloRedisController来响应http，并对Redis进行操作\n\n``` java\npackage learn.redis.demo.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author wangdengwu\n */\n@RestController\n@RequestMapping(\"/redis\")\npublic class HelloRedisController {\n\n    public static final String HELLO = \"hello\";\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    @GetMapping(\"/hello\")\n    public String helloRedis(@RequestParam(required = false) String name) {\n        if (name == null || name.isEmpty()) {\n            String result = stringRedisTemplate.opsForValue().get(HELLO);\n            return HELLO + \" \" + result;\n        } else {\n            stringRedisTemplate.opsForValue().set(HELLO, name);\n        }\n        return HELLO + \" \" + name;\n    }\n}\n```\n使用mvn spring-boot:run或者在IDE里启动DemoApplication\n然后在浏览器里输入http://127.0.0.1:8080/redis/hello?name=redis\n这样就将redis字符串存到了redis里，再执行http://127.0.0.1:8080/redis/hello，就可以看到hello redis了\n也可以使用命令`docker exec -it redis redis-cli`连接到redis，执行`keys *`以及`get hello`和`type hello`可以看到redis内存储的数据信息\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203120044575.png)\n### 结尾\n虽然这个起手式真的很简单，但是它打通了我们连接redis的第一步，后续我们将持续增加功能来对redis进行操作","slug":"死磕Redis之起手式","published":1,"updated":"2022-03-24T05:54:54.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl14nmkdx0000cv9gflja69qw","content":"<h3 id=\"死磕Redis系列\"><a href=\"#死磕Redis系列\" class=\"headerlink\" title=\"死磕Redis系列\"></a>死磕Redis系列</h3><p>Redis作为集中式缓存（也支持分布式架构），不管是单体应用还是分布式微服务都离不开，所以对Redis进行深入了解则显得额外重要，所以打算做一个死磕Redis系列，从浅到深的系统介绍一下Redis，当然这也是很好的对知识的梳理和再学习的机会，因为最好的学习方式就是能清晰的讲给别人听。<br>我个人认为学习一项知识或者技术，大致分为三个阶段，</p>\n<ol>\n<li>熟练使用</li>\n<li>原理架构</li>\n<li>深入源码</li>\n</ol>\n<p>首先需要先动手，先用起来，写写demo，做做项目，有一个大概的认知。<br>随着可以掌握大部分功能，就可以深入其原理和架构，了解其设计和思想是什么样的，这个时候就对其整体有了认知。<br>当有了全局和思想的掌握后，就可以深入细节，阅读源码则更能由表入里，完全掌握这项技术或中间件。<br>当然这三个部分是互相循环的，互为助推，随着熟练使用，就接触到一部分原理和架构，然后可能也会看一部分源码， 继而更有助于熟练使用，也能更理解原理和架构。就像下面这张图一样。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111725715.jpg\"></p>\n<h3 id=\"死磕Redis系列大纲\"><a href=\"#死磕Redis系列大纲\" class=\"headerlink\" title=\"死磕Redis系列大纲\"></a>死磕Redis系列大纲</h3><p>大概计划了一个大纲<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111728829.png\"><br>如果能写完死磕Redis系列，效果还不错的话，可能还会有《死磕Netty》《死磕Kotlin》《死磕Java并发》等等系列吧。</p>\n<h3 id=\"死磕Redis之起手式\"><a href=\"#死磕Redis之起手式\" class=\"headerlink\" title=\"死磕Redis之起手式\"></a>死磕Redis之起手式</h3><p>那么我们就正式进入死磕Redis系列的起手式。<br>不要小看起手式，陈氏太极拳里的起手式可以起到静气凝神，是为后续宜柔宜刚打下基础，也起了一个基调。</p>\n<h3 id=\"本地单机Redis\"><a href=\"#本地单机Redis\" class=\"headerlink\" title=\"本地单机Redis\"></a>本地单机Redis</h3><p>开始死磕Redis之前，我们首先需要有个Redis，那如何快速获取一个Redis呢？有2种方式，自己本地装一个，或者使用docker启动一个。<br>我推荐使用docker，因为简单方便，使用之后清理也方便，最重要的是不会污染你本地环境和端口。<br>首先我们先装一个<a href=\"https://www.docker.com/get-started\">docker desktop</a>，具体点击链接按照指引即可安装成功。<br>然后我们去DockerHub搜一下<a href=\"https://hub.docker.com/_/redis?tab=tags\">Redis</a>的镜像，点击链接即可跳转过去，Redis的版本很多，我们暂时选最新稳定版6.2.6。<br>启动Redis实例<code>docker run --name redis -p 127.0.0.1:6379:6379 -d redis:6.2.6</code>，运行<code>docker ps</code>就可以看到运行中的redis实例了。<br>如果本地没有安装redis，没有redis-cli工具，则可以使用<code>docker exec -it redis redis-cli</code>连到容器的redis，执行info命令就可以看到redis服务的信息了。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112301578.png\"></p>\n<h3 id=\"spring-boot连接Redis\"><a href=\"#spring-boot连接Redis\" class=\"headerlink\" title=\"spring boot连接Redis\"></a>spring boot连接Redis</h3><p>我们首先可以使用<a href=\"https://start.spring.io/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%AA%A8%E6%9E%B6%E7%A8%8B%E5%BA%8F\">https://start.spring.io/创建一个骨架程序</a><br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112315606.png\"><br>点击生成下载到本地后，使用IntelliJ打开<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112352611.png\"><br>如果你按照上述步骤来动手实践的话，我希望你在demo文件夹下使用git init来初始化代码仓库，以方便对代码进行版本管理。</p>\n<h3 id=\"HelloRedis\"><a href=\"#HelloRedis\" class=\"headerlink\" title=\"HelloRedis\"></a>HelloRedis</h3><p>我们需要添加一些代码，设置Redis相关的配置，来执行HelloRedis的操作。<br>首先我们先在application.properties添加Redis连接信息</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.redis.host</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">127.0.0.1</span>\n<span class=\"token attr-name\">spring.redis.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">6379</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>然后创建一个HelloRedisController来响应http，并对Redis进行操作</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">learn<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringRedisTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author wangdengwu\n */</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/redis\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRedisController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> HELLO <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">helloRedis</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>HELLO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> HELLO <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>HELLO<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> HELLO <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用mvn spring-boot:run或者在IDE里启动DemoApplication<br>然后在浏览器里输入<a href=\"http://127.0.0.1:8080/redis/hello?name=redis\">http://127.0.0.1:8080/redis/hello?name=redis</a><br>这样就将redis字符串存到了redis里，再执行<a href=\"http://127.0.0.1:8080/redis/hello%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0hello\">http://127.0.0.1:8080/redis/hello，就可以看到hello</a> redis了<br>也可以使用命令<code>docker exec -it redis redis-cli</code>连接到redis，执行<code>keys *</code>以及<code>get hello</code>和<code>type hello</code>可以看到redis内存储的数据信息<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203120044575.png\"></p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><p>虽然这个起手式真的很简单，但是它打通了我们连接redis的第一步，后续我们将持续增加功能来对redis进行操作</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"死磕Redis系列\"><a href=\"#死磕Redis系列\" class=\"headerlink\" title=\"死磕Redis系列\"></a>死磕Redis系列</h3><p>Redis作为集中式缓存（也支持分布式架构），不管是单体应用还是分布式微服务都离不开，所以对Redis进行深入了解则显得额外重要，所以打算做一个死磕Redis系列，从浅到深的系统介绍一下Redis，当然这也是很好的对知识的梳理和再学习的机会，因为最好的学习方式就是能清晰的讲给别人听。<br>我个人认为学习一项知识或者技术，大致分为三个阶段，</p>\n<ol>\n<li>熟练使用</li>\n<li>原理架构</li>\n<li>深入源码</li>\n</ol>\n<p>首先需要先动手，先用起来，写写demo，做做项目，有一个大概的认知。<br>随着可以掌握大部分功能，就可以深入其原理和架构，了解其设计和思想是什么样的，这个时候就对其整体有了认知。<br>当有了全局和思想的掌握后，就可以深入细节，阅读源码则更能由表入里，完全掌握这项技术或中间件。<br>当然这三个部分是互相循环的，互为助推，随着熟练使用，就接触到一部分原理和架构，然后可能也会看一部分源码， 继而更有助于熟练使用，也能更理解原理和架构。就像下面这张图一样。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111725715.jpg\"></p>\n<h3 id=\"死磕Redis系列大纲\"><a href=\"#死磕Redis系列大纲\" class=\"headerlink\" title=\"死磕Redis系列大纲\"></a>死磕Redis系列大纲</h3><p>大概计划了一个大纲<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203111728829.png\"><br>如果能写完死磕Redis系列，效果还不错的话，可能还会有《死磕Netty》《死磕Kotlin》《死磕Java并发》等等系列吧。</p>\n<h3 id=\"死磕Redis之起手式\"><a href=\"#死磕Redis之起手式\" class=\"headerlink\" title=\"死磕Redis之起手式\"></a>死磕Redis之起手式</h3><p>那么我们就正式进入死磕Redis系列的起手式。<br>不要小看起手式，陈氏太极拳里的起手式可以起到静气凝神，是为后续宜柔宜刚打下基础，也起了一个基调。</p>\n<h3 id=\"本地单机Redis\"><a href=\"#本地单机Redis\" class=\"headerlink\" title=\"本地单机Redis\"></a>本地单机Redis</h3><p>开始死磕Redis之前，我们首先需要有个Redis，那如何快速获取一个Redis呢？有2种方式，自己本地装一个，或者使用docker启动一个。<br>我推荐使用docker，因为简单方便，使用之后清理也方便，最重要的是不会污染你本地环境和端口。<br>首先我们先装一个<a href=\"https://www.docker.com/get-started\">docker desktop</a>，具体点击链接按照指引即可安装成功。<br>然后我们去DockerHub搜一下<a href=\"https://hub.docker.com/_/redis?tab=tags\">Redis</a>的镜像，点击链接即可跳转过去，Redis的版本很多，我们暂时选最新稳定版6.2.6。<br>启动Redis实例<code>docker run --name redis -p 127.0.0.1:6379:6379 -d redis:6.2.6</code>，运行<code>docker ps</code>就可以看到运行中的redis实例了。<br>如果本地没有安装redis，没有redis-cli工具，则可以使用<code>docker exec -it redis redis-cli</code>连到容器的redis，执行info命令就可以看到redis服务的信息了。<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112301578.png\"></p>\n<h3 id=\"spring-boot连接Redis\"><a href=\"#spring-boot连接Redis\" class=\"headerlink\" title=\"spring boot连接Redis\"></a>spring boot连接Redis</h3><p>我们首先可以使用<a href=\"https://start.spring.io/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%AA%A8%E6%9E%B6%E7%A8%8B%E5%BA%8F\">https://start.spring.io/创建一个骨架程序</a><br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112315606.png\"><br>点击生成下载到本地后，使用IntelliJ打开<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203112352611.png\"><br>如果你按照上述步骤来动手实践的话，我希望你在demo文件夹下使用git init来初始化代码仓库，以方便对代码进行版本管理。</p>\n<h3 id=\"HelloRedis\"><a href=\"#HelloRedis\" class=\"headerlink\" title=\"HelloRedis\"></a>HelloRedis</h3><p>我们需要添加一些代码，设置Redis相关的配置，来执行HelloRedis的操作。<br>首先我们先在application.properties添加Redis连接信息</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">spring.redis.host</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">127.0.0.1</span>\n<span class=\"token attr-name\">spring.redis.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">6379</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>然后创建一个HelloRedisController来响应http，并对Redis进行操作</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">learn<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringRedisTemplate</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestParam</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @author wangdengwu\n */</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/redis\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloRedisController</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> HELLO <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">helloRedis</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>HELLO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> HELLO <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>HELLO<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> HELLO <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用mvn spring-boot:run或者在IDE里启动DemoApplication<br>然后在浏览器里输入<a href=\"http://127.0.0.1:8080/redis/hello?name=redis\">http://127.0.0.1:8080/redis/hello?name=redis</a><br>这样就将redis字符串存到了redis里，再执行<a href=\"http://127.0.0.1:8080/redis/hello%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0hello\">http://127.0.0.1:8080/redis/hello，就可以看到hello</a> redis了<br>也可以使用命令<code>docker exec -it redis redis-cli</code>连接到redis，执行<code>keys *</code>以及<code>get hello</code>和<code>type hello</code>可以看到redis内存储的数据信息<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202203120044575.png\"></p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><p>虽然这个起手式真的很简单，但是它打通了我们连接redis的第一步，后续我们将持续增加功能来对redis进行操作</p>\n"},{"title":"Redis 6.2 使用自签名tls实现加密传输","author":"王登武","date":"2022-04-21T12:53:16.000Z","_content":"### Redis加密传输\nRedis 6.0开始支持tls加密传输，最近刚好要支持，因此需要搭建一套支持加密的Redis环境，于是打算使用自签名来做，但是使用的过程中遇到一些问题，打算记录下来，以方便可能有人也遇到同样的问题。\n### 使用[smallstep](https://smallstep.com/)生成自签名根证书\n为了方便生成多个中间证书，首先生成自己的自签名根证书，然后使用根证书生成更多的中间证书。比如先生成dengwu.wang的根证书，然后再生成master.dengwu.wang，slave1.dengwu.wang，slave2.dengwu.wang等等子域名证书。\n按照官方文档，先安装，mac用户可以使用`brew install step`直接安装，centos可以直接下载二进制文件安装，如下：\n先安装step\n\n``` bash\nwget -O step.tar.gz https://dl.step.sm/gh-release/cli/docs-ca-install/v0.19.0/step_linux_0.19.0_amd64.tar.gz\ntar -xf step.tar.gz\nsudo cp step_0.19.0/bin/step /usr/bin\n```\n再安装step-ca\n\n``` bash\nwget -O step-ca.tar.gz https://dl.step.sm/gh-release/certificates/docs-ca-install/v0.19.0/step-ca_linux_0.19.0_amd64.tar.gz\ntar -xf step-ca.tar.gz\nsudo cp step-ca_0.19.0/bin/step-ca /usr/bin\n```\n由于dl.step.sm本身的证书不被wget信任，如果下载遇到安全提示，加上--no-check-certificate即可\n下载完成后，我们就可以生成根证书了，先执行`step ca init`\n\n``` bash\n$ step ca init\n\n✔ What would you like to name your new PKI? (e.g. Smallstep): Example Inc.\n✔ What DNS names or IP addresses would you like to add to your new CA? (e.g. ca.smallstep.com[,1.1.1.1,etc.]): localhost\n✔ What address will your new CA listen at? (e.g. :443): 127.0.0.1:8443\n✔ What would you like to name the first provisioner for your new CA? (e.g. you@smallstep.com): bob@example.com\n✔ What do you want your password to be? [leave empty and we will generate one]: abc123\n\nGenerating root certificate...\nall done!\n\nGenerating intermediate certificate...\nall done!\n\n✔ Root certificate: /Users/bob/.step/certs/root_ca.crt\n✔ Root private key: /Users/bob/.step/secrets/root_ca_key\n✔ Root fingerprint: 702a094e239c9eec6f0dcd0a5f65e595bf7ed6614012825c5fe3d1ae1b2fd6ee\n✔ Intermediate certificate: /Users/bob/.step/certs/intermediate_ca.crt\n✔ Intermediate private key: /Users/bob/.step/secrets/intermediate_ca_key\n✔ Default configuration: /Users/bob/.step/config/defaults.json\n✔ Certificate Authority configuration: /Users/bob/.step/config/ca.json\n\nYour PKI is ready to go.\n```\n按照提示按需输入即可，一定要记得设置密码，后续还需要使用。\n下面启动根证书服务\n\n``` bash\n$ step-ca $(step path)/config/ca.json\n\nPlease enter the password to decrypt /Users/bob/.step/secrets/intermediate_ca_key: abc123\n\n2022/04/21 21:28:58 Serving HTTPS on 127.0.0.1:8443 ...\n```\n### 通过根证书服务器生成中间证书\n启动成功后，我们就可以导入ca证书\n\n``` bash\n$ step ca bootstrap --ca-url [CA URL] --fingerprint [CA fingerprint]\nThe root certificate has been saved in /home/alice/.step/certs/root_ca.crt.\nYour configuration has been saved in /home/alice/.step/config/defaults.json.\n```\nCA URL替换成你的ca服务地址，比如可能是127.0.0.1:8443，CA fingerprint就是生成根证书的时候的Root fingerprint\n如果找不到了，可以执行`step certificate fingerprint $(step path)/certs/root_ca.crt`获取\n导入成功之后，还需要安装一下，让本地电脑信任，否则会导致本地发送请求连接失败\n\n``` bash\n➜  ~ step certificate install $(step path)/certs/root_ca.crt\nPassword:\nCertificate /Users/wangdengwu/.step/certs/root_ca.crt has been installed.\nX.509v3 Root CA Certificate (ECDSA P-256) [Serial: 2527...6639]\n  Subject:     dengwu.wang Root CA\n  Issuer:      dengwu.wang Root CA\n  Valid from:  2022-04-21T04:45:52Z\n          to:  2032-04-18T04:45:52Z\n```\nMac的话，就可以在钥匙串访问里看到了\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202204212143947.png)\n下面，我们就可以向根证书服务申请中间证书了。\n\n``` bash\nstep ca certificate \"redis.dengwu.wang\" server.crt server.key\n```\n获取ca证书\n\n``` bash\nstep ca root ca.crt\n```\n这样当前文件夹下就有了server.crt,server.key和ca.crt\n### 使用docker启动Redis服务\n为了方便，我们使用docker-compose来启动服务\n\n``` yaml\nversion: \"3.9\"\nservices:\n  master:\n    image: \"bitnami/redis:6.2.6\"\n    restart: always\n    container_name: \"master\"\n    volumes:\n      - \"../tls:/opt/redis/certs\"\n    environment:\n      - TZ=Asia/Shanghai\n      - REDIS_REPLICATION_MODE=master\n      - REDIS_PASSWORD=hello1234\n      - REDIS_TLS_ENABLED=yes\n      - REDIS_TLS_AUTH_CLIENTS=no\n      - REDIS_TLS_CERT_FILE=/opt/redis/certs/redis.crt\n      - REDIS_TLS_KEY_FILE=/opt/redis/certs/redis.key\n      - REDIS_TLS_CA_FILE=/opt/redis/certs/redisCA.crt\n      - REDIS_TLS_PORT=6380\n    command: /opt/bitnami/scripts/redis/run.sh --maxmemory 100mb --tls-replication yes --tls-key-file-pass hello1234\n    ports:\n      - \"6379:6379\"\n      - \"6380:6380\"\n  slave:\n    image: \"bitnami/redis:6.2.6\"\n    restart: always\n    container_name: \"slave\"\n    volumes:\n      - \"../tls:/opt/redis/certs\"\n    environment:\n      - TZ=Asia/Shanghai\n      - REDIS_REPLICATION_MODE=slave\n      - REDIS_MASTER_HOST=master\n      - REDIS_MASTER_PORT_NUMBER=6380\n      - REDIS_MASTER_PASSWORD=hello1234\n      - REDIS_PASSWORD=hello1234\n      - REDIS_TLS_ENABLED=yes\n      - REDIS_TLS_AUTH_CLIENTS=no\n      - REDIS_TLS_CERT_FILE=/opt/redis/certs/redis.crt\n      - REDIS_TLS_KEY_FILE=/opt/redis/certs/redis.key\n      - REDIS_TLS_CA_FILE=/opt/redis/certs/redisCA.crt\n      - REDIS_TLS_PORT=6380\n    command: /opt/bitnami/scripts/redis/run.sh --maxmemory 100mb --tls-replication yes --tls-key-file-pass hello1234\n    expose:\n      - \"6379\"\n      - \"6380\"\n    depends_on:\n      - master\n```\n需要映射tls文件目录，以便redis启动的时候能找到证书，目录结构如下\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202204212151449.png)\n我们现在可以使用docker-compose up -d来启动了，如果没啥意外的话，就启动成功了。\n下面，我们使用redis-cli来访问一下，由于证书是绑定域名的，如果我们直接访问127.0.0.1的话，是访问失败的，所以还需要修改一下hosts文件绑定域名`127.0.0.1 redis.dengwu.wang`\n绑定完后，我们来连接一下\n\n``` bash\n➜  redis-cli -h redis.dengwu.wang -p 6380 --tls --cacert ca.crt\nredis.dengwu.wang:6380> AUTH hello1234\nOK\nredis.dengwu.wang:6380> info replication\n# Replication\nrole:master\nconnected_slaves:1\nslave0:ip=172.30.0.2,port=6380,state=online,offset=1120,lag=1\nmaster_failover_state:no-failover\nmaster_replid:6c3011ca5166f406cb9e9e7ac61bf5854c1f61b5\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:1120\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:1120\nredis.dengwu.wang:6380>\n```\n至此自签名的Redis主从就搭建完毕，使用ca证书即可访问\n### 使用Redis的Java客户端jedis等访问\n如果你使用Java来访问的话，由于jre的本地ca库并没有当前ca证书，所以还需要导入java的证书库\n我们先使用keytool验证一下当前的ca根证书是否合法\n\n``` bash\nkeytool -v -printcert -file ca.crt\n所有者: CN=dengwu.wang Root CA, O=dengwu.wang\n发布者: CN=dengwu.wang Root CA, O=dengwu.wang\n序列号: be26c0031e2f5b03c517dd5ec02a830f\n有效期为 Thu Apr 21 12:45:52 CST 2022 至 Sun Apr 18 12:45:52 CST 2032\n证书指纹:\n\t MD5:  BD:0A:F7:2B:44:A7:27:3E:6F:6E:82:CC:3C:98:69:56\n\t SHA1: 51:89:F7:4E:7C:3E:AD:DC:92:14:00:28:87:E0:23:E1:EA:D2:88:AC\n\t SHA256: 2D:06:83:E4:28:D5:E5:8C:2E:A9:DF:B0:24:37:0F:B6:46:7A:E8:7B:17:EA:D6:88:15:4F:BA:3F:84:BC:0F:DA\n签名算法名称: SHA256withECDSA\n主体公共密钥算法: 256 位 EC 密钥\n版本: 3\n\n扩展:\n\n#1: ObjectId: 2.5.29.19 Criticality=true\nBasicConstraints:[\n  CA:true\n  PathLen:1\n]\n\n#2: ObjectId: 2.5.29.15 Criticality=true\nKeyUsage [\n  Key_CertSign\n  Crl_Sign\n]\n\n#3: ObjectId: 2.5.29.14 Criticality=false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: 79 5D 02 C3 B7 0E DC 97   56 A6 5A 30 30 30 63 93  y]......V.Z000c.\n0010: 76 33 9A 97                                        v3..\n]\n]\n```\n说明格式没问题，下面导入java的ca库\n\n```\nsudo keytool -import -alias dengwu.wang -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -file ca.crt\nPassword:\n所有者: CN=dengwu.wang Root CA, O=dengwu.wang\n发布者: CN=dengwu.wang Root CA, O=dengwu.wang\n序列号: be26c0031e2f5b03c517dd5ec02a830f\n有效期为 Thu Apr 21 12:45:52 CST 2022 至 Sun Apr 18 12:45:52 CST 2032\n证书指纹:\n\t MD5:  BD:0A:F7:2B:44:A7:27:3E:6F:6E:82:CC:3C:98:69:56\n\t SHA1: 51:89:F7:4E:7C:3E:AD:DC:92:14:00:28:87:E0:23:E1:EA:D2:88:AC\n\t SHA256: 2D:06:83:E4:28:D5:E5:8C:2E:A9:DF:B0:24:37:0F:B6:46:7A:E8:7B:17:EA:D6:88:15:4F:BA:3F:84:BC:0F:DA\n签名算法名称: SHA256withECDSA\n主体公共密钥算法: 256 位 EC 密钥\n版本: 3\n\n扩展:\n\n#1: ObjectId: 2.5.29.19 Criticality=true\nBasicConstraints:[\n  CA:true\n  PathLen:1\n]\n\n#2: ObjectId: 2.5.29.15 Criticality=true\nKeyUsage [\n  Key_CertSign\n  Crl_Sign\n]\n\n#3: ObjectId: 2.5.29.14 Criticality=false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: 79 5D 02 C3 B7 0E DC 97   56 A6 5A 30 30 30 63 93  y]......V.Z000c.\n0010: 76 33 9A 97                                        v3..\n]\n]\n\n是否信任此证书? [否]:  是\n证书已添加到密钥库中\n```\n执行`keytool -list -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit |grep dengwu.wang`搜索一下\ndengwu.wang, 2022-4-21, trustedCertEntry,\n说明已经成功，我们使用jedis来试一下\n\n``` java\n@Test\npublic void test_redis_tls_with_jedis(){\n    Jedis jedis = new Jedis(\"rediss://redis.dengwu.wang:6380\");\n    jedis.auth(\"hello1234\");\n    jedis.set(\"1\",\"1\", SetParams.setParams().ex(10));\n}\n```\n执行成功。\n\n### 单元测试\n有时候我们需要执行单元测试，如果是本地跑，可以方便的导入证书和修改hosts，但是有时候测试需要在cd服务器上跑，环境不受控制，那如何解决域名和证书问题呢？ \n答案就是fake或mock，我们可以通过修改jdk运行时的私有数据，来达到绑定域名和导入证书的目的。\n#### 解决域名问题\n\n``` java\nimport com.google.common.collect.ImmutableMap;\nimport org.testcontainers.shaded.org.apache.commons.lang3.reflect.FieldUtils;\nimport sun.net.spi.nameservice.NameService;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.List;\nimport java.util.Map;\n\n@SuppressWarnings(\"all\")\npublic final class MockNameService implements NameService {\n    private final String local = \"127.0.0.1\";\n    private final Map<String, String> mockHost = ImmutableMap\n            .<String, String>builder()\n            .put(\"master.dengwu.wang\", local)\n            .put(\"slave1.dengwu.wang\", local)\n            .put(\"slave2.dengwu.wang\", local)\n            .build();\n\n    public static void mockHosts() {\n        try {\n            //通过反射拿到nameService列表\n            List<NameService> nameServices =\n                    (List<sun.net.spi.nameservice.NameService>)\n                            FieldUtils.readStaticField(InetAddress.class, \"nameServices\", true);\n            //加入自己的mockNameService\n            nameServices.add(new MockNameService());\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public InetAddress[] lookupAllHostAddr(String paramString) throws UnknownHostException {\n        //mock逻辑\n        if (mockHost.keySet().contains(paramString)) {\n            final byte[] arrayOfByte = sun.net.util.IPAddressUtil.textToNumericFormatV4(mockHost.get(paramString));\n            final InetAddress address = InetAddress.getByAddress(paramString, arrayOfByte);\n            return new InetAddress[]{address};\n        } else {\n            return null;\n        }\n    }\n\n    @Override\n    public String getHostByAddr(byte[] paramArrayOfByte) throws UnknownHostException {\n        throw new UnknownHostException();\n    }\n}\n```\n#### 解决JDK的根证书问题\n\n``` java\nimport org.testcontainers.shaded.org.apache.commons.lang3.reflect.FieldUtils;\nimport sun.security.ssl.SSLContextImpl;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.TrustManagerFactory;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.CertificateException;\n\npublic final class FakeX509TrustManager {\n\n    private static final String DOCKER_TLS_KEYSTORE_JKS = \"docker/tls/cacerts\";\n    public static final String KEYSTORE_PASSWORD = \"changeit\";\n\n    public static void fakeTrustManager() {\n        try (InputStream keyStoreInputStream = ClassLoader.getSystemClassLoader().getResourceAsStream(DOCKER_TLS_KEYSTORE_JKS)) {\n            SSLContext defaultSSLContext = SSLContext.getDefault();\n            SSLContextImpl sslContext = (SSLContextImpl) FieldUtils.readField(defaultSSLContext, \"contextSpi\", true);\n            TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n            KeyStore ks = KeyStore.getInstance(\"JKS\");\n            ks.load(keyStoreInputStream, KEYSTORE_PASSWORD.toCharArray());\n            tmf.init(ks);\n            TrustManager[] trustManagers = tmf.getTrustManagers();\n            FieldUtils.writeField(sslContext, \"trustManager\", trustManagers[0], true);\n        } catch (CertificateException | NoSuchAlgorithmException | KeyStoreException | IOException |\n                 IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```\n思路就是将之前已经导入CA证书的本地JDK的KeyStore复用，但是JDK没有暴露对应的API，那就只能通过反射拿到，注意JDK的KeyStore默认密码是changeit，格式是JKS的\n#### 使用\n只需要在单元测试的类里，静态调用一下就可以了\n``` java\nstatic {\n  MockNameService.mockHosts();\n  FakeX509TrustManager.fakeTrustManager();\n}\n```\n\n#### Redis环境问题\n如果有现成的Redis环境，则可以跑集成测试，但是如果没有，那使用docker是个不错的选择，但是单元测试往往需要启动时初始化环境，跑完就销毁即可，那如何将docker和Junit结合呢？  \n可以使用testcontainers，结合docker-compose文件，很方便的测试之前启动docker环境，测试结束销毁docker容器\n``` java\n@Testcontainers\n@IfProfileValue(name = \"spring.profiles.active\", value = \"readwrite\")\npublic class ClientReadWriteTests {\n  @ClassRule\n  @Container\n  public static final DockerComposeContainer masterSlaves = new DockerComposeContainer(new File(masterDockerComposeFile))\n          .withLocalCompose(true);\n}\n```\n另外还可以通过profile来隔离不同的测试场景，比如主从场景，集群场景，读写分离场景等等","source":"_posts/Redis-6-2-使用自签名tls实现加密传输.md","raw":"---\ntitle: Redis 6.2 使用自签名tls实现加密传输\nauthor: 王登武\ndate: 2022-04-21 20:53:16\ncategories:\n  - \"死磕Redis\"\ntags:\n  - \"redis\"\n  - \"tls\"\n---\n### Redis加密传输\nRedis 6.0开始支持tls加密传输，最近刚好要支持，因此需要搭建一套支持加密的Redis环境，于是打算使用自签名来做，但是使用的过程中遇到一些问题，打算记录下来，以方便可能有人也遇到同样的问题。\n### 使用[smallstep](https://smallstep.com/)生成自签名根证书\n为了方便生成多个中间证书，首先生成自己的自签名根证书，然后使用根证书生成更多的中间证书。比如先生成dengwu.wang的根证书，然后再生成master.dengwu.wang，slave1.dengwu.wang，slave2.dengwu.wang等等子域名证书。\n按照官方文档，先安装，mac用户可以使用`brew install step`直接安装，centos可以直接下载二进制文件安装，如下：\n先安装step\n\n``` bash\nwget -O step.tar.gz https://dl.step.sm/gh-release/cli/docs-ca-install/v0.19.0/step_linux_0.19.0_amd64.tar.gz\ntar -xf step.tar.gz\nsudo cp step_0.19.0/bin/step /usr/bin\n```\n再安装step-ca\n\n``` bash\nwget -O step-ca.tar.gz https://dl.step.sm/gh-release/certificates/docs-ca-install/v0.19.0/step-ca_linux_0.19.0_amd64.tar.gz\ntar -xf step-ca.tar.gz\nsudo cp step-ca_0.19.0/bin/step-ca /usr/bin\n```\n由于dl.step.sm本身的证书不被wget信任，如果下载遇到安全提示，加上--no-check-certificate即可\n下载完成后，我们就可以生成根证书了，先执行`step ca init`\n\n``` bash\n$ step ca init\n\n✔ What would you like to name your new PKI? (e.g. Smallstep): Example Inc.\n✔ What DNS names or IP addresses would you like to add to your new CA? (e.g. ca.smallstep.com[,1.1.1.1,etc.]): localhost\n✔ What address will your new CA listen at? (e.g. :443): 127.0.0.1:8443\n✔ What would you like to name the first provisioner for your new CA? (e.g. you@smallstep.com): bob@example.com\n✔ What do you want your password to be? [leave empty and we will generate one]: abc123\n\nGenerating root certificate...\nall done!\n\nGenerating intermediate certificate...\nall done!\n\n✔ Root certificate: /Users/bob/.step/certs/root_ca.crt\n✔ Root private key: /Users/bob/.step/secrets/root_ca_key\n✔ Root fingerprint: 702a094e239c9eec6f0dcd0a5f65e595bf7ed6614012825c5fe3d1ae1b2fd6ee\n✔ Intermediate certificate: /Users/bob/.step/certs/intermediate_ca.crt\n✔ Intermediate private key: /Users/bob/.step/secrets/intermediate_ca_key\n✔ Default configuration: /Users/bob/.step/config/defaults.json\n✔ Certificate Authority configuration: /Users/bob/.step/config/ca.json\n\nYour PKI is ready to go.\n```\n按照提示按需输入即可，一定要记得设置密码，后续还需要使用。\n下面启动根证书服务\n\n``` bash\n$ step-ca $(step path)/config/ca.json\n\nPlease enter the password to decrypt /Users/bob/.step/secrets/intermediate_ca_key: abc123\n\n2022/04/21 21:28:58 Serving HTTPS on 127.0.0.1:8443 ...\n```\n### 通过根证书服务器生成中间证书\n启动成功后，我们就可以导入ca证书\n\n``` bash\n$ step ca bootstrap --ca-url [CA URL] --fingerprint [CA fingerprint]\nThe root certificate has been saved in /home/alice/.step/certs/root_ca.crt.\nYour configuration has been saved in /home/alice/.step/config/defaults.json.\n```\nCA URL替换成你的ca服务地址，比如可能是127.0.0.1:8443，CA fingerprint就是生成根证书的时候的Root fingerprint\n如果找不到了，可以执行`step certificate fingerprint $(step path)/certs/root_ca.crt`获取\n导入成功之后，还需要安装一下，让本地电脑信任，否则会导致本地发送请求连接失败\n\n``` bash\n➜  ~ step certificate install $(step path)/certs/root_ca.crt\nPassword:\nCertificate /Users/wangdengwu/.step/certs/root_ca.crt has been installed.\nX.509v3 Root CA Certificate (ECDSA P-256) [Serial: 2527...6639]\n  Subject:     dengwu.wang Root CA\n  Issuer:      dengwu.wang Root CA\n  Valid from:  2022-04-21T04:45:52Z\n          to:  2032-04-18T04:45:52Z\n```\nMac的话，就可以在钥匙串访问里看到了\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202204212143947.png)\n下面，我们就可以向根证书服务申请中间证书了。\n\n``` bash\nstep ca certificate \"redis.dengwu.wang\" server.crt server.key\n```\n获取ca证书\n\n``` bash\nstep ca root ca.crt\n```\n这样当前文件夹下就有了server.crt,server.key和ca.crt\n### 使用docker启动Redis服务\n为了方便，我们使用docker-compose来启动服务\n\n``` yaml\nversion: \"3.9\"\nservices:\n  master:\n    image: \"bitnami/redis:6.2.6\"\n    restart: always\n    container_name: \"master\"\n    volumes:\n      - \"../tls:/opt/redis/certs\"\n    environment:\n      - TZ=Asia/Shanghai\n      - REDIS_REPLICATION_MODE=master\n      - REDIS_PASSWORD=hello1234\n      - REDIS_TLS_ENABLED=yes\n      - REDIS_TLS_AUTH_CLIENTS=no\n      - REDIS_TLS_CERT_FILE=/opt/redis/certs/redis.crt\n      - REDIS_TLS_KEY_FILE=/opt/redis/certs/redis.key\n      - REDIS_TLS_CA_FILE=/opt/redis/certs/redisCA.crt\n      - REDIS_TLS_PORT=6380\n    command: /opt/bitnami/scripts/redis/run.sh --maxmemory 100mb --tls-replication yes --tls-key-file-pass hello1234\n    ports:\n      - \"6379:6379\"\n      - \"6380:6380\"\n  slave:\n    image: \"bitnami/redis:6.2.6\"\n    restart: always\n    container_name: \"slave\"\n    volumes:\n      - \"../tls:/opt/redis/certs\"\n    environment:\n      - TZ=Asia/Shanghai\n      - REDIS_REPLICATION_MODE=slave\n      - REDIS_MASTER_HOST=master\n      - REDIS_MASTER_PORT_NUMBER=6380\n      - REDIS_MASTER_PASSWORD=hello1234\n      - REDIS_PASSWORD=hello1234\n      - REDIS_TLS_ENABLED=yes\n      - REDIS_TLS_AUTH_CLIENTS=no\n      - REDIS_TLS_CERT_FILE=/opt/redis/certs/redis.crt\n      - REDIS_TLS_KEY_FILE=/opt/redis/certs/redis.key\n      - REDIS_TLS_CA_FILE=/opt/redis/certs/redisCA.crt\n      - REDIS_TLS_PORT=6380\n    command: /opt/bitnami/scripts/redis/run.sh --maxmemory 100mb --tls-replication yes --tls-key-file-pass hello1234\n    expose:\n      - \"6379\"\n      - \"6380\"\n    depends_on:\n      - master\n```\n需要映射tls文件目录，以便redis启动的时候能找到证书，目录结构如下\n![](https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202204212151449.png)\n我们现在可以使用docker-compose up -d来启动了，如果没啥意外的话，就启动成功了。\n下面，我们使用redis-cli来访问一下，由于证书是绑定域名的，如果我们直接访问127.0.0.1的话，是访问失败的，所以还需要修改一下hosts文件绑定域名`127.0.0.1 redis.dengwu.wang`\n绑定完后，我们来连接一下\n\n``` bash\n➜  redis-cli -h redis.dengwu.wang -p 6380 --tls --cacert ca.crt\nredis.dengwu.wang:6380> AUTH hello1234\nOK\nredis.dengwu.wang:6380> info replication\n# Replication\nrole:master\nconnected_slaves:1\nslave0:ip=172.30.0.2,port=6380,state=online,offset=1120,lag=1\nmaster_failover_state:no-failover\nmaster_replid:6c3011ca5166f406cb9e9e7ac61bf5854c1f61b5\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:1120\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:1120\nredis.dengwu.wang:6380>\n```\n至此自签名的Redis主从就搭建完毕，使用ca证书即可访问\n### 使用Redis的Java客户端jedis等访问\n如果你使用Java来访问的话，由于jre的本地ca库并没有当前ca证书，所以还需要导入java的证书库\n我们先使用keytool验证一下当前的ca根证书是否合法\n\n``` bash\nkeytool -v -printcert -file ca.crt\n所有者: CN=dengwu.wang Root CA, O=dengwu.wang\n发布者: CN=dengwu.wang Root CA, O=dengwu.wang\n序列号: be26c0031e2f5b03c517dd5ec02a830f\n有效期为 Thu Apr 21 12:45:52 CST 2022 至 Sun Apr 18 12:45:52 CST 2032\n证书指纹:\n\t MD5:  BD:0A:F7:2B:44:A7:27:3E:6F:6E:82:CC:3C:98:69:56\n\t SHA1: 51:89:F7:4E:7C:3E:AD:DC:92:14:00:28:87:E0:23:E1:EA:D2:88:AC\n\t SHA256: 2D:06:83:E4:28:D5:E5:8C:2E:A9:DF:B0:24:37:0F:B6:46:7A:E8:7B:17:EA:D6:88:15:4F:BA:3F:84:BC:0F:DA\n签名算法名称: SHA256withECDSA\n主体公共密钥算法: 256 位 EC 密钥\n版本: 3\n\n扩展:\n\n#1: ObjectId: 2.5.29.19 Criticality=true\nBasicConstraints:[\n  CA:true\n  PathLen:1\n]\n\n#2: ObjectId: 2.5.29.15 Criticality=true\nKeyUsage [\n  Key_CertSign\n  Crl_Sign\n]\n\n#3: ObjectId: 2.5.29.14 Criticality=false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: 79 5D 02 C3 B7 0E DC 97   56 A6 5A 30 30 30 63 93  y]......V.Z000c.\n0010: 76 33 9A 97                                        v3..\n]\n]\n```\n说明格式没问题，下面导入java的ca库\n\n```\nsudo keytool -import -alias dengwu.wang -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -file ca.crt\nPassword:\n所有者: CN=dengwu.wang Root CA, O=dengwu.wang\n发布者: CN=dengwu.wang Root CA, O=dengwu.wang\n序列号: be26c0031e2f5b03c517dd5ec02a830f\n有效期为 Thu Apr 21 12:45:52 CST 2022 至 Sun Apr 18 12:45:52 CST 2032\n证书指纹:\n\t MD5:  BD:0A:F7:2B:44:A7:27:3E:6F:6E:82:CC:3C:98:69:56\n\t SHA1: 51:89:F7:4E:7C:3E:AD:DC:92:14:00:28:87:E0:23:E1:EA:D2:88:AC\n\t SHA256: 2D:06:83:E4:28:D5:E5:8C:2E:A9:DF:B0:24:37:0F:B6:46:7A:E8:7B:17:EA:D6:88:15:4F:BA:3F:84:BC:0F:DA\n签名算法名称: SHA256withECDSA\n主体公共密钥算法: 256 位 EC 密钥\n版本: 3\n\n扩展:\n\n#1: ObjectId: 2.5.29.19 Criticality=true\nBasicConstraints:[\n  CA:true\n  PathLen:1\n]\n\n#2: ObjectId: 2.5.29.15 Criticality=true\nKeyUsage [\n  Key_CertSign\n  Crl_Sign\n]\n\n#3: ObjectId: 2.5.29.14 Criticality=false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: 79 5D 02 C3 B7 0E DC 97   56 A6 5A 30 30 30 63 93  y]......V.Z000c.\n0010: 76 33 9A 97                                        v3..\n]\n]\n\n是否信任此证书? [否]:  是\n证书已添加到密钥库中\n```\n执行`keytool -list -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit |grep dengwu.wang`搜索一下\ndengwu.wang, 2022-4-21, trustedCertEntry,\n说明已经成功，我们使用jedis来试一下\n\n``` java\n@Test\npublic void test_redis_tls_with_jedis(){\n    Jedis jedis = new Jedis(\"rediss://redis.dengwu.wang:6380\");\n    jedis.auth(\"hello1234\");\n    jedis.set(\"1\",\"1\", SetParams.setParams().ex(10));\n}\n```\n执行成功。\n\n### 单元测试\n有时候我们需要执行单元测试，如果是本地跑，可以方便的导入证书和修改hosts，但是有时候测试需要在cd服务器上跑，环境不受控制，那如何解决域名和证书问题呢？ \n答案就是fake或mock，我们可以通过修改jdk运行时的私有数据，来达到绑定域名和导入证书的目的。\n#### 解决域名问题\n\n``` java\nimport com.google.common.collect.ImmutableMap;\nimport org.testcontainers.shaded.org.apache.commons.lang3.reflect.FieldUtils;\nimport sun.net.spi.nameservice.NameService;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.List;\nimport java.util.Map;\n\n@SuppressWarnings(\"all\")\npublic final class MockNameService implements NameService {\n    private final String local = \"127.0.0.1\";\n    private final Map<String, String> mockHost = ImmutableMap\n            .<String, String>builder()\n            .put(\"master.dengwu.wang\", local)\n            .put(\"slave1.dengwu.wang\", local)\n            .put(\"slave2.dengwu.wang\", local)\n            .build();\n\n    public static void mockHosts() {\n        try {\n            //通过反射拿到nameService列表\n            List<NameService> nameServices =\n                    (List<sun.net.spi.nameservice.NameService>)\n                            FieldUtils.readStaticField(InetAddress.class, \"nameServices\", true);\n            //加入自己的mockNameService\n            nameServices.add(new MockNameService());\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public InetAddress[] lookupAllHostAddr(String paramString) throws UnknownHostException {\n        //mock逻辑\n        if (mockHost.keySet().contains(paramString)) {\n            final byte[] arrayOfByte = sun.net.util.IPAddressUtil.textToNumericFormatV4(mockHost.get(paramString));\n            final InetAddress address = InetAddress.getByAddress(paramString, arrayOfByte);\n            return new InetAddress[]{address};\n        } else {\n            return null;\n        }\n    }\n\n    @Override\n    public String getHostByAddr(byte[] paramArrayOfByte) throws UnknownHostException {\n        throw new UnknownHostException();\n    }\n}\n```\n#### 解决JDK的根证书问题\n\n``` java\nimport org.testcontainers.shaded.org.apache.commons.lang3.reflect.FieldUtils;\nimport sun.security.ssl.SSLContextImpl;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.TrustManagerFactory;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.CertificateException;\n\npublic final class FakeX509TrustManager {\n\n    private static final String DOCKER_TLS_KEYSTORE_JKS = \"docker/tls/cacerts\";\n    public static final String KEYSTORE_PASSWORD = \"changeit\";\n\n    public static void fakeTrustManager() {\n        try (InputStream keyStoreInputStream = ClassLoader.getSystemClassLoader().getResourceAsStream(DOCKER_TLS_KEYSTORE_JKS)) {\n            SSLContext defaultSSLContext = SSLContext.getDefault();\n            SSLContextImpl sslContext = (SSLContextImpl) FieldUtils.readField(defaultSSLContext, \"contextSpi\", true);\n            TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n            KeyStore ks = KeyStore.getInstance(\"JKS\");\n            ks.load(keyStoreInputStream, KEYSTORE_PASSWORD.toCharArray());\n            tmf.init(ks);\n            TrustManager[] trustManagers = tmf.getTrustManagers();\n            FieldUtils.writeField(sslContext, \"trustManager\", trustManagers[0], true);\n        } catch (CertificateException | NoSuchAlgorithmException | KeyStoreException | IOException |\n                 IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```\n思路就是将之前已经导入CA证书的本地JDK的KeyStore复用，但是JDK没有暴露对应的API，那就只能通过反射拿到，注意JDK的KeyStore默认密码是changeit，格式是JKS的\n#### 使用\n只需要在单元测试的类里，静态调用一下就可以了\n``` java\nstatic {\n  MockNameService.mockHosts();\n  FakeX509TrustManager.fakeTrustManager();\n}\n```\n\n#### Redis环境问题\n如果有现成的Redis环境，则可以跑集成测试，但是如果没有，那使用docker是个不错的选择，但是单元测试往往需要启动时初始化环境，跑完就销毁即可，那如何将docker和Junit结合呢？  \n可以使用testcontainers，结合docker-compose文件，很方便的测试之前启动docker环境，测试结束销毁docker容器\n``` java\n@Testcontainers\n@IfProfileValue(name = \"spring.profiles.active\", value = \"readwrite\")\npublic class ClientReadWriteTests {\n  @ClassRule\n  @Container\n  public static final DockerComposeContainer masterSlaves = new DockerComposeContainer(new File(masterDockerComposeFile))\n          .withLocalCompose(true);\n}\n```\n另外还可以通过profile来隔离不同的测试场景，比如主从场景，集群场景，读写分离场景等等","slug":"Redis-6-2-使用自签名tls实现加密传输","published":1,"updated":"2022-04-30T04:33:01.610Z","_id":"cl2933vhl0000kj9g9x2m9awm","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Redis加密传输\"><a href=\"#Redis加密传输\" class=\"headerlink\" title=\"Redis加密传输\"></a>Redis加密传输</h3><p>Redis 6.0开始支持tls加密传输，最近刚好要支持，因此需要搭建一套支持加密的Redis环境，于是打算使用自签名来做，但是使用的过程中遇到一些问题，打算记录下来，以方便可能有人也遇到同样的问题。</p>\n<h3 id=\"使用smallstep生成自签名根证书\"><a href=\"#使用smallstep生成自签名根证书\" class=\"headerlink\" title=\"使用smallstep生成自签名根证书\"></a>使用<a href=\"https://smallstep.com/\">smallstep</a>生成自签名根证书</h3><p>为了方便生成多个中间证书，首先生成自己的自签名根证书，然后使用根证书生成更多的中间证书。比如先生成dengwu.wang的根证书，然后再生成master.dengwu.wang，slave1.dengwu.wang，slave2.dengwu.wang等等子域名证书。<br>按照官方文档，先安装，mac用户可以使用<code>brew install step</code>直接安装，centos可以直接下载二进制文件安装，如下：<br>先安装step</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -O step.tar.gz https://dl.step.sm/gh-release/cli/docs-ca-install/v0.19.0/step_linux_0.19.0_amd64.tar.gz\n<span class=\"token function\">tar</span> -xf step.tar.gz\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> step_0.19.0/bin/step /usr/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>再安装step-ca</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -O step-ca.tar.gz https://dl.step.sm/gh-release/certificates/docs-ca-install/v0.19.0/step-ca_linux_0.19.0_amd64.tar.gz\n<span class=\"token function\">tar</span> -xf step-ca.tar.gz\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> step-ca_0.19.0/bin/step-ca /usr/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>由于dl.step.sm本身的证书不被wget信任，如果下载遇到安全提示，加上–no-check-certificate即可<br>下载完成后，我们就可以生成根证书了，先执行<code>step ca init</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ step ca init\n\n✔ What would you like to name your new PKI? <span class=\"token punctuation\">(</span>e.g. Smallstep<span class=\"token punctuation\">)</span>: Example Inc.\n✔ What DNS names or IP addresses would you like to <span class=\"token function\">add</span> to your new CA? <span class=\"token punctuation\">(</span>e.g. ca.smallstep.com<span class=\"token punctuation\">[</span>,1.1.1.1,etc.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>: localhost\n✔ What address will your new CA listen at? <span class=\"token punctuation\">(</span>e.g. :443<span class=\"token punctuation\">)</span>: <span class=\"token number\">127.0</span>.0.1:8443\n✔ What would you like to name the first provisioner <span class=\"token keyword\">for</span> your new CA? <span class=\"token punctuation\">(</span>e.g. you@smallstep.com<span class=\"token punctuation\">)</span>: bob@example.com\n✔ What <span class=\"token keyword\">do</span> you want your password to be? <span class=\"token punctuation\">[</span>leave empty and we will generate one<span class=\"token punctuation\">]</span>: abc123\n\nGenerating root certificate<span class=\"token punctuation\">..</span>.\nall done<span class=\"token operator\">!</span>\n\nGenerating intermediate certificate<span class=\"token punctuation\">..</span>.\nall done<span class=\"token operator\">!</span>\n\n✔ Root certificate: /Users/bob/.step/certs/root_ca.crt\n✔ Root private key: /Users/bob/.step/secrets/root_ca_key\n✔ Root fingerprint: 702a094e239c9eec6f0dcd0a5f65e595bf7ed6614012825c5fe3d1ae1b2fd6ee\n✔ Intermediate certificate: /Users/bob/.step/certs/intermediate_ca.crt\n✔ Intermediate private key: /Users/bob/.step/secrets/intermediate_ca_key\n✔ Default configuration: /Users/bob/.step/config/defaults.json\n✔ Certificate Authority configuration: /Users/bob/.step/config/ca.json\n\nYour PKI is ready to go.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>按照提示按需输入即可，一定要记得设置密码，后续还需要使用。<br>下面启动根证书服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ step-ca <span class=\"token variable\"><span class=\"token variable\">$(</span>step path<span class=\"token variable\">)</span></span>/config/ca.json\n\nPlease enter the password to decrypt /Users/bob/.step/secrets/intermediate_ca_key: abc123\n\n<span class=\"token number\">2022</span>/04/21 <span class=\"token number\">21</span>:28:58 Serving HTTPS on <span class=\"token number\">127.0</span>.0.1:8443 <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"通过根证书服务器生成中间证书\"><a href=\"#通过根证书服务器生成中间证书\" class=\"headerlink\" title=\"通过根证书服务器生成中间证书\"></a>通过根证书服务器生成中间证书</h3><p>启动成功后，我们就可以导入ca证书</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ step ca bootstrap --ca-url <span class=\"token punctuation\">[</span>CA URL<span class=\"token punctuation\">]</span> --fingerprint <span class=\"token punctuation\">[</span>CA fingerprint<span class=\"token punctuation\">]</span>\nThe root certificate has been saved <span class=\"token keyword\">in</span> /home/alice/.step/certs/root_ca.crt.\nYour configuration has been saved <span class=\"token keyword\">in</span> /home/alice/.step/config/defaults.json.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>CA URL替换成你的ca服务地址，比如可能是127.0.0.1:8443，CA fingerprint就是生成根证书的时候的Root fingerprint<br>如果找不到了，可以执行<code>step certificate fingerprint $(step path)/certs/root_ca.crt</code>获取<br>导入成功之后，还需要安装一下，让本地电脑信任，否则会导致本地发送请求连接失败</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">➜  ~ step certificate <span class=\"token function\">install</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>step path<span class=\"token variable\">)</span></span>/certs/root_ca.crt\nPassword:\nCertificate /Users/wangdengwu/.step/certs/root_ca.crt has been installed.\nX.509v3 Root CA Certificate <span class=\"token punctuation\">(</span>ECDSA P-256<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Serial: <span class=\"token number\">2527</span><span class=\"token punctuation\">..</span>.6639<span class=\"token punctuation\">]</span>\n  Subject:     dengwu.wang Root CA\n  Issuer:      dengwu.wang Root CA\n  Valid from:  <span class=\"token number\">2022</span>-04-21T04:45:52Z\n          to:  <span class=\"token number\">2032</span>-04-18T04:45:52Z<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Mac的话，就可以在钥匙串访问里看到了<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202204212143947.png\"><br>下面，我们就可以向根证书服务申请中间证书了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">step ca certificate <span class=\"token string\">\"redis.dengwu.wang\"</span> server.crt server.key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>获取ca证书</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">step ca root ca.crt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样当前文件夹下就有了server.crt,server.key和ca.crt</p>\n<h3 id=\"使用docker启动Redis服务\"><a href=\"#使用docker启动Redis服务\" class=\"headerlink\" title=\"使用docker启动Redis服务\"></a>使用docker启动Redis服务</h3><p>为了方便，我们使用docker-compose来启动服务</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.9\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bitnami/redis:6.2.6\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"master\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"../tls:/opt/redis/certs\"</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> TZ=Asia/Shanghai\n      <span class=\"token punctuation\">-</span> REDIS_REPLICATION_MODE=master\n      <span class=\"token punctuation\">-</span> REDIS_PASSWORD=hello1234\n      <span class=\"token punctuation\">-</span> REDIS_TLS_ENABLED=yes\n      <span class=\"token punctuation\">-</span> REDIS_TLS_AUTH_CLIENTS=no\n      <span class=\"token punctuation\">-</span> REDIS_TLS_CERT_FILE=/opt/redis/certs/redis.crt\n      <span class=\"token punctuation\">-</span> REDIS_TLS_KEY_FILE=/opt/redis/certs/redis.key\n      <span class=\"token punctuation\">-</span> REDIS_TLS_CA_FILE=/opt/redis/certs/redisCA.crt\n      <span class=\"token punctuation\">-</span> REDIS_TLS_PORT=6380\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /opt/bitnami/scripts/redis/run.sh <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>maxmemory 100mb <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>tls<span class=\"token punctuation\">-</span>replication yes <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>tls<span class=\"token punctuation\">-</span>key<span class=\"token punctuation\">-</span>file<span class=\"token punctuation\">-</span>pass hello1234\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6379:6379\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6380:6380\"</span>\n  <span class=\"token key atrule\">slave</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bitnami/redis:6.2.6\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"slave\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"../tls:/opt/redis/certs\"</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> TZ=Asia/Shanghai\n      <span class=\"token punctuation\">-</span> REDIS_REPLICATION_MODE=slave\n      <span class=\"token punctuation\">-</span> REDIS_MASTER_HOST=master\n      <span class=\"token punctuation\">-</span> REDIS_MASTER_PORT_NUMBER=6380\n      <span class=\"token punctuation\">-</span> REDIS_MASTER_PASSWORD=hello1234\n      <span class=\"token punctuation\">-</span> REDIS_PASSWORD=hello1234\n      <span class=\"token punctuation\">-</span> REDIS_TLS_ENABLED=yes\n      <span class=\"token punctuation\">-</span> REDIS_TLS_AUTH_CLIENTS=no\n      <span class=\"token punctuation\">-</span> REDIS_TLS_CERT_FILE=/opt/redis/certs/redis.crt\n      <span class=\"token punctuation\">-</span> REDIS_TLS_KEY_FILE=/opt/redis/certs/redis.key\n      <span class=\"token punctuation\">-</span> REDIS_TLS_CA_FILE=/opt/redis/certs/redisCA.crt\n      <span class=\"token punctuation\">-</span> REDIS_TLS_PORT=6380\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /opt/bitnami/scripts/redis/run.sh <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>maxmemory 100mb <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>tls<span class=\"token punctuation\">-</span>replication yes <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>tls<span class=\"token punctuation\">-</span>key<span class=\"token punctuation\">-</span>file<span class=\"token punctuation\">-</span>pass hello1234\n    <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6379\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6380\"</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要映射tls文件目录，以便redis启动的时候能找到证书，目录结构如下<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202204212151449.png\"><br>我们现在可以使用docker-compose up -d来启动了，如果没啥意外的话，就启动成功了。<br>下面，我们使用redis-cli来访问一下，由于证书是绑定域名的，如果我们直接访问127.0.0.1的话，是访问失败的，所以还需要修改一下hosts文件绑定域名<code>127.0.0.1 redis.dengwu.wang</code><br>绑定完后，我们来连接一下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">➜  redis-cli -h redis.dengwu.wang -p <span class=\"token number\">6380</span> --tls --cacert ca.crt\nredis.dengwu.wang:638<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span> AUTH hello1234\nOK\nredis.dengwu.wang:638<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span> info replication\n<span class=\"token comment\"># Replication</span>\nrole:master\nconnected_slaves:1\nslave0:ip<span class=\"token operator\">=</span><span class=\"token number\">172.30</span>.0.2,port<span class=\"token operator\">=</span><span class=\"token number\">6380</span>,state<span class=\"token operator\">=</span>online,offset<span class=\"token operator\">=</span><span class=\"token number\">1120</span>,lag<span class=\"token operator\">=</span><span class=\"token number\">1</span>\nmaster_failover_state:no-failover\nmaster_replid:6c3011ca5166f406cb9e9e7ac61bf5854c1f61b5\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:1120\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:1120\nredis.dengwu.wang:638<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>至此自签名的Redis主从就搭建完毕，使用ca证书即可访问</p>\n<h3 id=\"使用Redis的Java客户端jedis等访问\"><a href=\"#使用Redis的Java客户端jedis等访问\" class=\"headerlink\" title=\"使用Redis的Java客户端jedis等访问\"></a>使用Redis的Java客户端jedis等访问</h3><p>如果你使用Java来访问的话，由于jre的本地ca库并没有当前ca证书，所以还需要导入java的证书库<br>我们先使用keytool验证一下当前的ca根证书是否合法</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">keytool -v -printcert -file ca.crt\n所有者: <span class=\"token assign-left variable\">CN</span><span class=\"token operator\">=</span>dengwu.wang Root CA, <span class=\"token assign-left variable\">O</span><span class=\"token operator\">=</span>dengwu.wang\n发布者: <span class=\"token assign-left variable\">CN</span><span class=\"token operator\">=</span>dengwu.wang Root CA, <span class=\"token assign-left variable\">O</span><span class=\"token operator\">=</span>dengwu.wang\n序列号: be26c0031e2f5b03c517dd5ec02a830f\n有效期为 Thu Apr <span class=\"token number\">21</span> <span class=\"token number\">12</span>:45:52 CST <span class=\"token number\">2022</span> 至 Sun Apr <span class=\"token number\">18</span> <span class=\"token number\">12</span>:45:52 CST <span class=\"token number\">2032</span>\n证书指纹:\n\t MD5:  BD:0A:F7:2B:44:A7:27:3E:6F:6E:82:CC:3C:98:69:56\n\t SHA1: <span class=\"token number\">51</span>:89:F7:4E:7C:3E:AD:DC:92:14:00:28:87:E0:23:E1:EA:D2:88:AC\n\t SHA256: 2D:06:83:E4:28:D5:E5:8C:2E:A9:DF:B0:24:37:0F:B6:46:7A:E8:7B:17:EA:D6:88:15:4F:BA:3F:84:BC:0F:DA\n签名算法名称: SHA256withECDSA\n主体公共密钥算法: <span class=\"token number\">256</span> 位 EC 密钥\n版本: <span class=\"token number\">3</span>\n\n扩展:\n\n<span class=\"token comment\">#1: ObjectId: 2.5.29.19 Criticality=true</span>\nBasicConstraints:<span class=\"token punctuation\">[</span>\n  CA:true\n  PathLen:1\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#2: ObjectId: 2.5.29.15 Criticality=true</span>\nKeyUsage <span class=\"token punctuation\">[</span>\n  Key_CertSign\n  Crl_Sign\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#3: ObjectId: 2.5.29.14 Criticality=false</span>\nSubjectKeyIdentifier <span class=\"token punctuation\">[</span>\nKeyIdentifier <span class=\"token punctuation\">[</span>\n0000: <span class=\"token number\">79</span> 5D 02 C3 B7 0E DC <span class=\"token number\">97</span>   <span class=\"token number\">56</span> A6 5A <span class=\"token number\">30</span> <span class=\"token number\">30</span> <span class=\"token number\">30</span> <span class=\"token number\">63</span> <span class=\"token number\">93</span>  y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>V.Z000c.\n0010: <span class=\"token number\">76</span> <span class=\"token number\">33</span> 9A <span class=\"token number\">97</span>                                        v3<span class=\"token punctuation\">..</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明格式没问题，下面导入java的ca库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo keytool -import -alias dengwu.wang -keystore $JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;security&#x2F;cacerts -storepass changeit -file ca.crt\nPassword:\n所有者: CN&#x3D;dengwu.wang Root CA, O&#x3D;dengwu.wang\n发布者: CN&#x3D;dengwu.wang Root CA, O&#x3D;dengwu.wang\n序列号: be26c0031e2f5b03c517dd5ec02a830f\n有效期为 Thu Apr 21 12:45:52 CST 2022 至 Sun Apr 18 12:45:52 CST 2032\n证书指纹:\n\t MD5:  BD:0A:F7:2B:44:A7:27:3E:6F:6E:82:CC:3C:98:69:56\n\t SHA1: 51:89:F7:4E:7C:3E:AD:DC:92:14:00:28:87:E0:23:E1:EA:D2:88:AC\n\t SHA256: 2D:06:83:E4:28:D5:E5:8C:2E:A9:DF:B0:24:37:0F:B6:46:7A:E8:7B:17:EA:D6:88:15:4F:BA:3F:84:BC:0F:DA\n签名算法名称: SHA256withECDSA\n主体公共密钥算法: 256 位 EC 密钥\n版本: 3\n\n扩展:\n\n#1: ObjectId: 2.5.29.19 Criticality&#x3D;true\nBasicConstraints:[\n  CA:true\n  PathLen:1\n]\n\n#2: ObjectId: 2.5.29.15 Criticality&#x3D;true\nKeyUsage [\n  Key_CertSign\n  Crl_Sign\n]\n\n#3: ObjectId: 2.5.29.14 Criticality&#x3D;false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: 79 5D 02 C3 B7 0E DC 97   56 A6 5A 30 30 30 63 93  y]......V.Z000c.\n0010: 76 33 9A 97                                        v3..\n]\n]\n\n是否信任此证书? [否]:  是\n证书已添加到密钥库中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行<code>keytool -list -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit |grep dengwu.wang</code>搜索一下<br>dengwu.wang, 2022-4-21, trustedCertEntry,<br>说明已经成功，我们使用jedis来试一下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_redis_tls_with_jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rediss://redis.dengwu.wang:6380\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SetParams</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行成功。</p>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>有时候我们需要执行单元测试，如果是本地跑，可以方便的导入证书和修改hosts，但是有时候测试需要在cd服务器上跑，环境不受控制，那如何解决域名和证书问题呢？<br>答案就是fake或mock，我们可以通过修改jdk运行时的私有数据，来达到绑定域名和导入证书的目的。</p>\n<h4 id=\"解决域名问题\"><a href=\"#解决域名问题\" class=\"headerlink\" title=\"解决域名问题\"></a>解决域名问题</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ImmutableMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>testcontainers<span class=\"token punctuation\">.</span>shaded<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span>nameservice<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NameService</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnknownHostException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MockNameService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NameService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> local <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mockHost <span class=\"token operator\">=</span> <span class=\"token class-name\">ImmutableMap</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"master.dengwu.wang\"</span><span class=\"token punctuation\">,</span> local<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slave1.dengwu.wang\"</span><span class=\"token punctuation\">,</span> local<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slave2.dengwu.wang\"</span><span class=\"token punctuation\">,</span> local<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mockHosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//通过反射拿到nameService列表</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NameService</span><span class=\"token punctuation\">></span></span> nameServices <span class=\"token operator\">=</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span>nameservice<span class=\"token punctuation\">.</span></span>NameService</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n                            <span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">readStaticField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nameServices\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//加入自己的mockNameService</span>\n            nameServices<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MockNameService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">lookupAllHostAddr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> paramString<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnknownHostException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//mock逻辑</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mockHost<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>paramString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayOfByte <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>IPAddressUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">textToNumericFormatV4</span><span class=\"token punctuation\">(</span>mockHost<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>paramString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">InetAddress</span> address <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByAddress</span><span class=\"token punctuation\">(</span>paramString<span class=\"token punctuation\">,</span> arrayOfByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>address<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getHostByAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramArrayOfByte<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnknownHostException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnknownHostException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"解决JDK的根证书问题\"><a href=\"#解决JDK的根证书问题\" class=\"headerlink\" title=\"解决JDK的根证书问题\"></a>解决JDK的根证书问题</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>testcontainers<span class=\"token punctuation\">.</span>shaded<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SSLContextImpl</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SSLContext</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TrustManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TrustManagerFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeyStore</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeyStoreException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoSuchAlgorithmException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>cert<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CertificateException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeX509TrustManager</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DOCKER_TLS_KEYSTORE_JKS <span class=\"token operator\">=</span> <span class=\"token string\">\"docker/tls/cacerts\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> KEYSTORE_PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">\"changeit\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fakeTrustManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> keyStoreInputStream <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>DOCKER_TLS_KEYSTORE_JKS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">SSLContext</span> defaultSSLContext <span class=\"token operator\">=</span> <span class=\"token class-name\">SSLContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">SSLContextImpl</span> sslContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SSLContextImpl</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">readField</span><span class=\"token punctuation\">(</span>defaultSSLContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"contextSpi\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">TrustManagerFactory</span> tmf <span class=\"token operator\">=</span> <span class=\"token class-name\">TrustManagerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SunX509\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">KeyStore</span> ks <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyStore</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JKS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ks<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>keyStoreInputStream<span class=\"token punctuation\">,</span> KEYSTORE_PASSWORD<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tmf<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>ks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">TrustManager</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> trustManagers <span class=\"token operator\">=</span> tmf<span class=\"token punctuation\">.</span><span class=\"token function\">getTrustManagers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeField</span><span class=\"token punctuation\">(</span>sslContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"trustManager\"</span><span class=\"token punctuation\">,</span> trustManagers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CertificateException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">NoSuchAlgorithmException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">KeyStoreException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span>\n                 <span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>思路就是将之前已经导入CA证书的本地JDK的KeyStore复用，但是JDK没有暴露对应的API，那就只能通过反射拿到，注意JDK的KeyStore默认密码是changeit，格式是JKS的</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>只需要在单元测试的类里，静态调用一下就可以了</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">MockNameService</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockHosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">FakeX509TrustManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">fakeTrustManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Redis环境问题\"><a href=\"#Redis环境问题\" class=\"headerlink\" title=\"Redis环境问题\"></a>Redis环境问题</h4><p>如果有现成的Redis环境，则可以跑集成测试，但是如果没有，那使用docker是个不错的选择，但是单元测试往往需要启动时初始化环境，跑完就销毁即可，那如何将docker和Junit结合呢？<br>可以使用testcontainers，结合docker-compose文件，很方便的测试之前启动docker环境，测试结束销毁docker容器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Testcontainers</span>\n<span class=\"token annotation punctuation\">@IfProfileValue</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.profiles.active\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"readwrite\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientReadWriteTests</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token annotation punctuation\">@ClassRule</span>\n  <span class=\"token annotation punctuation\">@Container</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DockerComposeContainer</span> masterSlaves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DockerComposeContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>masterDockerComposeFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">withLocalCompose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另外还可以通过profile来隔离不同的测试场景，比如主从场景，集群场景，读写分离场景等等</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Redis加密传输\"><a href=\"#Redis加密传输\" class=\"headerlink\" title=\"Redis加密传输\"></a>Redis加密传输</h3><p>Redis 6.0开始支持tls加密传输，最近刚好要支持，因此需要搭建一套支持加密的Redis环境，于是打算使用自签名来做，但是使用的过程中遇到一些问题，打算记录下来，以方便可能有人也遇到同样的问题。</p>\n<h3 id=\"使用smallstep生成自签名根证书\"><a href=\"#使用smallstep生成自签名根证书\" class=\"headerlink\" title=\"使用smallstep生成自签名根证书\"></a>使用<a href=\"https://smallstep.com/\">smallstep</a>生成自签名根证书</h3><p>为了方便生成多个中间证书，首先生成自己的自签名根证书，然后使用根证书生成更多的中间证书。比如先生成dengwu.wang的根证书，然后再生成master.dengwu.wang，slave1.dengwu.wang，slave2.dengwu.wang等等子域名证书。<br>按照官方文档，先安装，mac用户可以使用<code>brew install step</code>直接安装，centos可以直接下载二进制文件安装，如下：<br>先安装step</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -O step.tar.gz https://dl.step.sm/gh-release/cli/docs-ca-install/v0.19.0/step_linux_0.19.0_amd64.tar.gz\n<span class=\"token function\">tar</span> -xf step.tar.gz\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> step_0.19.0/bin/step /usr/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>再安装step-ca</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -O step-ca.tar.gz https://dl.step.sm/gh-release/certificates/docs-ca-install/v0.19.0/step-ca_linux_0.19.0_amd64.tar.gz\n<span class=\"token function\">tar</span> -xf step-ca.tar.gz\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> step-ca_0.19.0/bin/step-ca /usr/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>由于dl.step.sm本身的证书不被wget信任，如果下载遇到安全提示，加上–no-check-certificate即可<br>下载完成后，我们就可以生成根证书了，先执行<code>step ca init</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ step ca init\n\n✔ What would you like to name your new PKI? <span class=\"token punctuation\">(</span>e.g. Smallstep<span class=\"token punctuation\">)</span>: Example Inc.\n✔ What DNS names or IP addresses would you like to <span class=\"token function\">add</span> to your new CA? <span class=\"token punctuation\">(</span>e.g. ca.smallstep.com<span class=\"token punctuation\">[</span>,1.1.1.1,etc.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>: localhost\n✔ What address will your new CA listen at? <span class=\"token punctuation\">(</span>e.g. :443<span class=\"token punctuation\">)</span>: <span class=\"token number\">127.0</span>.0.1:8443\n✔ What would you like to name the first provisioner <span class=\"token keyword\">for</span> your new CA? <span class=\"token punctuation\">(</span>e.g. you@smallstep.com<span class=\"token punctuation\">)</span>: bob@example.com\n✔ What <span class=\"token keyword\">do</span> you want your password to be? <span class=\"token punctuation\">[</span>leave empty and we will generate one<span class=\"token punctuation\">]</span>: abc123\n\nGenerating root certificate<span class=\"token punctuation\">..</span>.\nall done<span class=\"token operator\">!</span>\n\nGenerating intermediate certificate<span class=\"token punctuation\">..</span>.\nall done<span class=\"token operator\">!</span>\n\n✔ Root certificate: /Users/bob/.step/certs/root_ca.crt\n✔ Root private key: /Users/bob/.step/secrets/root_ca_key\n✔ Root fingerprint: 702a094e239c9eec6f0dcd0a5f65e595bf7ed6614012825c5fe3d1ae1b2fd6ee\n✔ Intermediate certificate: /Users/bob/.step/certs/intermediate_ca.crt\n✔ Intermediate private key: /Users/bob/.step/secrets/intermediate_ca_key\n✔ Default configuration: /Users/bob/.step/config/defaults.json\n✔ Certificate Authority configuration: /Users/bob/.step/config/ca.json\n\nYour PKI is ready to go.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>按照提示按需输入即可，一定要记得设置密码，后续还需要使用。<br>下面启动根证书服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ step-ca <span class=\"token variable\"><span class=\"token variable\">$(</span>step path<span class=\"token variable\">)</span></span>/config/ca.json\n\nPlease enter the password to decrypt /Users/bob/.step/secrets/intermediate_ca_key: abc123\n\n<span class=\"token number\">2022</span>/04/21 <span class=\"token number\">21</span>:28:58 Serving HTTPS on <span class=\"token number\">127.0</span>.0.1:8443 <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"通过根证书服务器生成中间证书\"><a href=\"#通过根证书服务器生成中间证书\" class=\"headerlink\" title=\"通过根证书服务器生成中间证书\"></a>通过根证书服务器生成中间证书</h3><p>启动成功后，我们就可以导入ca证书</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ step ca bootstrap --ca-url <span class=\"token punctuation\">[</span>CA URL<span class=\"token punctuation\">]</span> --fingerprint <span class=\"token punctuation\">[</span>CA fingerprint<span class=\"token punctuation\">]</span>\nThe root certificate has been saved <span class=\"token keyword\">in</span> /home/alice/.step/certs/root_ca.crt.\nYour configuration has been saved <span class=\"token keyword\">in</span> /home/alice/.step/config/defaults.json.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>CA URL替换成你的ca服务地址，比如可能是127.0.0.1:8443，CA fingerprint就是生成根证书的时候的Root fingerprint<br>如果找不到了，可以执行<code>step certificate fingerprint $(step path)/certs/root_ca.crt</code>获取<br>导入成功之后，还需要安装一下，让本地电脑信任，否则会导致本地发送请求连接失败</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">➜  ~ step certificate <span class=\"token function\">install</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>step path<span class=\"token variable\">)</span></span>/certs/root_ca.crt\nPassword:\nCertificate /Users/wangdengwu/.step/certs/root_ca.crt has been installed.\nX.509v3 Root CA Certificate <span class=\"token punctuation\">(</span>ECDSA P-256<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>Serial: <span class=\"token number\">2527</span><span class=\"token punctuation\">..</span>.6639<span class=\"token punctuation\">]</span>\n  Subject:     dengwu.wang Root CA\n  Issuer:      dengwu.wang Root CA\n  Valid from:  <span class=\"token number\">2022</span>-04-21T04:45:52Z\n          to:  <span class=\"token number\">2032</span>-04-18T04:45:52Z<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Mac的话，就可以在钥匙串访问里看到了<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202204212143947.png\"><br>下面，我们就可以向根证书服务申请中间证书了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">step ca certificate <span class=\"token string\">\"redis.dengwu.wang\"</span> server.crt server.key<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>获取ca证书</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">step ca root ca.crt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样当前文件夹下就有了server.crt,server.key和ca.crt</p>\n<h3 id=\"使用docker启动Redis服务\"><a href=\"#使用docker启动Redis服务\" class=\"headerlink\" title=\"使用docker启动Redis服务\"></a>使用docker启动Redis服务</h3><p>为了方便，我们使用docker-compose来启动服务</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.9\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bitnami/redis:6.2.6\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"master\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"../tls:/opt/redis/certs\"</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> TZ=Asia/Shanghai\n      <span class=\"token punctuation\">-</span> REDIS_REPLICATION_MODE=master\n      <span class=\"token punctuation\">-</span> REDIS_PASSWORD=hello1234\n      <span class=\"token punctuation\">-</span> REDIS_TLS_ENABLED=yes\n      <span class=\"token punctuation\">-</span> REDIS_TLS_AUTH_CLIENTS=no\n      <span class=\"token punctuation\">-</span> REDIS_TLS_CERT_FILE=/opt/redis/certs/redis.crt\n      <span class=\"token punctuation\">-</span> REDIS_TLS_KEY_FILE=/opt/redis/certs/redis.key\n      <span class=\"token punctuation\">-</span> REDIS_TLS_CA_FILE=/opt/redis/certs/redisCA.crt\n      <span class=\"token punctuation\">-</span> REDIS_TLS_PORT=6380\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /opt/bitnami/scripts/redis/run.sh <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>maxmemory 100mb <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>tls<span class=\"token punctuation\">-</span>replication yes <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>tls<span class=\"token punctuation\">-</span>key<span class=\"token punctuation\">-</span>file<span class=\"token punctuation\">-</span>pass hello1234\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6379:6379\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6380:6380\"</span>\n  <span class=\"token key atrule\">slave</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bitnami/redis:6.2.6\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"slave\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"../tls:/opt/redis/certs\"</span>\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> TZ=Asia/Shanghai\n      <span class=\"token punctuation\">-</span> REDIS_REPLICATION_MODE=slave\n      <span class=\"token punctuation\">-</span> REDIS_MASTER_HOST=master\n      <span class=\"token punctuation\">-</span> REDIS_MASTER_PORT_NUMBER=6380\n      <span class=\"token punctuation\">-</span> REDIS_MASTER_PASSWORD=hello1234\n      <span class=\"token punctuation\">-</span> REDIS_PASSWORD=hello1234\n      <span class=\"token punctuation\">-</span> REDIS_TLS_ENABLED=yes\n      <span class=\"token punctuation\">-</span> REDIS_TLS_AUTH_CLIENTS=no\n      <span class=\"token punctuation\">-</span> REDIS_TLS_CERT_FILE=/opt/redis/certs/redis.crt\n      <span class=\"token punctuation\">-</span> REDIS_TLS_KEY_FILE=/opt/redis/certs/redis.key\n      <span class=\"token punctuation\">-</span> REDIS_TLS_CA_FILE=/opt/redis/certs/redisCA.crt\n      <span class=\"token punctuation\">-</span> REDIS_TLS_PORT=6380\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /opt/bitnami/scripts/redis/run.sh <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>maxmemory 100mb <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>tls<span class=\"token punctuation\">-</span>replication yes <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>tls<span class=\"token punctuation\">-</span>key<span class=\"token punctuation\">-</span>file<span class=\"token punctuation\">-</span>pass hello1234\n    <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6379\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6380\"</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要映射tls文件目录，以便redis启动的时候能找到证书，目录结构如下<br><img src=\"https://cdn.jsdelivr.net/gh/wangdengwu/imagehosting/202204212151449.png\"><br>我们现在可以使用docker-compose up -d来启动了，如果没啥意外的话，就启动成功了。<br>下面，我们使用redis-cli来访问一下，由于证书是绑定域名的，如果我们直接访问127.0.0.1的话，是访问失败的，所以还需要修改一下hosts文件绑定域名<code>127.0.0.1 redis.dengwu.wang</code><br>绑定完后，我们来连接一下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">➜  redis-cli -h redis.dengwu.wang -p <span class=\"token number\">6380</span> --tls --cacert ca.crt\nredis.dengwu.wang:638<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span> AUTH hello1234\nOK\nredis.dengwu.wang:638<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span> info replication\n<span class=\"token comment\"># Replication</span>\nrole:master\nconnected_slaves:1\nslave0:ip<span class=\"token operator\">=</span><span class=\"token number\">172.30</span>.0.2,port<span class=\"token operator\">=</span><span class=\"token number\">6380</span>,state<span class=\"token operator\">=</span>online,offset<span class=\"token operator\">=</span><span class=\"token number\">1120</span>,lag<span class=\"token operator\">=</span><span class=\"token number\">1</span>\nmaster_failover_state:no-failover\nmaster_replid:6c3011ca5166f406cb9e9e7ac61bf5854c1f61b5\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:1120\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:1120\nredis.dengwu.wang:638<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>至此自签名的Redis主从就搭建完毕，使用ca证书即可访问</p>\n<h3 id=\"使用Redis的Java客户端jedis等访问\"><a href=\"#使用Redis的Java客户端jedis等访问\" class=\"headerlink\" title=\"使用Redis的Java客户端jedis等访问\"></a>使用Redis的Java客户端jedis等访问</h3><p>如果你使用Java来访问的话，由于jre的本地ca库并没有当前ca证书，所以还需要导入java的证书库<br>我们先使用keytool验证一下当前的ca根证书是否合法</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">keytool -v -printcert -file ca.crt\n所有者: <span class=\"token assign-left variable\">CN</span><span class=\"token operator\">=</span>dengwu.wang Root CA, <span class=\"token assign-left variable\">O</span><span class=\"token operator\">=</span>dengwu.wang\n发布者: <span class=\"token assign-left variable\">CN</span><span class=\"token operator\">=</span>dengwu.wang Root CA, <span class=\"token assign-left variable\">O</span><span class=\"token operator\">=</span>dengwu.wang\n序列号: be26c0031e2f5b03c517dd5ec02a830f\n有效期为 Thu Apr <span class=\"token number\">21</span> <span class=\"token number\">12</span>:45:52 CST <span class=\"token number\">2022</span> 至 Sun Apr <span class=\"token number\">18</span> <span class=\"token number\">12</span>:45:52 CST <span class=\"token number\">2032</span>\n证书指纹:\n\t MD5:  BD:0A:F7:2B:44:A7:27:3E:6F:6E:82:CC:3C:98:69:56\n\t SHA1: <span class=\"token number\">51</span>:89:F7:4E:7C:3E:AD:DC:92:14:00:28:87:E0:23:E1:EA:D2:88:AC\n\t SHA256: 2D:06:83:E4:28:D5:E5:8C:2E:A9:DF:B0:24:37:0F:B6:46:7A:E8:7B:17:EA:D6:88:15:4F:BA:3F:84:BC:0F:DA\n签名算法名称: SHA256withECDSA\n主体公共密钥算法: <span class=\"token number\">256</span> 位 EC 密钥\n版本: <span class=\"token number\">3</span>\n\n扩展:\n\n<span class=\"token comment\">#1: ObjectId: 2.5.29.19 Criticality=true</span>\nBasicConstraints:<span class=\"token punctuation\">[</span>\n  CA:true\n  PathLen:1\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#2: ObjectId: 2.5.29.15 Criticality=true</span>\nKeyUsage <span class=\"token punctuation\">[</span>\n  Key_CertSign\n  Crl_Sign\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#3: ObjectId: 2.5.29.14 Criticality=false</span>\nSubjectKeyIdentifier <span class=\"token punctuation\">[</span>\nKeyIdentifier <span class=\"token punctuation\">[</span>\n0000: <span class=\"token number\">79</span> 5D 02 C3 B7 0E DC <span class=\"token number\">97</span>   <span class=\"token number\">56</span> A6 5A <span class=\"token number\">30</span> <span class=\"token number\">30</span> <span class=\"token number\">30</span> <span class=\"token number\">63</span> <span class=\"token number\">93</span>  y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>V.Z000c.\n0010: <span class=\"token number\">76</span> <span class=\"token number\">33</span> 9A <span class=\"token number\">97</span>                                        v3<span class=\"token punctuation\">..</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说明格式没问题，下面导入java的ca库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo keytool -import -alias dengwu.wang -keystore $JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;security&#x2F;cacerts -storepass changeit -file ca.crt\nPassword:\n所有者: CN&#x3D;dengwu.wang Root CA, O&#x3D;dengwu.wang\n发布者: CN&#x3D;dengwu.wang Root CA, O&#x3D;dengwu.wang\n序列号: be26c0031e2f5b03c517dd5ec02a830f\n有效期为 Thu Apr 21 12:45:52 CST 2022 至 Sun Apr 18 12:45:52 CST 2032\n证书指纹:\n\t MD5:  BD:0A:F7:2B:44:A7:27:3E:6F:6E:82:CC:3C:98:69:56\n\t SHA1: 51:89:F7:4E:7C:3E:AD:DC:92:14:00:28:87:E0:23:E1:EA:D2:88:AC\n\t SHA256: 2D:06:83:E4:28:D5:E5:8C:2E:A9:DF:B0:24:37:0F:B6:46:7A:E8:7B:17:EA:D6:88:15:4F:BA:3F:84:BC:0F:DA\n签名算法名称: SHA256withECDSA\n主体公共密钥算法: 256 位 EC 密钥\n版本: 3\n\n扩展:\n\n#1: ObjectId: 2.5.29.19 Criticality&#x3D;true\nBasicConstraints:[\n  CA:true\n  PathLen:1\n]\n\n#2: ObjectId: 2.5.29.15 Criticality&#x3D;true\nKeyUsage [\n  Key_CertSign\n  Crl_Sign\n]\n\n#3: ObjectId: 2.5.29.14 Criticality&#x3D;false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: 79 5D 02 C3 B7 0E DC 97   56 A6 5A 30 30 30 63 93  y]......V.Z000c.\n0010: 76 33 9A 97                                        v3..\n]\n]\n\n是否信任此证书? [否]:  是\n证书已添加到密钥库中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行<code>keytool -list -trustcacerts -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit |grep dengwu.wang</code>搜索一下<br>dengwu.wang, 2022-4-21, trustedCertEntry,<br>说明已经成功，我们使用jedis来试一下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_redis_tls_with_jedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rediss://redis.dengwu.wang:6380\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SetParams</span><span class=\"token punctuation\">.</span><span class=\"token function\">setParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行成功。</p>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>有时候我们需要执行单元测试，如果是本地跑，可以方便的导入证书和修改hosts，但是有时候测试需要在cd服务器上跑，环境不受控制，那如何解决域名和证书问题呢？<br>答案就是fake或mock，我们可以通过修改jdk运行时的私有数据，来达到绑定域名和导入证书的目的。</p>\n<h4 id=\"解决域名问题\"><a href=\"#解决域名问题\" class=\"headerlink\" title=\"解决域名问题\"></a>解决域名问题</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>collect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ImmutableMap</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>testcontainers<span class=\"token punctuation\">.</span>shaded<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span>nameservice<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NameService</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnknownHostException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MockNameService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NameService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> local <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mockHost <span class=\"token operator\">=</span> <span class=\"token class-name\">ImmutableMap</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"master.dengwu.wang\"</span><span class=\"token punctuation\">,</span> local<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slave1.dengwu.wang\"</span><span class=\"token punctuation\">,</span> local<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slave2.dengwu.wang\"</span><span class=\"token punctuation\">,</span> local<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mockHosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//通过反射拿到nameService列表</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NameService</span><span class=\"token punctuation\">></span></span> nameServices <span class=\"token operator\">=</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span>nameservice<span class=\"token punctuation\">.</span></span>NameService</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n                            <span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">readStaticField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nameServices\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//加入自己的mockNameService</span>\n            nameServices<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MockNameService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">lookupAllHostAddr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> paramString<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnknownHostException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//mock逻辑</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mockHost<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>paramString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayOfByte <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>IPAddressUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">textToNumericFormatV4</span><span class=\"token punctuation\">(</span>mockHost<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>paramString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">InetAddress</span> address <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByAddress</span><span class=\"token punctuation\">(</span>paramString<span class=\"token punctuation\">,</span> arrayOfByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>address<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getHostByAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramArrayOfByte<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnknownHostException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnknownHostException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"解决JDK的根证书问题\"><a href=\"#解决JDK的根证书问题\" class=\"headerlink\" title=\"解决JDK的根证书问题\"></a>解决JDK的根证书问题</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>testcontainers<span class=\"token punctuation\">.</span>shaded<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SSLContextImpl</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SSLContext</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TrustManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>ssl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TrustManagerFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeyStore</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KeyStoreException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoSuchAlgorithmException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>cert<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CertificateException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeX509TrustManager</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DOCKER_TLS_KEYSTORE_JKS <span class=\"token operator\">=</span> <span class=\"token string\">\"docker/tls/cacerts\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> KEYSTORE_PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">\"changeit\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fakeTrustManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> keyStoreInputStream <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>DOCKER_TLS_KEYSTORE_JKS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">SSLContext</span> defaultSSLContext <span class=\"token operator\">=</span> <span class=\"token class-name\">SSLContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">SSLContextImpl</span> sslContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SSLContextImpl</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">readField</span><span class=\"token punctuation\">(</span>defaultSSLContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"contextSpi\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">TrustManagerFactory</span> tmf <span class=\"token operator\">=</span> <span class=\"token class-name\">TrustManagerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SunX509\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">KeyStore</span> ks <span class=\"token operator\">=</span> <span class=\"token class-name\">KeyStore</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JKS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ks<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>keyStoreInputStream<span class=\"token punctuation\">,</span> KEYSTORE_PASSWORD<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tmf<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>ks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">TrustManager</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> trustManagers <span class=\"token operator\">=</span> tmf<span class=\"token punctuation\">.</span><span class=\"token function\">getTrustManagers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">FieldUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeField</span><span class=\"token punctuation\">(</span>sslContext<span class=\"token punctuation\">,</span> <span class=\"token string\">\"trustManager\"</span><span class=\"token punctuation\">,</span> trustManagers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CertificateException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">NoSuchAlgorithmException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">KeyStoreException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span>\n                 <span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>思路就是将之前已经导入CA证书的本地JDK的KeyStore复用，但是JDK没有暴露对应的API，那就只能通过反射拿到，注意JDK的KeyStore默认密码是changeit，格式是JKS的</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>只需要在单元测试的类里，静态调用一下就可以了</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">MockNameService</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockHosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">FakeX509TrustManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">fakeTrustManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Redis环境问题\"><a href=\"#Redis环境问题\" class=\"headerlink\" title=\"Redis环境问题\"></a>Redis环境问题</h4><p>如果有现成的Redis环境，则可以跑集成测试，但是如果没有，那使用docker是个不错的选择，但是单元测试往往需要启动时初始化环境，跑完就销毁即可，那如何将docker和Junit结合呢？<br>可以使用testcontainers，结合docker-compose文件，很方便的测试之前启动docker环境，测试结束销毁docker容器</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Testcontainers</span>\n<span class=\"token annotation punctuation\">@IfProfileValue</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.profiles.active\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"readwrite\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClientReadWriteTests</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token annotation punctuation\">@ClassRule</span>\n  <span class=\"token annotation punctuation\">@Container</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DockerComposeContainer</span> masterSlaves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DockerComposeContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>masterDockerComposeFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">withLocalCompose</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另外还可以通过profile来隔离不同的测试场景，比如主从场景，集群场景，读写分离场景等等</p>\n"},{"title":"使用正则分组匹配字符串","author":"王登武","date":"2022-05-01T06:04:09.000Z","_content":"### 字符串匹配\n假设有这样一个Redis连接字符串:\"redis://hello1234@master.dengwu.wang:6379\"，我们需要提取其中的redis部分和hello1234,以及host和port，如何获取呢？首先想到的是，可以通过split分隔，然后提取其中每个部分，这样做也可以，但是整个操作是基于命令式的，不够语义化，导致理解起来需要了解每个步骤，而且如果增加内容，可能需要对整个操作进行修改，比如可能需要解析多个服务器地址:\"redis://hello1234@master.dengwu.wang:6379,slave1.dengwu.wang:6380\"。\n### 使用正则分组\n正则表达式里，有分组的概念，即通过()的方式，可以分组匹配，这样通过分组，就可以将一个长字符串，分割成语义明确的子字符串，方便匹配。\n比如上面的字符串：\"redis://hello1234@master.dengwu.wang:6379,slave1.dengwu.wang:6380\",可以分成5个部分：\n1. redis是协议分组，可能有redis,rediss,redis-cluster,rediss-cluster\n2. hello1234是密码分组，可能会有各种特殊字符，比如:@:,等等内容，你没办法限定密码设定里的字符内容\n3. master.dengwu.wang:6379,slave1.dengwu.wang:6380这部分统称为right部分分组，需要借助,分隔成host:port内容\n4. master.dengwu.wang部分是host分组\n5. 6379是port分组\n\n看下代码实现：\n\n``` java\n//定义protocol分组，使用?<name>来命名分组\nprivate static final String protocolGroup = \"(?<protocol>redis|rediss|redis-cluster|rediss-cluster)\";\nprivate static final String passwordGroup = \"(?<password>.*)\";\nprivate static final String rightGroup = \"(?<right>[\\\\w.:,?=]+)\";\nprivate static final String hostGroup = \"(?<host>.+)\";\nprivate static final String portGroup = \"(?<port>\\\\d+)\";\nprivate static final Pattern patternAll = Pattern.compile(protocolGroup + \"://\" + passwordGroup + \"@\" + rightGroup);\nprivate static final Pattern patternServer = Pattern.compile(hostGroup + \":\" + portGroup);\nMatcher matcherAll = patternAll.matcher(\"rediss://hello1234@master.dengwu.wang:6379,slave1.dengwu.wang:6380\");\n    if (matcherAll.matches()) {\n        String protocol = matcherAll.group(\"protocol\");\n        String password = matcherAll.group(\"password\");\n        String rightStr = matcherAll.group(\"right\");\n        String[] servers = rightStr.split(\",\");\n        for (String server : servers) {\n            Matcher matcherServer = patternServer.matcher(server);\n            if (matcherServer.matches()) {\n                String host = matcherCluster.group(\"host\");\n                String port = matcherCluster.group(\"port\");\n            }\n        }\n    }\n```\n通过分组匹配，就可以很方便的使用.group(分组名称)，语义化的得到字符串内容，避免了大量split操作导致的理解困难，另外因为password分组使用了贪婪模式，所以可以兼容任意特殊字符串，避免了split时，特殊字符串导致的split未按预期拆分。\n","source":"_posts/使用正则分组匹配字符串.md","raw":"---\ntitle: 使用正则分组匹配字符串\nauthor: 王登武\ndate: 2022-05-01 14:04:09\ncategories:\n  - 程序设计\ntags:\n  - 正则匹配\n---\n### 字符串匹配\n假设有这样一个Redis连接字符串:\"redis://hello1234@master.dengwu.wang:6379\"，我们需要提取其中的redis部分和hello1234,以及host和port，如何获取呢？首先想到的是，可以通过split分隔，然后提取其中每个部分，这样做也可以，但是整个操作是基于命令式的，不够语义化，导致理解起来需要了解每个步骤，而且如果增加内容，可能需要对整个操作进行修改，比如可能需要解析多个服务器地址:\"redis://hello1234@master.dengwu.wang:6379,slave1.dengwu.wang:6380\"。\n### 使用正则分组\n正则表达式里，有分组的概念，即通过()的方式，可以分组匹配，这样通过分组，就可以将一个长字符串，分割成语义明确的子字符串，方便匹配。\n比如上面的字符串：\"redis://hello1234@master.dengwu.wang:6379,slave1.dengwu.wang:6380\",可以分成5个部分：\n1. redis是协议分组，可能有redis,rediss,redis-cluster,rediss-cluster\n2. hello1234是密码分组，可能会有各种特殊字符，比如:@:,等等内容，你没办法限定密码设定里的字符内容\n3. master.dengwu.wang:6379,slave1.dengwu.wang:6380这部分统称为right部分分组，需要借助,分隔成host:port内容\n4. master.dengwu.wang部分是host分组\n5. 6379是port分组\n\n看下代码实现：\n\n``` java\n//定义protocol分组，使用?<name>来命名分组\nprivate static final String protocolGroup = \"(?<protocol>redis|rediss|redis-cluster|rediss-cluster)\";\nprivate static final String passwordGroup = \"(?<password>.*)\";\nprivate static final String rightGroup = \"(?<right>[\\\\w.:,?=]+)\";\nprivate static final String hostGroup = \"(?<host>.+)\";\nprivate static final String portGroup = \"(?<port>\\\\d+)\";\nprivate static final Pattern patternAll = Pattern.compile(protocolGroup + \"://\" + passwordGroup + \"@\" + rightGroup);\nprivate static final Pattern patternServer = Pattern.compile(hostGroup + \":\" + portGroup);\nMatcher matcherAll = patternAll.matcher(\"rediss://hello1234@master.dengwu.wang:6379,slave1.dengwu.wang:6380\");\n    if (matcherAll.matches()) {\n        String protocol = matcherAll.group(\"protocol\");\n        String password = matcherAll.group(\"password\");\n        String rightStr = matcherAll.group(\"right\");\n        String[] servers = rightStr.split(\",\");\n        for (String server : servers) {\n            Matcher matcherServer = patternServer.matcher(server);\n            if (matcherServer.matches()) {\n                String host = matcherCluster.group(\"host\");\n                String port = matcherCluster.group(\"port\");\n            }\n        }\n    }\n```\n通过分组匹配，就可以很方便的使用.group(分组名称)，语义化的得到字符串内容，避免了大量split操作导致的理解困难，另外因为password分组使用了贪婪模式，所以可以兼容任意特殊字符串，避免了split时，特殊字符串导致的split未按预期拆分。\n","slug":"使用正则分组匹配字符串","published":1,"updated":"2022-05-01T06:36:14.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2mx6e4s0000u89g8eyrgqki","content":"<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><p>假设有这样一个Redis连接字符串:”redis://<a href=\"mailto:&#x68;&#101;&#x6c;&#x6c;&#x6f;&#49;&#x32;&#x33;&#x34;&#x40;&#109;&#x61;&#115;&#116;&#101;&#114;&#46;&#x64;&#101;&#110;&#103;&#x77;&#117;&#46;&#119;&#97;&#110;&#x67;\">&#x68;&#101;&#x6c;&#x6c;&#x6f;&#49;&#x32;&#x33;&#x34;&#x40;&#109;&#x61;&#115;&#116;&#101;&#114;&#46;&#x64;&#101;&#110;&#103;&#x77;&#117;&#46;&#119;&#97;&#110;&#x67;</a>:6379”，我们需要提取其中的redis部分和hello1234,以及host和port，如何获取呢？首先想到的是，可以通过split分隔，然后提取其中每个部分，这样做也可以，但是整个操作是基于命令式的，不够语义化，导致理解起来需要了解每个步骤，而且如果增加内容，可能需要对整个操作进行修改，比如可能需要解析多个服务器地址:”redis://<a href=\"mailto:&#x68;&#x65;&#x6c;&#x6c;&#x6f;&#x31;&#50;&#51;&#x34;&#x40;&#109;&#97;&#115;&#x74;&#101;&#x72;&#x2e;&#100;&#x65;&#x6e;&#x67;&#119;&#117;&#46;&#119;&#x61;&#110;&#x67;\">&#x68;&#x65;&#x6c;&#x6c;&#x6f;&#x31;&#50;&#51;&#x34;&#x40;&#109;&#97;&#115;&#x74;&#101;&#x72;&#x2e;&#100;&#x65;&#x6e;&#x67;&#119;&#117;&#46;&#119;&#x61;&#110;&#x67;</a>:6379,slave1.dengwu.wang:6380”。</p>\n<h3 id=\"使用正则分组\"><a href=\"#使用正则分组\" class=\"headerlink\" title=\"使用正则分组\"></a>使用正则分组</h3><p>正则表达式里，有分组的概念，即通过()的方式，可以分组匹配，这样通过分组，就可以将一个长字符串，分割成语义明确的子字符串，方便匹配。<br>比如上面的字符串：”redis://<a href=\"mailto:&#104;&#101;&#x6c;&#108;&#111;&#49;&#50;&#x33;&#x34;&#x40;&#x6d;&#97;&#115;&#x74;&#101;&#x72;&#46;&#x64;&#101;&#x6e;&#103;&#119;&#x75;&#46;&#x77;&#x61;&#x6e;&#x67;\">&#104;&#101;&#x6c;&#108;&#111;&#49;&#50;&#x33;&#x34;&#x40;&#x6d;&#97;&#115;&#x74;&#101;&#x72;&#46;&#x64;&#101;&#x6e;&#103;&#119;&#x75;&#46;&#x77;&#x61;&#x6e;&#x67;</a>:6379,slave1.dengwu.wang:6380”,可以分成5个部分：</p>\n<ol>\n<li>redis是协议分组，可能有redis,rediss,redis-cluster,rediss-cluster</li>\n<li>hello1234是密码分组，可能会有各种特殊字符，比如:@:,等等内容，你没办法限定密码设定里的字符内容</li>\n<li>master.dengwu.wang:6379,slave1.dengwu.wang:6380这部分统称为right部分分组，需要借助,分隔成host:port内容</li>\n<li>master.dengwu.wang部分是host分组</li>\n<li>6379是port分组</li>\n</ol>\n<p>看下代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//定义protocol分组，使用?&lt;name>来命名分组</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> protocolGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;protocol>redis|rediss|redis-cluster|rediss-cluster)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> passwordGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;password>.*)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> rightGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;right>[\\\\w.:,?=]+)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> hostGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;host>.+)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> portGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;port>\\\\d+)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pattern</span> patternAll <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>protocolGroup <span class=\"token operator\">+</span> <span class=\"token string\">\"://\"</span> <span class=\"token operator\">+</span> passwordGroup <span class=\"token operator\">+</span> <span class=\"token string\">\"@\"</span> <span class=\"token operator\">+</span> rightGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pattern</span> patternServer <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>hostGroup <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> portGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Matcher</span> matcherAll <span class=\"token operator\">=</span> patternAll<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rediss://hello1234@master.dengwu.wang:6379,slave1.dengwu.wang:6380\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcherAll<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> protocol <span class=\"token operator\">=</span> matcherAll<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"protocol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> matcherAll<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> rightStr <span class=\"token operator\">=</span> matcherAll<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> servers <span class=\"token operator\">=</span> rightStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> server <span class=\"token operator\">:</span> servers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Matcher</span> matcherServer <span class=\"token operator\">=</span> patternServer<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcherServer<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">String</span> host <span class=\"token operator\">=</span> matcherCluster<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> port <span class=\"token operator\">=</span> matcherCluster<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过分组匹配，就可以很方便的使用.group(分组名称)，语义化的得到字符串内容，避免了大量split操作导致的理解困难，另外因为password分组使用了贪婪模式，所以可以兼容任意特殊字符串，避免了split时，特殊字符串导致的split未按预期拆分。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><p>假设有这样一个Redis连接字符串:”redis://<a href=\"mailto:&#x68;&#101;&#x6c;&#x6c;&#x6f;&#49;&#x32;&#x33;&#x34;&#x40;&#109;&#x61;&#115;&#116;&#101;&#114;&#46;&#x64;&#101;&#110;&#103;&#x77;&#117;&#46;&#119;&#97;&#110;&#x67;\">&#x68;&#101;&#x6c;&#x6c;&#x6f;&#49;&#x32;&#x33;&#x34;&#x40;&#109;&#x61;&#115;&#116;&#101;&#114;&#46;&#x64;&#101;&#110;&#103;&#x77;&#117;&#46;&#119;&#97;&#110;&#x67;</a>:6379”，我们需要提取其中的redis部分和hello1234,以及host和port，如何获取呢？首先想到的是，可以通过split分隔，然后提取其中每个部分，这样做也可以，但是整个操作是基于命令式的，不够语义化，导致理解起来需要了解每个步骤，而且如果增加内容，可能需要对整个操作进行修改，比如可能需要解析多个服务器地址:”redis://<a href=\"mailto:&#x68;&#x65;&#x6c;&#x6c;&#x6f;&#x31;&#50;&#51;&#x34;&#x40;&#109;&#97;&#115;&#x74;&#101;&#x72;&#x2e;&#100;&#x65;&#x6e;&#x67;&#119;&#117;&#46;&#119;&#x61;&#110;&#x67;\">&#x68;&#x65;&#x6c;&#x6c;&#x6f;&#x31;&#50;&#51;&#x34;&#x40;&#109;&#97;&#115;&#x74;&#101;&#x72;&#x2e;&#100;&#x65;&#x6e;&#x67;&#119;&#117;&#46;&#119;&#x61;&#110;&#x67;</a>:6379,slave1.dengwu.wang:6380”。</p>\n<h3 id=\"使用正则分组\"><a href=\"#使用正则分组\" class=\"headerlink\" title=\"使用正则分组\"></a>使用正则分组</h3><p>正则表达式里，有分组的概念，即通过()的方式，可以分组匹配，这样通过分组，就可以将一个长字符串，分割成语义明确的子字符串，方便匹配。<br>比如上面的字符串：”redis://<a href=\"mailto:&#104;&#101;&#x6c;&#108;&#111;&#49;&#50;&#x33;&#x34;&#x40;&#x6d;&#97;&#115;&#x74;&#101;&#x72;&#46;&#x64;&#101;&#x6e;&#103;&#119;&#x75;&#46;&#x77;&#x61;&#x6e;&#x67;\">&#104;&#101;&#x6c;&#108;&#111;&#49;&#50;&#x33;&#x34;&#x40;&#x6d;&#97;&#115;&#x74;&#101;&#x72;&#46;&#x64;&#101;&#x6e;&#103;&#119;&#x75;&#46;&#x77;&#x61;&#x6e;&#x67;</a>:6379,slave1.dengwu.wang:6380”,可以分成5个部分：</p>\n<ol>\n<li>redis是协议分组，可能有redis,rediss,redis-cluster,rediss-cluster</li>\n<li>hello1234是密码分组，可能会有各种特殊字符，比如:@:,等等内容，你没办法限定密码设定里的字符内容</li>\n<li>master.dengwu.wang:6379,slave1.dengwu.wang:6380这部分统称为right部分分组，需要借助,分隔成host:port内容</li>\n<li>master.dengwu.wang部分是host分组</li>\n<li>6379是port分组</li>\n</ol>\n<p>看下代码实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//定义protocol分组，使用?&lt;name>来命名分组</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> protocolGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;protocol>redis|rediss|redis-cluster|rediss-cluster)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> passwordGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;password>.*)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> rightGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;right>[\\\\w.:,?=]+)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> hostGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;host>.+)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> portGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"(?&lt;port>\\\\d+)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pattern</span> patternAll <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>protocolGroup <span class=\"token operator\">+</span> <span class=\"token string\">\"://\"</span> <span class=\"token operator\">+</span> passwordGroup <span class=\"token operator\">+</span> <span class=\"token string\">\"@\"</span> <span class=\"token operator\">+</span> rightGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pattern</span> patternServer <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>hostGroup <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> portGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Matcher</span> matcherAll <span class=\"token operator\">=</span> patternAll<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rediss://hello1234@master.dengwu.wang:6379,slave1.dengwu.wang:6380\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcherAll<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> protocol <span class=\"token operator\">=</span> matcherAll<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"protocol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> matcherAll<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> rightStr <span class=\"token operator\">=</span> matcherAll<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> servers <span class=\"token operator\">=</span> rightStr<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> server <span class=\"token operator\">:</span> servers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Matcher</span> matcherServer <span class=\"token operator\">=</span> patternServer<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcherServer<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">String</span> host <span class=\"token operator\">=</span> matcherCluster<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> port <span class=\"token operator\">=</span> matcherCluster<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过分组匹配，就可以很方便的使用.group(分组名称)，语义化的得到字符串内容，避免了大量split操作导致的理解困难，另外因为password分组使用了贪婪模式，所以可以兼容任意特殊字符串，避免了split时，特殊字符串导致的split未按预期拆分。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckv7yv66i00007a9g1uca62hh","category_id":"ckv2cy47a0006j09gflpv6hot","_id":"ckv7zhjmp0003fa9g8uvyc8mp"},{"post_id":"ckv7zhjmk0000fa9gaj370wkv","category_id":"ckv7zhjmo0002fa9g6n00dkli","_id":"ckv7zhjmq0006fa9g20009l3y"},{"post_id":"ckv7zhjms000cfa9gcq2m316i","category_id":"ckv7zhjmt000dfa9gd36o9z40","_id":"ckv7zhjmv000gfa9g3pqrfbrk"},{"post_id":"ckvgfazz40000ac9g54f50b04","category_id":"ckvgfazza0001ac9g9i99g8ay","_id":"ckvgfazzc0004ac9g4jp5hyn3"},{"post_id":"ckvhpk8k300002w9g8t592537","category_id":"ckvhpk8k800012w9g0ybj7i1n","_id":"ckvhpk8kb00042w9gforw7tp8"},{"post_id":"ckvwa61i90000049ggzm80bwg","category_id":"ckvwa61if0001049gbqvf9pfy","_id":"ckvwa61ii0004049gd2uh0kbc"},{"post_id":"ckwer356y0000zc9g8ktj0ffr","category_id":"ckwer35740001zc9g13of524r","_id":"ckwer35780004zc9ggqkd6k1f"},{"post_id":"ckwn76gjh0000qb9gb39hdnpi","category_id":"ckv7zhjmo0002fa9g6n00dkli","_id":"ckwn76gjq0002qb9ghm4vejkj"},{"post_id":"cl0koly5j00003s9gey21830b","category_id":"ckv7zhjmo0002fa9g6n00dkli","_id":"cl0koly5r00023s9g3tbk9blf"},{"post_id":"cl0t9egek0000cv9gh539g8kr","category_id":"cl0mnkcf40001d29g1n9l3vj2","_id":"cl0t9egeq0003cv9gdn6i8j7p"},{"post_id":"cl10f6g4a00005o9ghumic4lx","category_id":"cl0mnkcf40001d29g1n9l3vj2","_id":"cl10f6g4h00035o9g471ld3nx"},{"post_id":"cl14nmkdx0000cv9gflja69qw","category_id":"cl0mnkcf40001d29g1n9l3vj2","_id":"cl14nmke20003cv9g1azc6tp7"},{"post_id":"cl2933vhl0000kj9g9x2m9awm","category_id":"cl0mnkcf40001d29g1n9l3vj2","_id":"cl2933vht0002kj9gdz8m65ts"},{"post_id":"cl2mx6e4s0000u89g8eyrgqki","category_id":"ckv7zhjmt000dfa9gd36o9z40","_id":"cl2mx6e500002u89g7agpfn3j"}],"PostTag":[{"post_id":"ckv7yv66i00007a9g1uca62hh","tag_id":"ckv7zhjmm0001fa9g34b74yp1","_id":"ckv7zhjmq0007fa9g47pl2u2t"},{"post_id":"ckv7yv66i00007a9g1uca62hh","tag_id":"ckv7zhjmp0004fa9gg55n4qxz","_id":"ckv7zhjmr0008fa9g9wytgu0j"},{"post_id":"ckv7zhjmk0000fa9gaj370wkv","tag_id":"ckv7zhjmq0005fa9gblb0f8hz","_id":"ckv7zhjmr000afa9g5vb9agjb"},{"post_id":"ckv7zhjmk0000fa9gaj370wkv","tag_id":"ckv7zhjmr0009fa9ghm6hfkjy","_id":"ckv7zhjmr000bfa9g9us130ec"},{"post_id":"ckv7zhjms000cfa9gcq2m316i","tag_id":"ckv7zhjmu000efa9gds4u8qkv","_id":"ckv7zhjmv000hfa9gfyzf35hg"},{"post_id":"ckv7zhjms000cfa9gcq2m316i","tag_id":"ckv7zhjmu000ffa9g21wg5cad","_id":"ckv7zhjmv000ifa9g68lr7dcv"},{"post_id":"ckvgfazz40000ac9g54f50b04","tag_id":"ckvgfazzb0002ac9ggh838poj","_id":"ckvgfazzc0003ac9gh98g049i"},{"post_id":"ckvhpk8k300002w9g8t592537","tag_id":"ckvhpk8ka00022w9gb8eehfg0","_id":"ckvhpk8ka00032w9gao5i51ap"},{"post_id":"ckvwa61i90000049ggzm80bwg","tag_id":"ckvwa61ih0002049gfdrh8jlp","_id":"ckvwa61ii0003049g7nimbavy"},{"post_id":"ckwer356y0000zc9g8ktj0ffr","tag_id":"ckwer35770002zc9g5vgvfvg3","_id":"ckwer35780003zc9g5dnw9d0f"},{"post_id":"ckwn76gjh0000qb9gb39hdnpi","tag_id":"ckwn76gjn0001qb9gdbh70g9m","_id":"ckwn76gjr0004qb9geb70296m"},{"post_id":"ckwn76gjh0000qb9gb39hdnpi","tag_id":"ckwn76gjr0003qb9gc71t2meg","_id":"ckwn76gjr0005qb9gaqum0nji"},{"post_id":"cl0koly5j00003s9gey21830b","tag_id":"cl0koly5p00013s9g3sywdcxf","_id":"cl0koly5s00033s9ga9gfgm5n"},{"post_id":"cl0t9egek0000cv9gh539g8kr","tag_id":"cl0mnkcf60002d29g77yqgn4z","_id":"cl0t9egeq0001cv9g8et54wmx"},{"post_id":"cl0t9egek0000cv9gh539g8kr","tag_id":"cl0mnkcf70003d29g6fs38bg9","_id":"cl0t9egeq0002cv9ggmmoe3ro"},{"post_id":"cl10f6g4a00005o9ghumic4lx","tag_id":"cl0mnkcf60002d29g77yqgn4z","_id":"cl10f6g4h00015o9gets9fwek"},{"post_id":"cl10f6g4a00005o9ghumic4lx","tag_id":"cl0mnkcf70003d29g6fs38bg9","_id":"cl10f6g4h00025o9gds5adun8"},{"post_id":"cl14nmkdx0000cv9gflja69qw","tag_id":"cl0mnkcf60002d29g77yqgn4z","_id":"cl14nmke20001cv9g3dgwcs0a"},{"post_id":"cl14nmkdx0000cv9gflja69qw","tag_id":"cl0mnkcf70003d29g6fs38bg9","_id":"cl14nmke20002cv9gh3lva6md"},{"post_id":"cl2933vhl0000kj9g9x2m9awm","tag_id":"cl0mnkcf60002d29g77yqgn4z","_id":"cl2933vhu0003kj9g20qp0xf6"},{"post_id":"cl2933vhl0000kj9g9x2m9awm","tag_id":"cl2933vhr0001kj9g19e03d1o","_id":"cl2933vhu0004kj9gbuydas02"},{"post_id":"cl2mx6e4s0000u89g8eyrgqki","tag_id":"cl2mx6e4y0001u89gcudvdwgw","_id":"cl2mx6e510003u89g9zfahkhf"}],"Tag":[{"name":"Test","_id":"ckv2cy47b0007j09ge2fyeq0v"},{"name":"First","_id":"ckv2cy47b0008j09gbbbc3d7c"},{"name":"selenium","_id":"ckv7zhjmm0001fa9g34b74yp1"},{"name":"UI自动化","_id":"ckv7zhjmp0004fa9gg55n4qxz"},{"name":"spring gateway","_id":"ckv7zhjmq0005fa9gblb0f8hz"},{"name":"Java","_id":"ckv7zhjmr0009fa9ghm6hfkjy"},{"name":"DDD","_id":"ckv7zhjmu000efa9gds4u8qkv"},{"name":"领域驱动","_id":"ckv7zhjmu000ffa9g21wg5cad"},{"name":"docker","_id":"ckvgfazzb0002ac9ggh838poj"},{"name":"vue3","_id":"ckvhpk8ka00022w9gb8eehfg0"},{"name":"图表 - echarts","_id":"ckvwa61ih0002049gfdrh8jlp"},{"name":"函数式编程","_id":"ckwer35770002zc9g5vgvfvg3"},{"name":"HikariCP","_id":"ckwn76gjn0001qb9gdbh70g9m"},{"name":"数据库连接池","_id":"ckwn76gjr0003qb9gc71t2meg"},{"name":"ThreadLocal","_id":"cl0koly5p00013s9g3sywdcxf"},{"name":"redis","_id":"cl0mnkcf60002d29g77yqgn4z"},{"name":"分布式缓存","_id":"cl0mnkcf70003d29g6fs38bg9"},{"name":"tls","_id":"cl2933vhr0001kj9g19e03d1o"},{"name":"正则匹配","_id":"cl2mx6e4y0001u89gcudvdwgw"}]}}